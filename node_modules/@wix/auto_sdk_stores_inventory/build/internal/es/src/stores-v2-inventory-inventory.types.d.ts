export interface InventoryItemV2 {
    /** Inventory item ID. */
    id?: string | null;
    /**
     * Deprecated: use productId.
     * @readonly
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string | null;
    /**
     * Product ID.
     * @readonly
     */
    productId?: string | null;
    /** Whether quantity is being tracked. */
    trackQuantity?: boolean | null;
    /** Variants associated with this inventory item. */
    variants?: InventoryVariantV2[];
    /**
     * Last updated timestamp.
     * @readonly
     */
    lastUpdated?: Date | null;
    /**
     * Inventoryâ€™s unique numeric ID (assigned in ascending order).
     * Primarily for sorting and filtering when crawling all inventories.
     * @readonly
     */
    numericId?: string;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
}
export interface InventoryVariantV2 {
    /** Variant ID. */
    variantId?: string;
    /** Whether the product is listed as in stock. */
    inStock?: boolean | null;
    /** Quantity currently left in inventory. */
    quantity?: number | null;
    /**
     * Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level.
     * @readonly
     */
    availableForPreorder?: boolean;
}
export interface PreorderInfo {
    /** Whether the item is available for preorder. */
    enabled?: boolean;
    /**
     * A message the buyer will see when the item is out of stock and preorder is enabled.
     * @minLength 1
     * @maxLength 250
     */
    message?: string | null;
    /**
     * Number of products that can be preordered after stock reaches zero.
     * @max 100000
     */
    limit?: number | null;
}
export interface UpdateInventoryVariantsRequest {
    /** Inventory item. */
    inventoryItem: InventoryItemV2;
}
export declare enum ReasonType {
    /** Unknown reason. */
    UNKNOWN = "UNKNOWN",
    /** Order related. */
    ORDER = "ORDER",
    /** Manual adjustment. */
    MANUAL = "MANUAL",
    /** Reverting an inventory change. */
    REVERT_INVENTORY_CHANGE = "REVERT_INVENTORY_CHANGE"
}
export interface UpdateInventoryVariantsResponse {
}
export interface BulkUpdateInventoryVariantsRequest extends BulkUpdateInventoryVariantsRequestActionOneOf {
    /** Change availability. */
    setInStock?: boolean | null;
    /** Set new quantity. */
    setQuantity?: number | null;
    /**
     * Number to increment inventory by.
     * @min 1
     */
    incrementBy?: number | null;
    /**
     * Number to decrement inventory by.
     * @min 1
     */
    decrementBy?: number | null;
    /** Variants filter. Learn more about [API query language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language). */
    filter?: Record<string, any> | null;
}
/** @oneof */
export interface BulkUpdateInventoryVariantsRequestActionOneOf {
    /** Change availability. */
    setInStock?: boolean | null;
    /** Set new quantity. */
    setQuantity?: number | null;
    /**
     * Number to increment inventory by.
     * @min 1
     */
    incrementBy?: number | null;
    /**
     * Number to decrement inventory by.
     * @min 1
     */
    decrementBy?: number | null;
}
export interface BulkUpdateInventoryVariantsResponse {
}
export interface BulkUpdateInventoryItemsRequest {
    /** Variants filter */
    variantsFilter?: Record<string, any> | null;
    /** Whether inventory is being tracked. */
    trackInventory?: boolean | null;
}
export interface BulkUpdateInventoryItemsResponse {
}
export interface DecrementInventoryRequest {
    /**
     * @minSize 1
     * @maxSize 300
     */
    decrementData?: DecrementData[];
}
export interface DecrementData extends DecrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * Deprecated: use productId.
     * @maxLength 36
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Number to decrement inventory by.
     * @min 1
     */
    decrementBy?: number;
    /**
     * Whether the request to decrement the item's inventory was made as part of a purchase that includes preorder items.
     * If true and the item is available for preorder, we allow negative inventory.
     * If false and the item is not available for preorder, we allow regular buy flow (no negative inventory).
     */
    preorderRequest?: boolean;
}
/** @oneof */
export interface DecrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * Deprecated: use productId.
     * @maxLength 36
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
}
export interface DecrementInventoryResponse {
}
export interface IncrementInventoryRequest {
    /**
     * @minSize 1
     * @maxSize 300
     */
    incrementData?: IncrementData[];
}
export interface IncrementData extends IncrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
    /**
     * Variant ID.
     * @format GUID
     */
    variantId?: string;
    /**
     * Number to increment inventory by.
     * @min 1
     */
    incrementBy?: number;
}
/** @oneof */
export interface IncrementDataIdOneOf {
    /**
     * Inventory item ID.
     * @maxLength 36
     */
    inventoryId?: string;
    /**
     * Product ID.
     * @maxLength 36
     */
    productId?: string;
}
export interface IncrementInventoryResponse {
}
export interface InventoryItemChanged {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /**
     * Deprecated: use productId.
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Whether inventory is being tracked. */
    trackInventory?: boolean;
    /** Preorder information. */
    preorderInfo?: PreorderInfo;
    /** Field mask of updated fields. */
    fieldMask?: string[];
    /** Date and time the inventory item was last updated. */
    updatedDate?: Date | null;
}
export interface InventoryVariantsChanged {
    /** Inventory item ID. */
    inventoryItemId?: string;
    /**
     * Deprecated: use productId.
     * @deprecated Deprecated: use productId.
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Information about changed variants. */
    variants?: ChangedInventoryVariant[];
    /** Date and time the inventory variant item was last updated. */
    updatedDate?: Date | null;
}
export interface ChangedInventoryVariant {
    /** Variant ID. */
    id?: string;
    /** Previous inventory variant data. */
    oldValue?: ChangedInventoryVariantData;
    /** Current inventory variant data. */
    newValue?: ChangedInventoryVariantData;
}
export interface ChangedInventoryVariantData {
    /** Inventory variant quantity. */
    quantity?: number | null;
    /** Whether the product variant is in stock. */
    inStock?: boolean;
    /** Whether the variant is available for preorder. When `true`, the variant is out of stock and preorder is enabled on inventory level. */
    availableForPreorder?: boolean;
}
export interface GetInventoryVariantsRequest extends GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId: string;
    /**
     * Deprecated (use productID instead).
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
    /** Variant IDs to query for this inventory item (optional). */
    variantIds?: string[];
}
/** @oneof */
export interface GetInventoryVariantsRequestIdOneOf {
    /** Inventory item ID. */
    inventoryId?: string;
    /**
     * Deprecated (use productID instead).
     * @deprecated Deprecated (use productID instead).
     * @replacedBy product_id
     * @targetRemovalDate 2024-12-31
     */
    externalId?: string;
    /** Product ID. */
    productId?: string;
}
export interface GetInventoryVariantsResponse {
    /** Inventory item. */
    inventoryItem?: InventoryItemV2;
}
export interface GetInventoryItemsRequest {
    /** Product IDs */
    productIds?: string[];
}
export interface GetInventoryItemsResponse {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2[];
}
export interface QueryInventoryRequest {
    query?: Query;
}
export interface Query {
    paging?: Paging;
    /** Filter string */
    filter?: string | null;
    /** Sort string */
    sort?: string | null;
}
export interface Paging {
    /**
     * Amount of items to load per page
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number | null;
}
export interface QueryInventoryResponse {
    /** Inventory items. */
    inventoryItems?: InventoryItemV2[];
    /** Display metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
export interface PagingMetadata {
    /** Amount of items to load per page */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first) */
    offset?: number;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface InventoryVariantV2NonNullableFields {
    variantId: string;
    availableForPreorder: boolean;
}
interface PreorderInfoNonNullableFields {
    enabled: boolean;
}
interface InventoryItemV2NonNullableFields {
    variants: InventoryVariantV2NonNullableFields[];
    numericId: string;
    preorderInfo?: PreorderInfoNonNullableFields;
}
export interface GetInventoryVariantsResponseNonNullableFields {
    inventoryItem?: InventoryItemV2NonNullableFields;
}
interface PagingMetadataNonNullableFields {
    items: number;
    offset: number;
}
export interface QueryInventoryResponseNonNullableFields {
    inventoryItems: InventoryItemV2NonNullableFields[];
    metadata?: PagingMetadataNonNullableFields;
    totalResults: number;
}
export {};
