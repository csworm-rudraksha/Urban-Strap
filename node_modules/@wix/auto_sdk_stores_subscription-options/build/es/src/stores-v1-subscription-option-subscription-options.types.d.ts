export interface SubscriptionOption {
    /**
     * Subscription option ID (auto-generated upon subscription option creation).
     * @format GUID
     */
    id?: string | null;
    /**
     * Subscription option title.
     * @minLength 1
     * @maxLength 20
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @maxLength 60
     */
    description?: string | null;
    /** Subscription charge times. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * For example, a $20 discount would be `value: 20`, `type: AMOUNT`.
     */
    discount?: Discount;
}
export interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /**
     * Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`.
     * @min 2
     * @max 999
     */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
export declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
export interface Discount {
    /** Discount type. */
    type?: DiscountType;
    /** Discount value. */
    value?: number;
}
export declare enum DiscountType {
    UNDEFINED = "UNDEFINED",
    /** No discount */
    AMOUNT = "AMOUNT",
    PERCENT = "PERCENT"
}
export interface GetSubscriptionOptionRequest {
    /**
     * Subscription option ID.
     * @minLength 1
     * @format GUID
     */
    id: string;
}
export interface GetSubscriptionOptionResponse {
    /** Subscription option. */
    subscriptionOption?: SubscriptionOption;
}
export interface GetSubscriptionOptionsForProductRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /** Whether to include hidden subscription options in the results. */
    includeHiddenSubscriptionOptions?: boolean;
}
export interface GetSubscriptionOptionsForProductResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOptionInProduct[];
}
export interface SubscriptionOptionInProduct {
    /**
     * Subscription option ID.
     * @format GUID
     */
    id?: string;
    /** Whether the subscription option is hidden for the product (the default is false). */
    hidden?: boolean;
    /**
     * Subscription option title.
     * @minLength 1
     * @maxLength 20
     * @readonly
     */
    title?: string | null;
    /**
     * Subscription option description (optional).
     * @maxLength 60
     * @readonly
     */
    description?: string | null;
    /**
     * Subscription payment settings. For example, if `frequency: MONTH` and `billingCycles: 6`; payment will be made monthly for 6 months.
     * @readonly
     */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Discount info (optional).
     * @readonly
     */
    discount?: Discount;
}
export interface ListSubscriptionOptionsRequest {
    /**
     * Subscription option IDs.
     * @format GUID
     * @maxSize 100
     */
    ids?: string[];
}
export interface ListSubscriptionOptionsResponse {
    /** Subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
export interface CalculatePricesRequest {
    /** original price to which subscription options discount will be applied */
    price?: number;
    /**
     * ids of subscription options which will be applied to original price
     * @format GUID
     * @maxSize 100
     */
    ids?: string[];
}
export interface CalculatePricesResponse {
    /** array of calculated prices */
    prices?: SubscriptionOptionPrices[];
    /** price to which subscription options discount applied */
    originalPrice?: number;
}
export interface SubscriptionOptionPrices {
    /** Subscription option id */
    id?: string;
    /** Price data calculated for subscription option */
    priceData?: SubscriptionOptionPriceData;
    /** Price data calculated for subscription option, converted to the currency requested in request header */
    convertedPriceData?: SubscriptionOptionPriceData;
}
export interface SubscriptionOptionPriceData {
    /** Subscription option price currency */
    currency?: string;
    /** Price calculated after subscription option discount applied */
    discountedPrice?: number;
    /** Price calculated after subscription option discount applied, formatted with the currency */
    formattedDiscountedPrice?: string;
}
export interface BulkCalculatePricesRequest {
    /**
     * Original prices to which subscription options discount will be applied.
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * @maxSize 1001
     */
    prices?: Record<string, number>;
    /**
     * ids of subscription options which will be applied to original price
     * @format GUID
     * @maxSize 100
     */
    ids?: string[];
}
export interface BulkCalculatePricesResponse {
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option
     */
    calculatedPrices?: Record<string, CalculatePricesResponse>;
}
export interface BulkCalculatePricesRequestV2 {
    /**
     * Original prices to be calculated for each corresponding product id with related subscription plan ids
     * @maxSize 100
     */
    items?: BulkCalculatePricesRequestItem[];
}
export interface BulkCalculatePricesRequestItem {
    /**
     * Calculation id (product id)
     * @minLength 1
     * @maxLength 36
     */
    id?: string;
    /**
     * Original prices to which subscription options discount will be applied.
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * @maxSize 1001
     */
    prices?: Record<string, number>;
    /**
     * ids of subscription options which will be applied to original price.
     * @format GUID
     * @maxSize 100
     */
    subscriptionOptionIds?: string[];
}
export interface BulkCalculatePricesResponseV2 {
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option for each product
     */
    calculatedPricesPerProduct?: BulkCalculatePricesResponseItem[];
}
export interface BulkCalculatePricesResponseItem {
    /**
     * Calculation id (product id)
     * @minLength 1
     */
    id?: string;
    /**
     * Key is identifier unique per price that can be used to match calculated prices with original price
     * Value is response with calculated prices for each subscription option
     */
    calculatedPrices?: Record<string, CalculatePricesResponse>;
}
export interface GetProductIdsForSubscriptionOptionRequest {
    /**
     * Subscription option ID.
     * @minLength 1
     * @format GUID
     */
    id: string;
    /** Whether to include hidden products in the returned results. */
    includeHiddenProducts?: boolean;
    /** Optional pagination parameters */
    paging?: Paging;
}
export interface Paging {
    /**
     * Amount of items to load per page.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number | null;
}
export interface GetProductIdsForSubscriptionOptionResponse {
    /** IDs of products associated with the specified subscription option. */
    productIds?: string[];
    /** Paging metadata. */
    metadata?: PagingMetadata;
    /** Number of total results. */
    totalResults?: number;
}
export interface PagingMetadata {
    /** Amount of items to load per page. */
    items?: number;
    /** Number of items to skip in the display (relevant for all pages after the first). */
    offset?: number;
}
export interface GetOneTimePurchasesStatusRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
}
export interface GetOneTimePurchasesStatusResponse {
    /** Whether the specified product is available for one-time purchase */
    allowed?: boolean;
}
export interface CreateSubscriptionOptionRequest {
    /** Subscription option info. */
    subscriptionOption: SubscriptionOption;
}
export interface CreateSubscriptionOptionResponse {
    /** Newly created subscription option. */
    subscriptionOption?: SubscriptionOption;
}
export interface UpdateSubscriptionOptionRequest {
    /** Subscription option info. Only the passed parameters will be updated. */
    subscriptionOption: SubscriptionOption;
}
export interface UpdateSubscriptionOptionResponse {
    /** Updated subscription option. */
    subscriptionOption?: SubscriptionOption;
}
export interface DeleteSubscriptionOptionRequest {
    /**
     * ID of the subscription option to delete.
     * @minLength 1
     * @format GUID
     */
    id: string;
}
export interface DeleteSubscriptionOptionResponse {
}
export interface BulkCreateSubscriptionOptionsRequest {
    /**
     * Subscription options info.
     * @maxSize 100
     */
    subscriptionOptions: SubscriptionOption[];
}
export interface BulkCreateSubscriptionOptionsResponse {
    /** Newly created subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
export interface BulkUpdateSubscriptionOptionsRequest {
    /**
     * Subscription options info. Only the passed parameters in each subscription option will be updated.
     * @maxSize 100
     */
    subscriptionOptions: SubscriptionOption[];
}
export interface BulkUpdateSubscriptionOptionsResponse {
    /** Updated subscription options. */
    subscriptionOptions?: SubscriptionOption[];
}
export interface BulkDeleteSubscriptionOptionsRequest {
    /**
     * IDs of the subscription options to delete.
     * @maxSize 100
     * @format GUID
     */
    ids: string[];
}
export interface BulkDeleteSubscriptionOptionsResponse {
}
export interface AssignSubscriptionOptionsToProductRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /**
     * Ordered array of subscription options that will be assigned to the product. Pass an empty array to remove all subscription options from the product.
     * @maxSize 6
     */
    assignedSubscriptionOptions?: SubscriptionOptionInProduct[];
}
export interface AssignSubscriptionOptionsToProductResponse {
}
export interface AllowOneTimePurchasesRequest {
    /**
     * Product ID.
     * @minLength 1
     */
    productId: string;
    /** Pass `true` to offer product by subscription and as one-time purchase. Pass `false` to offer product as subscription only. */
    allowed: boolean | null;
}
export interface AllowOneTimePurchasesResponse {
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
}
interface DiscountNonNullableFields {
    type: DiscountType;
    value: number;
}
interface SubscriptionOptionNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    discount?: DiscountNonNullableFields;
}
export interface GetSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
interface SubscriptionOptionInProductNonNullableFields {
    id: string;
    hidden: boolean;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    discount?: DiscountNonNullableFields;
}
export interface GetSubscriptionOptionsForProductResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionInProductNonNullableFields[];
}
interface PagingMetadataNonNullableFields {
    items: number;
    offset: number;
}
export interface GetProductIdsForSubscriptionOptionResponseNonNullableFields {
    productIds: string[];
    metadata?: PagingMetadataNonNullableFields;
    totalResults: number;
}
export interface GetOneTimePurchasesStatusResponseNonNullableFields {
    allowed: boolean;
}
export interface CreateSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
export interface UpdateSubscriptionOptionResponseNonNullableFields {
    subscriptionOption?: SubscriptionOptionNonNullableFields;
}
export interface BulkCreateSubscriptionOptionsResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionNonNullableFields[];
}
export interface BulkUpdateSubscriptionOptionsResponseNonNullableFields {
    subscriptionOptions: SubscriptionOptionNonNullableFields[];
}
export {};
