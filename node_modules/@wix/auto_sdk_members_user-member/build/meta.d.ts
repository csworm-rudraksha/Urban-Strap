import { Q as QueryUserMembersRequest$1, h as QueryUserMembersResponse$1 } from './members-usermembers-v1-user-member-user-member.universal-DIIzOlMv.js';

interface UserMember {
    /**
     * Profile ID.
     * @format GUID
     * @readonly
     */
    memberId?: string | null;
    /**
     * User ID.
     * @format GUID
     * @readonly
     */
    userId?: string | null;
    /**
     * Contact ID.
     * @format GUID
     * @readonly
     */
    contactId?: string | null;
    /**
     * Instance ID of the installed [Wix Members Area app](https://www.wix.com/app-market/web-solution/members-area) on the Wix site.
     * @format GUID
     * @readonly
     */
    siteMembersInstanceId?: string | null;
    /**
     * Metasite ID.
     * @format GUID
     * @readonly
     */
    metaSiteId?: string | null;
    /** User member profile picture. */
    photo?: Image;
    /**
     * User member nickname.
     * @readonly
     */
    nickname?: string | null;
    /**
     * User member profile privacy status.
     * @readonly
     */
    privacyStatus?: PrivacyStatusStatus;
    /**
     * Date and time the user member was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the user member was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * User member site access status.
     * @readonly
     */
    status?: Status;
    /**
     * User member activity status.
     * @readonly
     */
    activityStatus?: ActivityStatusStatus;
}
interface Image {
    /**
     * Wix Media image ID,
     * set when the member selects an image from Wix Media.
     */
    id?: string;
    /** Image URL. */
    url?: string;
    /** Original image width. */
    height?: number;
    /** Original image height. */
    width?: number;
    /**
     * X-axis offset.
     *
     * Default: `0`.
     */
    offsetX?: number | null;
    /**
     * Y-axis offset.
     *
     * Default: `0`.
     */
    offsetY?: number | null;
}
declare enum PrivacyStatusStatus {
    /** Unknown status. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** User member is hidden from everyone who visits the site. The member is returned only to Wix users and apps with the appropriate permissions. */
    PRIVATE = "PRIVATE",
    /** User member is visible to everyone. */
    PUBLIC = "PUBLIC"
}
declare enum Status {
    /** Unknown status. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** User member is created and is waiting for the approval. */
    PENDING = "PENDING",
    /** User member is approved and can log in to the site. */
    APPROVED = "APPROVED",
    /** User member is approved and can't log in to the site. */
    BLOCKED = "BLOCKED",
    /** User member is a [guest author](https://support.wix.com/en/article/wix-blog-adding-managed-writers-to-your-blog) for the site blog and can't log in to the site. */
    OFFLINE = "OFFLINE"
}
declare enum ActivityStatusStatus {
    /** Unknown status. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** User member can participate in site activities, such as writing blog posts and forum comments. */
    ACTIVE = "ACTIVE",
    /** User member can't participate in site activities, such as writing blog posts and forum comments. */
    MUTED = "MUTED"
}
interface QueryUserMembersRequest {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    query?: CursorQuery;
}
interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    /** Sorting is in ascending order. */
    ASC = "ASC",
    /** Sorting is in descending order. */
    DESC = "DESC"
}
interface CursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
interface QueryUserMembersResponse {
    /** Retrieved user members. */
    userMembers?: UserMember[];
    /** Metadata for the paginated results. */
    metadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function queryUserMembers(): __PublicMethodMetaInfo<'POST', {}, QueryUserMembersRequest$1, QueryUserMembersRequest, QueryUserMembersResponse$1, QueryUserMembersResponse>;

export { type __PublicMethodMetaInfo, queryUserMembers };
