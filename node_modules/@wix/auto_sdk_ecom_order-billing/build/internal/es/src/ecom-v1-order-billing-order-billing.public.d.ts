import { HttpClient } from '@wix/sdk-types';
import { AuthorizeChargeWithSavedPaymentMethodOptions, AuthorizeChargeWithSavedPaymentMethodResponse, CalculateRefundOptions, CalculateRefundResponse, CaptureAuthorizedPaymentsOptions, CaptureAuthorizedPaymentsResponse, GenerateReceiptsOptions, GenerateReceiptsResponse, GetOrderRefundabilityResponse, RefundPaymentsOptions, RefundPaymentsResponse, VoidAuthorizedPaymentsOptions, VoidAuthorizedPaymentsResponse } from './ecom-v1-order-billing-order-billing.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function getOrderRefundability(httpClient: HttpClient): GetOrderRefundabilitySignature;
interface GetOrderRefundabilitySignature {
    /**
     * Retrieves refund information about an order's payments, line items, shipping, and additional fees.
     *
     * The following information is returned:
     * - Whether a payment is refundable; previously refunded amounts; possible refund amounts for each payment.
     * - Refundable and previously refunded quantities for each line item, as well as shipping and additional fees.
     * @param - Order ID.
     */
    (orderId: string): Promise<GetOrderRefundabilityResponse>;
}
export declare function calculateRefund(httpClient: HttpClient): CalculateRefundSignature;
interface CalculateRefundSignature {
    /**
     * Calculates refund amounts for a given list of an order's line items, shipping, and additional fees.
     * @param - Order ID.
     */
    (orderId: string, options?: CalculateRefundOptions | undefined): Promise<CalculateRefundResponse>;
}
export declare function refundPayments(httpClient: HttpClient): RefundPaymentsSignature;
interface RefundPaymentsSignature {
    /**
     * Calls relevant payment providers and creates refund transactions for the requested payments.
     *
     * Refunds marked with `paymentRefunds.externalRefund = true` do not call payment providers and
     * only update the order's transactions records.
     * @param - Order ID.
     */
    (orderId: string, options?: RefundPaymentsOptions | undefined): Promise<RefundPaymentsResponse>;
}
export declare function authorizeChargeWithSavedPaymentMethod(httpClient: HttpClient): AuthorizeChargeWithSavedPaymentMethodSignature;
interface AuthorizeChargeWithSavedPaymentMethodSignature {
    /**
     * Authorizes a payment using an order's saved payment method.
     *
     * Use the `delayedCaptureSettings` field to specify whether the payment should also be captured/voided immediately or at a later time.
     * Alternatively, the payment can be manually captured or voided using the Capture Authorized Payments or Void Authorized Payments methods.
     * @param - Order ID.
     *
     * The order must have a saved payment method associated.
     * Pass the order ID to the List Transactions For Single Order method and search the response for a payment with `regularPaymentDetails.savedPaymentMethod: true`.
     * If no saved payment exists, the call will fail.
     */
    (orderId: string, options: AuthorizeChargeWithSavedPaymentMethodOptions): Promise<AuthorizeChargeWithSavedPaymentMethodResponse>;
}
export declare function voidAuthorizedPayments(httpClient: HttpClient): VoidAuthorizedPaymentsSignature;
interface VoidAuthorizedPaymentsSignature {
    /**
     * Voids an order's authorized payments.
     * @param - Order ID.
     */
    (orderId: string, options: VoidAuthorizedPaymentsOptions): Promise<VoidAuthorizedPaymentsResponse>;
}
export declare function captureAuthorizedPayments(httpClient: HttpClient): CaptureAuthorizedPaymentsSignature;
interface CaptureAuthorizedPaymentsSignature {
    /**
     * Captures an order's authorized payments.
     * @param - Order ID.
     */
    (orderId: string, options: CaptureAuthorizedPaymentsOptions): Promise<CaptureAuthorizedPaymentsResponse>;
}
/** @internal */
export declare function generateReceipts(httpClient: HttpClient): GenerateReceiptsSignature;
interface GenerateReceiptsSignature {
    /**
     * Generates receipts for an order's specified payments.
     * @param - Order ID.
     */
    (orderId: string, options: GenerateReceiptsOptions): Promise<GenerateReceiptsResponse>;
}
export { ActionEvent, ActionType, AdditionalFeeRefund, AdditionalFeeRefundability, AggregatedRefundSummary, ApplicationError, AuthorizationActionFailureDetails, AuthorizationCapture, AuthorizationCaptureStatus, AuthorizationDetails, AuthorizationVoid, AuthorizationVoidStatus, AuthorizeChargeWithSavedPaymentMethodOptions, AuthorizeChargeWithSavedPaymentMethodRequest, AuthorizeChargeWithSavedPaymentMethodResponse, CalculateRefundOptions, CalculateRefundRequest, CalculateRefundResponse, CalculateRefundResponseStatusOneOf, CalculatedAdditionalFeeRefund, CalculatedLineItemRefund, CalculatedRefundItems, CalculatedRefundNotAvailableStatus, CalculatedRefundSummary, CalculatedShippingRefund, CalculationError, CalculationErrorItemOneOf, CaptureAuthorizedPaymentsOptions, CaptureAuthorizedPaymentsRequest, CaptureAuthorizedPaymentsResponse, CreditCardPaymentMethodDetails, DelayedCaptureSettings, Details, DetailsKindOneOf, DomainEvent, DomainEventBodyOneOf, Duration, DurationUnit, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ExternalReceiptInfo, FieldViolation, GenerateReceiptsOptions, GenerateReceiptsRequest, GenerateReceiptsResponse, GetOrderRefundabilityRequest, GetOrderRefundabilityResponse, GiftCardPaymentDetails, LineItemRefund, LineItemRefundSummary, LineItemRefundability, ManuallyRefundablePaymentStatus, ManuallyRefundableReason, MembershipName, MembershipPaymentDetails, MembershipPaymentStatus, MembershipPaymentSummary, MonetaryPaymentSummary, NonRefundablePaymentStatus, NonRefundableReason, NotificationSideEffects, OrderBilling, OrderTransactions, Payment, PaymentCapture, PaymentInfo, PaymentInfoPaymentMethodDetailsOneOf, PaymentInfoSummaryOneOf, PaymentNotRefundableDetails, PaymentPaymentDetailsOneOf, PaymentReceiptInfoOneOf, PaymentRefund, PaymentRefundability, PaymentRefundabilityStatusOneOf, PaymentsSummary, Price, Reason, ReceiptInfo, Refund, RefundDetails, RefundItem, RefundItems, RefundItemsBreakdown, RefundPaymentsOptions, RefundPaymentsRequest, RefundPaymentsResponse, RefundSideEffects, RefundStatus, RefundStatusInfo, RefundTransaction, RegularPaymentDetails, RegularPaymentDetailsPaymentMethodDetailsOneOf, RestockItem, RestockSideEffects, RestoreInfo, RuleType, ScheduledAction, ShippingRefund, ShippingRefundability, SystemError, TransactionStatus, V1AdditionalFeeRefund, V1AggregatedRefundSummary, V1LineItemRefund, V1ScheduledAction, V1ShippingRefund, ValidationError, VoidAuthorizedPaymentsOptions, VoidAuthorizedPaymentsRequest, VoidAuthorizedPaymentsResponse, WixReceiptInfo, } from './ecom-v1-order-billing-order-billing.universal.js';
