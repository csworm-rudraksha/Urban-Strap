"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryAttendance = exports.bulkSetAttendance = exports.setAttendance = exports.getAttendance = exports.WebhookIdentityType = exports.SortOrder = exports.AttendanceStatus = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsV2Attendance = __importStar(require("./bookings-v2-attendance-attendance.http.js"));
var AttendanceStatus;
(function (AttendanceStatus) {
    /** There is no available attendance information. */
    AttendanceStatus["NOT_SET"] = "NOT_SET";
    /** At least a single participant attended the session. */
    AttendanceStatus["ATTENDED"] = "ATTENDED";
    /** No participants attended the session. */
    AttendanceStatus["NOT_ATTENDED"] = "NOT_ATTENDED";
})(AttendanceStatus || (exports.AttendanceStatus = AttendanceStatus = {}));
/**
 * Sort order. Use `ASC` for ascending order or `DESC` for descending order.
 *
 * Default: `ASC`.
 */
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves attendance information.
 * @param attendanceId - ID of the attendance object to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField attendanceId
 * @permissionId BOOKINGS.ATTENDANCE_READ
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved attendance.
 * @fqn com.wixpress.bookings.attendance.v2.AttendanceService.GetAttendance
 */
async function getAttendance(attendanceId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        attendanceId: attendanceId,
    });
    const reqOpts = ambassadorWixBookingsV2Attendance.getAttendance(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.attendance;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { attendanceId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['attendanceId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getAttendance = getAttendance;
/**
 * Sets or updates attendance information for a booking session. This
 * information is stored in an `attendance` object.
 *
 * If an `attendance` object already exists for the session, it's updated.
 * Otherwise, a new object is created.
 *
 * By default, `numberOfAttendees` is set to `1`, but you can specify a higher
 * number if multiple participants attended. Do not set `numberOfAttendees` to
 * `0` to indicate no attendance, instead specify `{"status": "NOT_ATTENDED"}`.
 *
 * Validation guidelines:
 *
 * + The call succeeds for mismatches between `numberOfAttendees`
 * and `status`. For example, make sure that your code doesn't specify
 * `{"status": "NOT_ATTENDED"}` with `{"numberOfAttendees": 5}`.
 * + The API also allows `numberOfAttendees` to exceed the booking's
 * `numberOfParticipants`. Use higher values only when scenarios like
 * walk-ins justify the exception.
 * @param attendance - Attendance to create or update.
 * @public
 * @documentationMaturity preview
 * @requiredField attendance
 * @requiredField attendance.bookingId
 * @requiredField attendance.status
 * @param options - Options to use when setting an attendance.
 * @permissionId BOOKINGS.ATTENDANCE_SET
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.attendance.v2.AttendanceService.SetAttendance
 */
async function setAttendance(attendance, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        attendance: attendance,
        participantNotification: options?.participantNotification,
    });
    const reqOpts = ambassadorWixBookingsV2Attendance.setAttendance(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                attendance: '$[0]',
                participantNotification: '$[1].participantNotification',
            },
            singleArgumentUnchanged: false,
        }, ['attendance', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.setAttendance = setAttendance;
/**
 * Sets or updates attendance information for multiple booking sessions.
 *
 *
 * Refer to Set Attendance for detailed behavior of individual attendance
 * entries.
 *
 * The call fails entirely if any entry in `attendanceDetails` is missing a
 * required field.
 *
 * If attendance details are provided for a non-existent session, the call
 * succeeds for valid sessions while marking the unavailable session as a
 * failure in the response.
 * @public
 * @documentationMaturity preview
 * @param options - Options to use when setting multiple attendances in bulk.
 * @permissionId BOOKINGS.ATTENDANCE_SET
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.attendance.v2.AttendanceService.BulkSetAttendance
 */
async function bulkSetAttendance(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        returnFullEntity: options?.returnFullEntity,
        attendanceDetails: options?.attendanceDetails,
    });
    const reqOpts = ambassadorWixBookingsV2Attendance.bulkSetAttendance(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                returnFullEntity: '$[0].returnFullEntity',
                attendanceDetails: '$[0].attendanceDetails',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkSetAttendance = bulkSetAttendance;
/**
 * Creates a query to retrieve a list of attendances.
 *
 * The `queryAttendances()` function builds a query to retrieve a list of attendances and returns a `AttendancesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to call the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/bookings/attendance/attendances-query-builder/find) function.
 *
 * You can refine the query by chaining `AttendancesQueryBuilder` functions onto the query. `AttendancesQueryBuilder` functions enable you to sort, filter, and control the results that `queryAttendances()` returns.
 *
 * `queryAttendances()` uses the following `AttendancesQueryBuilder` default values that you can override:
 *
 * + `limit` is `50`.
 * + Sorted by `id` in ascending order.
 *
 * The functions that are chained to `queryAttendances()` are applied in the order they are called. For example, if you apply `ascending("status")` and then `ascending("numberOfAttendees")`, the results are sorted first by the `"status"`, and then, if there are multiple results with the same `"status"`, the items are sorted by `"numberOfAttendees"`.
 *
 * The following `AttendancesQueryBuilder` functions are supported for the `queryAttendances()` function. For a full description of the tip settings object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/bookings/attendance/attendances-query-result/items) property in `AttendancesQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.ATTENDANCE_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.attendance.v2.AttendanceService.QueryAttendance
 */
function queryAttendance() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsV2Attendance.queryAttendance(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.attendances,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryAttendance = queryAttendance;
//# sourceMappingURL=bookings-v2-attendance-attendance.universal.js.map