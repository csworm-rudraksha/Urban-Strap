/** Member-to-member block. */
interface MemberToMemberBlock {
    /**
     * ID of the member that is the creator of this block.
     * @format GUID
     */
    blockingMemberId?: string;
    /**
     * ID of the member that is blocked by this block.
     * @format GUID
     */
    blockedMemberId?: string;
}
interface BlockMemberRequest {
    /**
     * ID of a member to block.
     * @format GUID
     */
    memberId: string;
}
interface BlockMemberResponse {
}
interface MemberBlockedByMember {
    /** The block that has been created. */
    block?: MemberToMemberBlock;
}
interface MemberAlreadyBlockedError {
    /** @format GUID */
    initiatorMemberId?: string;
    /** @format GUID */
    targetMemberId?: string;
}
interface SelfBlockingForbiddenError {
    /** @format GUID */
    initiatorMemberId?: string;
}
interface AdminBlockingForbiddenError {
    /** @format GUID */
    initiatorMemberId?: string;
    /** @format GUID */
    targetMemberId?: string;
    /** @format GUID */
    adminMemberId?: string;
}
interface UnblockMemberRequest {
    /**
     * ID of a member to unblock.
     * @format GUID
     */
    memberId: string;
}
interface UnblockMemberResponse {
}
interface MemberUnblockedByMember {
    /** The block that has been removed. */
    block?: MemberToMemberBlock;
}
interface SelfUnblockingForbiddenError {
    /** @format GUID */
    initiatorMemberId?: string;
}
interface BlockDoesNotExistError {
    /** @format GUID */
    blockingMemberId?: string;
    /** @format GUID */
    blockedMemberId?: string;
}
interface ListCurrentMemberBlockingRequest {
    /** Pagination parameters. */
    cursorPaging?: CursorPaging;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface ListCurrentMemberBlockingResponse {
    /**
     * IDs of members blocked by the current member.
     * @format GUID
     */
    blockedMemberIds?: string[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface ListMemberBlocksRequest {
    /**
     * ID of a member whose blocks are requested.
     * @format GUID
     */
    memberId: string;
    /** Pagination parameters. */
    cursorPaging?: CursorPaging;
}
interface ListMemberBlocksResponse {
    /** List of members who are either blocking or blocked by the specified member. */
    memberBlocks?: MemberBlock[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface MemberBlock {
    /**
     * Member ID.
     * @format GUID
     */
    memberId?: string;
    /**
     * Indicates whether the member with `memberId` is blocking or blocked by the specified member.
     *
     * - `BLOCKING`: The member with `memberId` is blocking the requested member.
     * - `BLOCKED`: The member with `memberId` is blocked by the requested member.
     */
    blockDirection?: BlockDirection;
}
declare enum BlockDirection {
    UNKNOWN = "UNKNOWN",
    BLOCKING = "BLOCKING",
    BLOCKED = "BLOCKED"
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ListCurrentMemberBlockingOptions {
    /** Pagination parameters. */
    cursorPaging?: CursorPaging;
}
interface ListMemberBlocksOptions {
    /** Pagination parameters. */
    cursorPaging?: CursorPaging;
}

export { type AdminBlockingForbiddenError as A, BlockDirection as B, type CursorPaging as C, type DomainEvent as D, type EntityCreatedEvent as E, type IdentificationData as I, type ListCurrentMemberBlockingOptions as L, type MemberToMemberBlock as M, type PagingMetadataV2 as P, type RestoreInfo as R, type SelfBlockingForbiddenError as S, type UnblockMemberRequest as U, WebhookIdentityType as W, type ListCurrentMemberBlockingResponse as a, type ListMemberBlocksOptions as b, type ListMemberBlocksResponse as c, type BlockMemberRequest as d, type BlockMemberResponse as e, type MemberBlockedByMember as f, type MemberAlreadyBlockedError as g, type UnblockMemberResponse as h, type MemberUnblockedByMember as i, type SelfUnblockingForbiddenError as j, type BlockDoesNotExistError as k, type ListCurrentMemberBlockingRequest as l, type Cursors as m, type ListMemberBlocksRequest as n, type MemberBlock as o, type DomainEventBodyOneOf as p, type EntityUpdatedEvent as q, type EntityDeletedEvent as r, type ActionEvent as s, type Empty as t, type MessageEnvelope as u, type IdentificationDataIdOneOf as v };
