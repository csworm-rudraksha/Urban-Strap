import { d as BlockMemberRequest$1, e as BlockMemberResponse$1, U as UnblockMemberRequest$1, h as UnblockMemberResponse$1, l as ListCurrentMemberBlockingRequest$1, a as ListCurrentMemberBlockingResponse$1, n as ListMemberBlocksRequest$1, c as ListMemberBlocksResponse$1 } from './members-v1-member-to-member-block-member-to-member-block.universal-TYGd7g-o.js';

interface BlockMemberRequest {
    /**
     * ID of a member to block.
     * @format GUID
     */
    memberId: string;
}
interface BlockMemberResponse {
}
interface UnblockMemberRequest {
    /**
     * ID of a member to unblock.
     * @format GUID
     */
    memberId: string;
}
interface UnblockMemberResponse {
}
interface ListCurrentMemberBlockingRequest {
    /** Pagination parameters. */
    cursorPaging?: CursorPaging;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface ListCurrentMemberBlockingResponse {
    /**
     * IDs of members blocked by the current member.
     * @format GUID
     */
    blockedMemberIds?: string[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface ListMemberBlocksRequest {
    /**
     * ID of a member whose blocks are requested.
     * @format GUID
     */
    memberId: string;
    /** Pagination parameters. */
    cursorPaging?: CursorPaging;
}
interface ListMemberBlocksResponse {
    /** List of members who are either blocking or blocked by the specified member. */
    memberBlocks?: MemberBlock[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface MemberBlock {
    /**
     * Member ID.
     * @format GUID
     */
    memberId?: string;
    /**
     * Indicates whether the member with `memberId` is blocking or blocked by the specified member.
     *
     * - `BLOCKING`: The member with `memberId` is blocking the requested member.
     * - `BLOCKED`: The member with `memberId` is blocked by the requested member.
     */
    blockDirection?: BlockDirection;
}
declare enum BlockDirection {
    UNKNOWN = "UNKNOWN",
    BLOCKING = "BLOCKING",
    BLOCKED = "BLOCKED"
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function blockMember(): __PublicMethodMetaInfo<'POST', {}, BlockMemberRequest$1, BlockMemberRequest, BlockMemberResponse$1, BlockMemberResponse>;
declare function unblockMember(): __PublicMethodMetaInfo<'DELETE', {
    memberId: string;
}, UnblockMemberRequest$1, UnblockMemberRequest, UnblockMemberResponse$1, UnblockMemberResponse>;
declare function listCurrentMemberBlocking(): __PublicMethodMetaInfo<'GET', {}, ListCurrentMemberBlockingRequest$1, ListCurrentMemberBlockingRequest, ListCurrentMemberBlockingResponse$1, ListCurrentMemberBlockingResponse>;
declare function listMemberBlocks(): __PublicMethodMetaInfo<'GET', {
    memberId: string;
}, ListMemberBlocksRequest$1, ListMemberBlocksRequest, ListMemberBlocksResponse$1, ListMemberBlocksResponse>;

export { type __PublicMethodMetaInfo, blockMember, listCurrentMemberBlocking, listMemberBlocks, unblockMember };
