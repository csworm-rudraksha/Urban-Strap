import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { L as ListCurrentMemberBlockingOptions, a as ListCurrentMemberBlockingResponse, b as ListMemberBlocksOptions, c as ListMemberBlocksResponse } from './members-v1-member-to-member-block-member-to-member-block.universal-TYGd7g-o.mjs';
export { s as ActionEvent, A as AdminBlockingForbiddenError, B as BlockDirection, k as BlockDoesNotExistError, d as BlockMemberRequest, e as BlockMemberResponse, C as CursorPaging, m as Cursors, D as DomainEvent, p as DomainEventBodyOneOf, t as Empty, E as EntityCreatedEvent, r as EntityDeletedEvent, q as EntityUpdatedEvent, I as IdentificationData, v as IdentificationDataIdOneOf, l as ListCurrentMemberBlockingRequest, n as ListMemberBlocksRequest, g as MemberAlreadyBlockedError, o as MemberBlock, f as MemberBlockedByMember, M as MemberToMemberBlock, i as MemberUnblockedByMember, u as MessageEnvelope, P as PagingMetadataV2, R as RestoreInfo, S as SelfBlockingForbiddenError, j as SelfUnblockingForbiddenError, U as UnblockMemberRequest, h as UnblockMemberResponse, W as WebhookIdentityType } from './members-v1-member-to-member-block-member-to-member-block.universal-TYGd7g-o.mjs';

declare function blockMember$1(httpClient: HttpClient): BlockMemberSignature;
interface BlockMemberSignature {
    /**
     * Blocks the specified member from the current member.
     * @param - ID of a member to block.
     */
    (memberId: string): Promise<void>;
}
declare function unblockMember$1(httpClient: HttpClient): UnblockMemberSignature;
interface UnblockMemberSignature {
    /**
     * Unblocks the specified member from the current member.
     * @param - ID of a member to unblock.
     */
    (memberId: string): Promise<void>;
}
declare function listCurrentMemberBlocking$1(httpClient: HttpClient): ListCurrentMemberBlockingSignature;
interface ListCurrentMemberBlockingSignature {
    /**
     * Returns information about members blocked by the current member.
     */
    (options?: ListCurrentMemberBlockingOptions | undefined): Promise<ListCurrentMemberBlockingResponse>;
}
declare function listMemberBlocks$1(httpClient: HttpClient): ListMemberBlocksSignature;
interface ListMemberBlocksSignature {
    /**
     * Returns IDs of members that are blocking or blocked by the member whose ID was provided.
     * @param - ID of a member whose blocks are requested.
     */
    (memberId: string, options?: ListMemberBlocksOptions | undefined): Promise<ListMemberBlocksResponse>;
}

declare const blockMember: MaybeContext<BuildRESTFunction<typeof blockMember$1> & typeof blockMember$1>;
declare const unblockMember: MaybeContext<BuildRESTFunction<typeof unblockMember$1> & typeof unblockMember$1>;
declare const listCurrentMemberBlocking: MaybeContext<BuildRESTFunction<typeof listCurrentMemberBlocking$1> & typeof listCurrentMemberBlocking$1>;
declare const listMemberBlocks: MaybeContext<BuildRESTFunction<typeof listMemberBlocks$1> & typeof listMemberBlocks$1>;

export { ListCurrentMemberBlockingOptions, ListCurrentMemberBlockingResponse, ListMemberBlocksOptions, ListMemberBlocksResponse, blockMember, listCurrentMemberBlocking, listMemberBlocks, unblockMember };
