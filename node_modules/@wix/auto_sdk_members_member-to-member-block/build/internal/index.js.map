{"version":3,"sources":["../../index.ts","../../src/members-v1-member-to-member-block-member-to-member-block.universal.ts","../../src/members-v1-member-to-member-block-member-to-member-block.http.ts","../../src/members-v1-member-to-member-block-member-to-member-block.public.ts","../../src/members-v1-member-to-member-block-member-to-member-block.context.ts"],"sourcesContent":["export * from './src/members-v1-member-to-member-block-member-to-member-block.context.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixMembersV1MemberToMemberBlock from './members-v1-member-to-member-block-member-to-member-block.http.js';\n\n/** Member-to-member block. */\nexport interface MemberToMemberBlock {\n  /**\n   * ID of the member that is the creator of this block.\n   * @format GUID\n   */\n  blockingMemberId?: string;\n  /**\n   * ID of the member that is blocked by this block.\n   * @format GUID\n   */\n  blockedMemberId?: string;\n}\n\nexport interface BlockMemberRequest {\n  /**\n   * ID of a member to block.\n   * @format GUID\n   */\n  memberId: string;\n}\n\nexport interface BlockMemberResponse {}\n\nexport interface MemberBlockedByMember {\n  /** The block that has been created. */\n  block?: MemberToMemberBlock;\n}\n\nexport interface MemberAlreadyBlockedError {\n  /** @format GUID */\n  initiatorMemberId?: string;\n  /** @format GUID */\n  targetMemberId?: string;\n}\n\nexport interface SelfBlockingForbiddenError {\n  /** @format GUID */\n  initiatorMemberId?: string;\n}\n\nexport interface AdminBlockingForbiddenError {\n  /** @format GUID */\n  initiatorMemberId?: string;\n  /** @format GUID */\n  targetMemberId?: string;\n  /** @format GUID */\n  adminMemberId?: string;\n}\n\nexport interface UnblockMemberRequest {\n  /**\n   * ID of a member to unblock.\n   * @format GUID\n   */\n  memberId: string;\n}\n\nexport interface UnblockMemberResponse {}\n\nexport interface MemberUnblockedByMember {\n  /** The block that has been removed. */\n  block?: MemberToMemberBlock;\n}\n\nexport interface SelfUnblockingForbiddenError {\n  /** @format GUID */\n  initiatorMemberId?: string;\n}\n\nexport interface BlockDoesNotExistError {\n  /** @format GUID */\n  blockingMemberId?: string;\n  /** @format GUID */\n  blockedMemberId?: string;\n}\n\nexport interface ListCurrentMemberBlockingRequest {\n  /** Pagination parameters. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface CursorPaging {\n  /**\n   * Maximum number of items to return in the results.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 16000\n   */\n  cursor?: string | null;\n}\n\nexport interface ListCurrentMemberBlockingResponse {\n  /**\n   * IDs of members blocked by the current member.\n   * @format GUID\n   */\n  blockedMemberIds?: string[];\n  /** Metadata for the paginated results. */\n  pagingMetadata?: PagingMetadataV2;\n}\n\nexport interface PagingMetadataV2 {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Offset that was requested. */\n  offset?: number | null;\n  /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */\n  total?: number | null;\n  /** Flag that indicates the server failed to calculate the `total` field. */\n  tooManyToCount?: boolean | null;\n  /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */\n  cursors?: Cursors;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor string pointing to the next page in the list of results.\n   * @maxLength 16000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to the previous page in the list of results.\n   * @maxLength 16000\n   */\n  prev?: string | null;\n}\n\nexport interface ListMemberBlocksRequest {\n  /**\n   * ID of a member whose blocks are requested.\n   * @format GUID\n   */\n  memberId: string;\n  /** Pagination parameters. */\n  cursorPaging?: CursorPaging;\n}\n\nexport interface ListMemberBlocksResponse {\n  /** List of members who are either blocking or blocked by the specified member. */\n  memberBlocks?: MemberBlock[];\n  /** Metadata for the paginated results. */\n  pagingMetadata?: PagingMetadataV2;\n}\n\nexport interface MemberBlock {\n  /**\n   * Member ID.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * Indicates whether the member with `memberId` is blocking or blocked by the specified member.\n   *\n   * - `BLOCKING`: The member with `memberId` is blocking the requested member.\n   * - `BLOCKED`: The member with `memberId` is blocked by the requested member.\n   */\n  blockDirection?: BlockDirection;\n}\n\nexport enum BlockDirection {\n  UNKNOWN = 'UNKNOWN',\n  BLOCKING = 'BLOCKING',\n  BLOCKED = 'BLOCKED',\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /**\n   * Unique event ID.\n   * Allows clients to ignore duplicate webhooks.\n   */\n  _id?: string;\n  /**\n   * Assumes actions are also always typed to an entity_type\n   * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction\n   */\n  entityFqdn?: string;\n  /**\n   * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\n   * This is although the created/updated/deleted notion is duplication of the oneof types\n   * Example: created/updated/deleted/started/completed/email_opened\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number defining the order of updates to the underlying entity.\n   * For example, given that some entity was updated at 16:00 and than again at 16:01,\n   * it is guaranteed that the sequence number of the second update is strictly higher than the first.\n   * As the consumer, you can use this value to ensure that you handle messages in the correct order.\n   * To do so, you will need to persist this number on your end, and compare the sequence number from the\n   * message against the one you have stored. Given that the stored number is higher, you should ignore the message.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface Empty {}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityType;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\n/**\n * Blocks the specified member from the current member.\n * @param memberId - ID of a member to block.\n * @public\n * @documentationMaturity preview\n * @requiredField memberId\n * @permissionId MEMBERS.MEMBER_TO_MEMBER_BLOCKS_WRITE\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.BlockMember\n */\nexport async function blockMember(memberId: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ memberId: memberId });\n\n  const reqOpts =\n    ambassadorWixMembersV1MemberToMemberBlock.blockMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { memberId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['memberId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Unblocks the specified member from the current member.\n * @param memberId - ID of a member to unblock.\n * @public\n * @documentationMaturity preview\n * @requiredField memberId\n * @permissionId MEMBERS.MEMBER_TO_MEMBER_BLOCKS_WRITE\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.UnblockMember\n */\nexport async function unblockMember(memberId: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ memberId: memberId });\n\n  const reqOpts =\n    ambassadorWixMembersV1MemberToMemberBlock.unblockMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { memberId: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['memberId']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Returns information about members blocked by the current member.\n * @public\n * @documentationMaturity preview\n * @permissionId MEMBERS.MEMBER_TO_MEMBER_BLOCKS_READ\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.ListCurrentMemberBlocking\n */\nexport async function listCurrentMemberBlocking(\n  options?: ListCurrentMemberBlockingOptions\n): Promise<\n  NonNullablePaths<ListCurrentMemberBlockingResponse, `blockedMemberIds`>\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    cursorPaging: options?.cursorPaging,\n  });\n\n  const reqOpts =\n    ambassadorWixMembersV1MemberToMemberBlock.listCurrentMemberBlocking(\n      payload\n    );\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { cursorPaging: '$[0].cursorPaging' },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ListCurrentMemberBlockingOptions {\n  /** Pagination parameters. */\n  cursorPaging?: CursorPaging;\n}\n\n/**\n * Returns IDs of members that are blocking or blocked by the member whose ID was provided.\n * @param memberId - ID of a member whose blocks are requested.\n * @public\n * @documentationMaturity preview\n * @requiredField memberId\n * @permissionId MEMBERS.MEMBER_TO_MEMBER_BLOCKS_READ_MEMBER_BLOCKS\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.ListMemberBlocks\n */\nexport async function listMemberBlocks(\n  memberId: string,\n  options?: ListMemberBlocksOptions\n): Promise<\n  NonNullablePaths<\n    ListMemberBlocksResponse,\n    | `memberBlocks`\n    | `memberBlocks.${number}.memberId`\n    | `memberBlocks.${number}.blockDirection`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    memberId: memberId,\n    cursorPaging: options?.cursorPaging,\n  });\n\n  const reqOpts =\n    ambassadorWixMembersV1MemberToMemberBlock.listMemberBlocks(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          memberId: '$[0]',\n          cursorPaging: '$[1].cursorPaging',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['memberId', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ListMemberBlocksOptions {\n  /** Pagination parameters. */\n  cursorPaging?: CursorPaging;\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'api._api_base_domain_': [\n      {\n        srcPath: '/members/v1/member-to-member-blocks',\n        destPath: '',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/members/v1/member-to-member-blocks',\n        destPath: '/v1/member-to-member-blocks',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/members/v1/member-to-member-blocks',\n        destPath: '/v1/member-to-member-blocks',\n      },\n    ],\n    'members.wixapps.net': [\n      {\n        srcPath: '/_api/members/v1/member-to-member-blocks',\n        destPath: '/v1/member-to-member-blocks',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_members_member-to-member-block';\n\n/** Blocks the specified member from the current member. */\nexport function blockMember(payload: object): RequestOptionsFactory<any> {\n  function __blockMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member_to_member_block',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.BlockMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(\n        {\n          protoPath: '/v1/member-to-member-blocks/members/my',\n          data: payload,\n          host,\n        }\n      ),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __blockMember;\n}\n\n/** Unblocks the specified member from the current member. */\nexport function unblockMember(payload: object): RequestOptionsFactory<any> {\n  function __unblockMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member_to_member_block',\n      method: 'DELETE' as any,\n      methodFqn:\n        'com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.UnblockMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(\n        {\n          protoPath: '/v1/member-to-member-blocks/members/my/{memberId}',\n          data: payload,\n          host,\n        }\n      ),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __unblockMember;\n}\n\n/** Returns information about members blocked by the current member. */\nexport function listCurrentMemberBlocking(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listCurrentMemberBlocking({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member_to_member_block',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.ListCurrentMemberBlocking',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(\n        {\n          protoPath: '/v1/member-to-member-blocks/members/my',\n          data: payload,\n          host,\n        }\n      ),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __listCurrentMemberBlocking;\n}\n\n/** Returns IDs of members that are blocking or blocked by the member whose ID was provided. */\nexport function listMemberBlocks(payload: object): RequestOptionsFactory<any> {\n  function __listMemberBlocks({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member_to_member_block',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.ListMemberBlocks',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(\n        {\n          protoPath: '/v1/member-to-member-blocks/members/{memberId}',\n          data: payload,\n          host,\n        }\n      ),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __listMemberBlocks;\n}\n","import { HttpClient } from '@wix/sdk-types';\nimport {\n  ListCurrentMemberBlockingOptions,\n  ListCurrentMemberBlockingResponse,\n  ListMemberBlocksOptions,\n  ListMemberBlocksResponse,\n  blockMember as universalBlockMember,\n  listCurrentMemberBlocking as universalListCurrentMemberBlocking,\n  listMemberBlocks as universalListMemberBlocks,\n  unblockMember as universalUnblockMember,\n} from './members-v1-member-to-member-block-member-to-member-block.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/members' };\n\nexport function blockMember(httpClient: HttpClient): BlockMemberSignature {\n  return (memberId: string) =>\n    universalBlockMember(\n      memberId,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BlockMemberSignature {\n  /**\n   * Blocks the specified member from the current member.\n   * @param - ID of a member to block.\n   */\n  (memberId: string): Promise<void>;\n}\n\nexport function unblockMember(httpClient: HttpClient): UnblockMemberSignature {\n  return (memberId: string) =>\n    universalUnblockMember(\n      memberId,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UnblockMemberSignature {\n  /**\n   * Unblocks the specified member from the current member.\n   * @param - ID of a member to unblock.\n   */\n  (memberId: string): Promise<void>;\n}\n\nexport function listCurrentMemberBlocking(\n  httpClient: HttpClient\n): ListCurrentMemberBlockingSignature {\n  return (options?: ListCurrentMemberBlockingOptions) =>\n    universalListCurrentMemberBlocking(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListCurrentMemberBlockingSignature {\n  /**\n   * Returns information about members blocked by the current member.\n   */\n  (\n    options?: ListCurrentMemberBlockingOptions | undefined\n  ): Promise<ListCurrentMemberBlockingResponse>;\n}\n\nexport function listMemberBlocks(\n  httpClient: HttpClient\n): ListMemberBlocksSignature {\n  return (memberId: string, options?: ListMemberBlocksOptions) =>\n    universalListMemberBlocks(\n      memberId,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListMemberBlocksSignature {\n  /**\n   * Returns IDs of members that are blocking or blocked by the member whose ID was provided.\n   * @param - ID of a member whose blocks are requested.\n   */\n  (\n    memberId: string,\n    options?: ListMemberBlocksOptions | undefined\n  ): Promise<ListMemberBlocksResponse>;\n}\n\nexport {\n  ActionEvent,\n  AdminBlockingForbiddenError,\n  BlockDirection,\n  BlockDoesNotExistError,\n  BlockMemberRequest,\n  BlockMemberResponse,\n  CursorPaging,\n  Cursors,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  Empty,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  ListCurrentMemberBlockingOptions,\n  ListCurrentMemberBlockingRequest,\n  ListCurrentMemberBlockingResponse,\n  ListMemberBlocksOptions,\n  ListMemberBlocksRequest,\n  ListMemberBlocksResponse,\n  MemberAlreadyBlockedError,\n  MemberBlock,\n  MemberBlockedByMember,\n  MemberToMemberBlock,\n  MemberUnblockedByMember,\n  MessageEnvelope,\n  PagingMetadataV2,\n  RestoreInfo,\n  SelfBlockingForbiddenError,\n  SelfUnblockingForbiddenError,\n  UnblockMemberRequest,\n  UnblockMemberResponse,\n  WebhookIdentityType,\n} from './members-v1-member-to-member-block-member-to-member-block.universal.js';\n","import {\n  blockMember as publicBlockMember,\n  unblockMember as publicUnblockMember,\n  listCurrentMemberBlocking as publicListCurrentMemberBlocking,\n  listMemberBlocks as publicListMemberBlocks,\n} from './members-v1-member-to-member-block-member-to-member-block.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\n\nexport const blockMember: MaybeContext<\n  BuildRESTFunction<typeof publicBlockMember> & typeof publicBlockMember\n> = /*#__PURE__*/ createRESTModule(publicBlockMember);\nexport const unblockMember: MaybeContext<\n  BuildRESTFunction<typeof publicUnblockMember> & typeof publicUnblockMember\n> = /*#__PURE__*/ createRESTModule(publicUnblockMember);\nexport const listCurrentMemberBlocking: MaybeContext<\n  BuildRESTFunction<typeof publicListCurrentMemberBlocking> &\n    typeof publicListCurrentMemberBlocking\n> = /*#__PURE__*/ createRESTModule(publicListCurrentMemberBlocking);\nexport const listMemberBlocks: MaybeContext<\n  BuildRESTFunction<typeof publicListMemberBlocks> &\n    typeof publicListMemberBlocks\n> = /*#__PURE__*/ createRESTModule(publicListMemberBlocks);\n\nexport {\n  BlockDirection,\n  WebhookIdentityType,\n} from './members-v1-member-to-member-block-member-to-member-block.universal.js';\nexport {\n  MemberToMemberBlock,\n  BlockMemberRequest,\n  BlockMemberResponse,\n  MemberBlockedByMember,\n  MemberAlreadyBlockedError,\n  SelfBlockingForbiddenError,\n  AdminBlockingForbiddenError,\n  UnblockMemberRequest,\n  UnblockMemberResponse,\n  MemberUnblockedByMember,\n  SelfUnblockingForbiddenError,\n  BlockDoesNotExistError,\n  ListCurrentMemberBlockingRequest,\n  CursorPaging,\n  ListCurrentMemberBlockingResponse,\n  PagingMetadataV2,\n  Cursors,\n  ListMemberBlocksRequest,\n  ListMemberBlocksResponse,\n  MemberBlock,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  Empty,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  ListCurrentMemberBlockingOptions,\n  ListMemberBlocksOptions,\n} from './members-v1-member-to-member-block-member-to-member-block.universal.js';\n"],"mappings":"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","names":["blockMember","listCurrentMemberBlocking","listMemberBlocks","unblockMember","import_rest_modules","BlockDirection","WebhookIdentityType","blockMember","sdkTransformError","unblockMember","listCurrentMemberBlocking","listMemberBlocks","blockMember","unblockMember","listCurrentMemberBlocking","listMemberBlocks","import_rest_modules","blockMember","unblockMember","listCurrentMemberBlocking","listMemberBlocks"]}