// src/members-v1-member-to-member-block-member-to-member-block.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/members-v1-member-to-member-block-member-to-member-block.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/members/v1/member-to-member-blocks",
        destPath: ""
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/members/v1/member-to-member-blocks",
        destPath: "/v1/member-to-member-blocks"
      }
    ],
    _: [
      {
        srcPath: "/_api/members/v1/member-to-member-blocks",
        destPath: "/v1/member-to-member-blocks"
      }
    ],
    "members.wixapps.net": [
      {
        srcPath: "/_api/members/v1/member-to-member-blocks",
        destPath: "/v1/member-to-member-blocks"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_members_member-to-member-block";
function blockMember(payload) {
  function __blockMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_to_member_block",
      method: "POST",
      methodFqn: "com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.BlockMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(
        {
          protoPath: "/v1/member-to-member-blocks/members/my",
          data: payload,
          host
        }
      ),
      data: payload
    };
    return metadata;
  }
  return __blockMember;
}
function unblockMember(payload) {
  function __unblockMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_to_member_block",
      method: "DELETE",
      methodFqn: "com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.UnblockMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(
        {
          protoPath: "/v1/member-to-member-blocks/members/my/{memberId}",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __unblockMember;
}
function listCurrentMemberBlocking(payload) {
  function __listCurrentMemberBlocking({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_to_member_block",
      method: "GET",
      methodFqn: "com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.ListCurrentMemberBlocking",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(
        {
          protoPath: "/v1/member-to-member-blocks/members/my",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __listCurrentMemberBlocking;
}
function listMemberBlocks(payload) {
  function __listMemberBlocks({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_to_member_block",
      method: "GET",
      methodFqn: "com.wixpress.members.membertomemberblocks.MemberToMemberBlocks.ListMemberBlocks",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMembertomemberblocksMemberToMemberBlocksUrl(
        {
          protoPath: "/v1/member-to-member-blocks/members/{memberId}",
          data: payload,
          host
        }
      ),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __listMemberBlocks;
}

// src/members-v1-member-to-member-block-member-to-member-block.universal.ts
var BlockDirection = /* @__PURE__ */ ((BlockDirection2) => {
  BlockDirection2["UNKNOWN"] = "UNKNOWN";
  BlockDirection2["BLOCKING"] = "BLOCKING";
  BlockDirection2["BLOCKED"] = "BLOCKED";
  return BlockDirection2;
})(BlockDirection || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function blockMember2(memberId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ memberId });
  const reqOpts = blockMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["memberId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function unblockMember2(memberId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ memberId });
  const reqOpts = unblockMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["memberId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listCurrentMemberBlocking2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cursorPaging: options?.cursorPaging
  });
  const reqOpts = listCurrentMemberBlocking(
    payload
  );
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cursorPaging: "$[0].cursorPaging" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listMemberBlocks2(memberId, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    memberId,
    cursorPaging: options?.cursorPaging
  });
  const reqOpts = listMemberBlocks(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          memberId: "$[0]",
          cursorPaging: "$[1].cursorPaging"
        },
        singleArgumentUnchanged: false
      },
      ["memberId", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/members-v1-member-to-member-block-member-to-member-block.public.ts
function blockMember3(httpClient) {
  return (memberId) => blockMember2(
    memberId,
    // @ts-ignore
    { httpClient }
  );
}
function unblockMember3(httpClient) {
  return (memberId) => unblockMember2(
    memberId,
    // @ts-ignore
    { httpClient }
  );
}
function listCurrentMemberBlocking3(httpClient) {
  return (options) => listCurrentMemberBlocking2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function listMemberBlocks3(httpClient) {
  return (memberId, options) => listMemberBlocks2(
    memberId,
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/members-v1-member-to-member-block-member-to-member-block.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var blockMember4 = /* @__PURE__ */ createRESTModule(blockMember3);
var unblockMember4 = /* @__PURE__ */ createRESTModule(unblockMember3);
var listCurrentMemberBlocking4 = /* @__PURE__ */ createRESTModule(listCurrentMemberBlocking3);
var listMemberBlocks4 = /* @__PURE__ */ createRESTModule(listMemberBlocks3);
export {
  BlockDirection,
  WebhookIdentityType,
  blockMember4 as blockMember,
  listCurrentMemberBlocking4 as listCurrentMemberBlocking,
  listMemberBlocks4 as listMemberBlocks,
  unblockMember4 as unblockMember
};
//# sourceMappingURL=index.mjs.map