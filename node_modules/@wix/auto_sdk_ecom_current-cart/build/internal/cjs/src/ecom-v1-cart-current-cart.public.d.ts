import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AddToCartResponse, AddToCurrentCartOptions, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartUpdatedEnvelope, CreateCheckoutFromCurrentCartOptions, CreateCheckoutResponse, EstimateCurrentCartTotalsOptions, EstimateTotalsResponse, LineItemQuantityUpdate, RemoveCouponResponse, RemoveLineItemsResponse, UpdateCurrentCartOptions, UpdateLineItemsQuantityResponse } from './ecom-v1-cart-current-cart.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function getCurrentCart(httpClient: HttpClient): GetCurrentCartSignature;
interface GetCurrentCartSignature {
    /**
     * Retrieves the current site visitor's cart.
     *
     * >**Note:**
     * >This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     * @returns Current session's active cart.
     */
    (): Promise<Cart>;
}
export declare function updateCurrentCart(httpClient: HttpClient): UpdateCurrentCartSignature;
interface UpdateCurrentCartSignature {
    /**
     * Updates the current site visitor's cart.
     *
     * >**Notes:**
     * >+ When adding catalog line items, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
     * >+ This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     * @param - Current cart update options.
     * @returns Updated Cart.
     */
    (options?: UpdateCurrentCartOptions | undefined): Promise<Cart>;
}
export declare function addToCurrentCart(httpClient: HttpClient): AddToCurrentCartSignature;
interface AddToCurrentCartSignature {
    /**
     * Adds catalog line items to the current site visitor's cart.
     *
     * >**Notes:**
     * >+ When adding catalog line items, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
     * >+ This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     * @param - Items to be added to the current cart.
     */
    (options?: AddToCurrentCartOptions | undefined): Promise<AddToCartResponse>;
}
export declare function removeLineItemsFromCurrentCart(httpClient: HttpClient): RemoveLineItemsFromCurrentCartSignature;
interface RemoveLineItemsFromCurrentCartSignature {
    /**
     * Removes line items from the current site visitor's cart.
     *
     * >**Note:**
     * >This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     * @param - IDs of the line items to remove from the cart.
     */
    (lineItemIds: string[]): Promise<RemoveLineItemsResponse>;
}
export declare function createCheckoutFromCurrentCart(httpClient: HttpClient): CreateCheckoutFromCurrentCartSignature;
interface CreateCheckoutFromCurrentCartSignature {
    /**
     * Creates a checkout from the current site visitor's cart.
     *
     * If a checkout was already created from the current cart,
     * that checkout will be updated with any new information from the cart.
     *
     * >**Notes:**
     * >+ `channelType` is a required field.
     * >+ This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     * @param - Checkout creation options.
     */
    (options?: CreateCheckoutFromCurrentCartOptions | undefined): Promise<CreateCheckoutResponse>;
}
export declare function removeCouponFromCurrentCart(httpClient: HttpClient): RemoveCouponFromCurrentCartSignature;
interface RemoveCouponFromCurrentCartSignature {
    /**
     * Removes the coupon from the current site visitor's cart.
     *
     * >**Note:**
     * >This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     */
    (): Promise<RemoveCouponResponse>;
}
export declare function updateCurrentCartLineItemQuantity(httpClient: HttpClient): UpdateCurrentCartLineItemQuantitySignature;
interface UpdateCurrentCartLineItemQuantitySignature {
    /**
     * Updates the quantity of one or more line items in the current site visitor's cart.
     *
     * This method is only for updating the quantity of line items.
     * To entirely remove a line item from the current cart, use the Remove Line Items From Current Cart method.
     * To add a new line item to the current cart, use the Add To Current Cart method.
     *
     * This method checks the amount of stock remaining for this line item.
     * If the specified `quantity` is greater than the remaining stock,
     * then the `quantity` returned in the response is the total amount of remaining stock.
     *
     * >**Note:**
     * >This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     * @param - Line item IDs and their new quantity.
     */
    (lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse>;
}
export declare function estimateCurrentCartTotals(httpClient: HttpClient): EstimateCurrentCartTotalsSignature;
interface EstimateCurrentCartTotalsSignature {
    /**
     * Estimates the current cart's price totals (including tax),
     * based on a selected carrier service, shipping address, and billing information.
     *
     * >**Notes:**
     * >+ Not passing any properties will only estimate the cart items price totals, without considering shipping and billing information.
     * >+ This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     * @param - Total estimation options.
     */
    (options?: EstimateCurrentCartTotalsOptions | undefined): Promise<EstimateTotalsResponse>;
}
export declare function deleteCurrentCart(httpClient: HttpClient): DeleteCurrentCartSignature;
interface DeleteCurrentCartSignature {
    /**
     * Deletes the current site visitor's cart.
     *
     * >**Note:**
     * >This method requires [visitor or member authentication](https://dev.wix.com/docs/rest/articles/getting-started/access-types-and-permissions).
     */
    (): Promise<void>;
}
export declare const onCartDeleted: EventDefinition<CartDeletedEnvelope, "wix.ecom.v1.cart_deleted">;
export declare const onCartUpdated: EventDefinition<CartUpdatedEnvelope, "wix.ecom.v1.cart_updated">;
export declare const onCartCreated: EventDefinition<CartCreatedEnvelope, "wix.ecom.v1.cart_created">;
export { ActionEvent, AddToCartRequest, AddToCartResponse, AddToCurrentCartAndEstimateTotalsRequest, AddToCurrentCartOptions, AddToCurrentCartRequest, AdditionalFee, AdditionalFeeSource, Address, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApplicableLineItems, ApplicationError, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AppliedDiscountDiscountType, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BuyerInfo, BuyerInfoIdOneOf, CalculatedLineItem, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartDiscount, CartDiscountDiscountSourceOneOf, CartUpdatedEnvelope, CatalogOverrideFields, CatalogReference, ChannelType, ChargeType, Color, Coupon, CreateCartRequest, CreateCartResponse, CreateCheckoutFromCurrentCartOptions, CreateCheckoutFromCurrentCartRequest, CreateCheckoutRequest, CreateCheckoutResponse, CustomLineItem, DeleteCartRequest, DeleteCartResponse, DeleteCurrentCartRequest, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, Details, DetailsKindOneOf, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EstimateCurrentCartTotalsOptions, EstimateCurrentCartTotalsRequest, EstimateTotalsRequest, EstimateTotalsResponse, EventMetadata, ExtendedFields, FallbackReason, FieldViolation, FileType, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, GetCartByCheckoutIdRequest, GetCartByCheckoutIdResponse, GetCartRequest, GetCartResponse, GetCurrentCartRequest, GetCurrentCartResponse, GiftCard, Group, HostSelectedMembership, IdentificationData, IdentificationDataIdOneOf, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemModifier, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, JurisdictionType, LineItem, LineItemDiscount, LineItemPricesData, LineItemQuantityUpdate, ManualCalculationReason, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MerchantDiscountInput, MessageEnvelope, ModifierGroup, MultiCurrencyPrice, NameInLineItem, NameInOther, Other, OtherCharge, PaymentOption, PaymentOptionType, PhysicalProperties, PickupDetails, PickupMethod, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductName, RateType, Region, RemoveBusinessLocationRequest, RemoveBusinessLocationResponse, RemoveCouponFromCurrentCartRequest, RemoveCouponRequest, RemoveCouponResponse, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsRequest, RemoveLineItemsResponse, RestoreInfo, RuleType, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, SelectedShippingOption, ServiceProperties, Severity, ShippingInformation, ShippingOption, ShippingPrice, ShippingRegion, StreetAddress, SubscriptionFrequency, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, Title, TranslatableString, UpdateCartRequest, UpdateCartResponse, UpdateCurrentCartLineItemQuantityRequest, UpdateCurrentCartOptions, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityResponse, V1Coupon, V1DiscountRule, V1DiscountRuleName, V1MerchantDiscount, ValidationError, VatId, VatType, Violation, WebhookIdentityType, WeightUnit, } from './ecom-v1-cart-current-cart.universal.js';
