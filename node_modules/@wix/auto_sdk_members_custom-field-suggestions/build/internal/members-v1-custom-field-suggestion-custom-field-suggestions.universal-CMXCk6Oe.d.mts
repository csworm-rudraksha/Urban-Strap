interface CustomFieldSuggestion {
    /**
     * Custom field name.
     * @maxLength 150
     */
    name?: string | null;
    /** Privacy level of the custom field. */
    defaultPrivacy?: Privacy;
    /** Type of information to provide for members. */
    fieldType?: Type;
    /** Social network type. */
    socialType?: SocialTypeType;
    /** Field origin. */
    fieldOrigin?: Origin;
    /**
     * Custom field ID.
     * @format GUID
     */
    customFieldId?: string | null;
}
declare enum Privacy {
    /** Unknown privacy. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The information appears on the members' public profile pages. */
    PUBLIC = "PUBLIC",
    /** Only the member can see this information. */
    PRIVATE = "PRIVATE"
}
declare enum Type {
    /** Unknown field type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** A text box to write text. */
    TEXT = "TEXT",
    /** Only a number can be entered into the field. */
    NUMBER = "NUMBER",
    /** Only a date can be entered into the field. */
    DATE = "DATE",
    /** Only a URL can be entered into the field. */
    URL = "URL",
    /** Only a link from the selected social media platform can be entered into the field. */
    SOCIAL = "SOCIAL"
}
declare enum SocialTypeType {
    /** Unknown social type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Facebook social media platform. */
    FACEBOOK = "FACEBOOK",
    /** Instagram social media platform. */
    INSTAGRAM = "INSTAGRAM",
    /** LinkedIn social media platform. */
    LINKEDIN = "LINKEDIN",
    /** X (formerly Twitter) social media platform. */
    TWITTER = "TWITTER",
    /** Youtube social media platform. */
    YOUTUBE = "YOUTUBE",
    /** Pinterest social media platform. */
    PINTEREST = "PINTEREST",
    /** TikTok social media platform. */
    TIKTOK = "TIKTOK",
    /** DeviantArt social media platform. */
    DEVIANTART = "DEVIANTART",
    /** SoundCloud social media platform. */
    SOUNDCLOUD = "SOUNDCLOUD",
    /** Tumblr social media platform. */
    TUMBLR = "TUMBLR",
    /** Vimeo social media platform. */
    VIMEO = "VIMEO",
    /** VKontakte social media platform. */
    VKONTAKTE = "VKONTAKTE",
    /** Odnoklassniki social media platform. */
    ODNOKLASSNIKI = "ODNOKLASSNIKI",
    /** Other social media platform. */
    OTHER = "OTHER"
}
declare enum Origin {
    /** Unknown field origin. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Custom field created by a Wix user. */
    CUSTOM = "CUSTOM",
    /** Contact type of field. These are default fields that are already provided by Members Area, such as: "birth date", "position", "company". */
    CONTACT = "CONTACT",
    /** System fields, such as: "first name", "last name", "email", "phone", "address", and  "title". Some system fields are only available from the dashboard. */
    SYSTEM = "SYSTEM"
}
interface ListCustomFieldSuggestionsRequest {
    paging?: Paging;
    sorting?: Sorting[];
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface ListCustomFieldSuggestionsResponse {
    /** Custom field suggestions. */
    suggestions?: CustomFieldSuggestion[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface QueryCustomFieldSuggestionsRequest {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    query?: Query;
}
interface Query {
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: any;
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    paging?: Paging;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sorting?: Sorting[];
}
interface QueryCustomFieldSuggestionsResponse {
    /** Custom field suggestion. */
    suggestions?: CustomFieldSuggestion[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface ListCustomFieldSuggestionsOptions {
    paging?: Paging;
    sorting?: Sorting[];
}
interface QueryOffsetResult {
    currentPage: number | undefined;
    totalPages: number | undefined;
    totalCount: number | undefined;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface SuggestionsQueryResult extends QueryOffsetResult {
    items: CustomFieldSuggestion[];
    query: SuggestionsQueryBuilder;
    next: () => Promise<SuggestionsQueryResult>;
    prev: () => Promise<SuggestionsQueryResult>;
}
interface SuggestionsQueryBuilder {
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => SuggestionsQueryBuilder;
    /** @param skip - Number of items to skip in the query results before returning the results.
     * @documentationMaturity preview
     */
    skip: (skip: number) => SuggestionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<SuggestionsQueryResult>;
}

export { type CustomFieldSuggestion as C, type ListCustomFieldSuggestionsOptions as L, Origin as O, Privacy as P, type QueryCustomFieldSuggestionsRequest as Q, type SuggestionsQueryBuilder as S, Type as T, type ListCustomFieldSuggestionsResponse as a, SocialTypeType as b, SortOrder as c, type ListCustomFieldSuggestionsRequest as d, type Paging as e, type Sorting as f, type PagingMetadata as g, type Query as h, type QueryCustomFieldSuggestionsResponse as i, type SuggestionsQueryResult as j };
