"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryTaxRegions = exports.deleteTaxRegion = exports.updateTaxRegion = exports.getTaxRegion = exports.createTaxRegion = exports.WebhookIdentityType = exports.SortOrder = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBillingV1TaxRegion = __importStar(require("./billing-v1-tax-region-tax-regions.http.js"));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a tax region.
 *
 * Tax regions require a tax calculator `appId`. Call List Tax Calculators to retrieve a list of available calculators for a site.
 *
 * Wix uses tax regions to calculate tax.
 * <!-- Subdivisions are supported for the following countries: `AU`, `BR`, `CA`, `FR`, `DE`, `IN`, `IT`, `MX`, `NL`, `ES`, `AE`, `GB`, `US` -->
 * @param taxRegion - Tax region to create.
 * @public
 * @documentationMaturity preview
 * @requiredField taxRegion
 * @requiredField taxRegion.appId
 * @requiredField taxRegion.country
 * @requiredField taxRegion.taxIncludedInPrice
 * @permissionId BILLING.TAX_REGION_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Created tax region.
 * @fqn wix.billing.v1.TaxRegionsService.CreateTaxRegion
 */
async function createTaxRegion(taxRegion) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        taxRegion: taxRegion,
    });
    const reqOpts = ambassadorWixBillingV1TaxRegion.createTaxRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxRegion;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taxRegion: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taxRegion']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createTaxRegion = createTaxRegion;
/**
 * Retrieves a tax region.
 * @param taxRegionId - ID of the tax region to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField taxRegionId
 * @permissionId BILLING.TAX_REGION_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved tax region.
 * @fqn wix.billing.v1.TaxRegionsService.GetTaxRegion
 */
async function getTaxRegion(taxRegionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        taxRegionId: taxRegionId,
    });
    const reqOpts = ambassadorWixBillingV1TaxRegion.getTaxRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxRegion;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taxRegionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taxRegionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getTaxRegion = getTaxRegion;
/**
 * Updates a tax region.
 *
 * Each time the tax region is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the tax region.
 * This ensures you're working with the latest tax region and prevents
 * unintended overwrites.
 * @param _id - Tax region ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField taxRegion
 * @requiredField taxRegion.revision
 * @param taxRegion - Tax region info.
 * @permissionId BILLING.TAX_REGION_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Updated tax region.
 * @fqn wix.billing.v1.TaxRegionsService.UpdateTaxRegion
 */
async function updateTaxRegion(_id, taxRegion) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        taxRegion: { ...taxRegion, id: _id },
    });
    const reqOpts = ambassadorWixBillingV1TaxRegion.updateTaxRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.taxRegion;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { taxRegion: '$[1]' },
            explicitPathsToArguments: { 'taxRegion.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'taxRegion']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateTaxRegion = updateTaxRegion;
/**
 * Deletes a tax region.
 *
 * When a tax region is deleted, tax is not calculated and zero tax will be returned for addresses in this region.
 * @param taxRegionId - ID of the tax region to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField taxRegionId
 * @permissionId BILLING.TAX_REGION_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn wix.billing.v1.TaxRegionsService.DeleteTaxRegion
 */
async function deleteTaxRegion(taxRegionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        taxRegionId: taxRegionId,
    });
    const reqOpts = ambassadorWixBillingV1TaxRegion.deleteTaxRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taxRegionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taxRegionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteTaxRegion = deleteTaxRegion;
/**
 * Creates a query to retrieve a list of tax regions.
 *
 * The `queryTaxRegions()` function builds a query to retrieve a list of tax regions and returns a `TaxRegionsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `TaxRegionsQueryBuilder` functions onto the query. `TaxRegionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxRegions()` returns.
 *
 * `queryTaxRegions()` runs with the following `TaxRegionsQueryBuilder` default that you can override:
 * + `ascending("_id")`
 *
 * The functions that are chained to `queryTaxRegions()` are applied in the order they are called. For example, if you apply `ascending("country")` and then `ascending("subdivision")`, the results are sorted first by the `"country"`, and then, if there are multiple results with the same `"country"`, the items are sorted by `"subdivision"`.
 *
 * The following `TaxRegionsQueryBuilder` functions are supported for the `queryTaxRegions()` function. For a full description of the tax region object, see the object returned for the `items` property in `TaxRegionsQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId BILLING.TAX_REGION_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxRegionsService.QueryTaxRegions
 */
function queryTaxRegions() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixBillingV1TaxRegion.queryTaxRegions(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.taxRegions,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryTaxRegions = queryTaxRegions;
//# sourceMappingURL=billing-v1-tax-region-tax-regions.universal.js.map