import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { TaxRegion, TaxRegionCreatedEnvelope, TaxRegionDeletedEnvelope, TaxRegionUpdatedEnvelope, TaxRegionsQueryBuilder, UpdateTaxRegion } from './billing-v1-tax-region-tax-regions.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createTaxRegion(httpClient: HttpClient): CreateTaxRegionSignature;
interface CreateTaxRegionSignature {
    /**
     * Creates a tax region.
     *
     * Tax regions require a tax calculator `appId`. Call List Tax Calculators to retrieve a list of available calculators for a site.
     *
     * Wix uses tax regions to calculate tax.
     * <!-- Subdivisions are supported for the following countries: `AU`, `BR`, `CA`, `FR`, `DE`, `IN`, `IT`, `MX`, `NL`, `ES`, `AE`, `GB`, `US` -->
     * @param - Tax region to create.
     * @returns Created tax region.
     */
    (taxRegion: TaxRegion): Promise<TaxRegion>;
}
export declare function getTaxRegion(httpClient: HttpClient): GetTaxRegionSignature;
interface GetTaxRegionSignature {
    /**
     * Retrieves a tax region.
     * @param - ID of the tax region to retrieve.
     * @returns Retrieved tax region.
     */
    (taxRegionId: string): Promise<TaxRegion>;
}
export declare function updateTaxRegion(httpClient: HttpClient): UpdateTaxRegionSignature;
interface UpdateTaxRegionSignature {
    /**
     * Updates a tax region.
     *
     * Each time the tax region is updated, `revision` increments by 1.
     * The current `revision` must be passed when updating the tax region.
     * This ensures you're working with the latest tax region and prevents
     * unintended overwrites.
     * @param - Tax region ID.
     * @param - Tax region info.
     * @returns Updated tax region.
     */
    (_id: string, taxRegion: UpdateTaxRegion): Promise<TaxRegion>;
}
export declare function deleteTaxRegion(httpClient: HttpClient): DeleteTaxRegionSignature;
interface DeleteTaxRegionSignature {
    /**
     * Deletes a tax region.
     *
     * When a tax region is deleted, tax is not calculated and zero tax will be returned for addresses in this region.
     * @param - ID of the tax region to delete.
     */
    (taxRegionId: string): Promise<void>;
}
export declare function queryTaxRegions(httpClient: HttpClient): QueryTaxRegionsSignature;
interface QueryTaxRegionsSignature {
    /**
     * Creates a query to retrieve a list of tax regions.
     *
     * The `queryTaxRegions()` function builds a query to retrieve a list of tax regions and returns a `TaxRegionsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `TaxRegionsQueryBuilder` functions onto the query. `TaxRegionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxRegions()` returns.
     *
     * `queryTaxRegions()` runs with the following `TaxRegionsQueryBuilder` default that you can override:
     * + `ascending("_id")`
     *
     * The functions that are chained to `queryTaxRegions()` are applied in the order they are called. For example, if you apply `ascending("country")` and then `ascending("subdivision")`, the results are sorted first by the `"country"`, and then, if there are multiple results with the same `"country"`, the items are sorted by `"subdivision"`.
     *
     * The following `TaxRegionsQueryBuilder` functions are supported for the `queryTaxRegions()` function. For a full description of the tax region object, see the object returned for the `items` property in `TaxRegionsQueryResult`.
     */
    (): TaxRegionsQueryBuilder;
}
export declare const onTaxRegionCreated: EventDefinition<TaxRegionCreatedEnvelope, "wix.billing.v1.tax_region_created">;
export declare const onTaxRegionDeleted: EventDefinition<TaxRegionDeletedEnvelope, "wix.billing.v1.tax_region_deleted">;
export declare const onTaxRegionUpdated: EventDefinition<TaxRegionUpdatedEnvelope, "wix.billing.v1.tax_region_updated">;
export { ActionEvent, ApplicationError, BaseEventMetadata, BulkActionMetadata, BulkCreateTaxRegionRequest, BulkCreateTaxRegionResponse, BulkCreateTaxRegionResult, BulkRestoreTaxRegionsRequest, BulkRestoreTaxRegionsResponse, BulkRestoreTaxRegionsResult, ConflictErrorDetails, CreateOrGetTaxRegionWithoutValidationRequest, CreateOrGetTaxRegionWithoutValidationResponse, CreateTaxRegionRequest, CreateTaxRegionResponse, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, DeleteTaxRegionRequest, DeleteTaxRegionResponse, DeleteTaxRegionWithoutDomainEventsRequest, DeleteTaxRegionWithoutDomainEventsResponse, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, GetTaxRegionRequest, GetTaxRegionResponse, IdentificationData, IdentificationDataIdOneOf, ItemMetadata, MessageEnvelope, QueryTaxRegionsRequest, QueryTaxRegionsResponse, RestoreInfo, SortOrder, Sorting, TaxRegion, TaxRegionCreatedEnvelope, TaxRegionDeletedEnvelope, TaxRegionUpdatedEnvelope, TaxRegionsQueryBuilder, TaxRegionsQueryResult, UpdateTaxRegion, UpdateTaxRegionRequest, UpdateTaxRegionResponse, WebhookIdentityType, } from './billing-v1-tax-region-tax-regions.universal.js';
