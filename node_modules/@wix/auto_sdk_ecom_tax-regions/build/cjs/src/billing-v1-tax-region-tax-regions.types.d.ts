/**
 * A tax region uses a location to define a specific tax treatment.
 * A location is defined by `country` and `subdivision`. The tax region also
 * dictates whether or not tax is included in the displayed price.
 */
export interface TaxRegion {
    /**
     * Tax region ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * 2-letter country code in [ISO-3166 alpha-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) format.
     * @format COUNTRY
     * @minLength 2
     */
    country?: string;
    /**
     * Subdivision (such as state, prefecture, or province) in [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
     * @maxLength 50
     */
    subdivision?: string;
    /**
     * The tax calculator ID to use to calculate tax for this region.
     *
     * Call List Tax Calculators to retrieve a list of available calculators for a site.
     * @format GUID
     */
    appId?: string;
    /** Whether tax is included in the price. */
    taxIncludedInPrice?: boolean;
    /**
     * Revision number, which increments by 1 each time the tax region is updated.
     * To prevent conflicting changes, the current revision must be passed when updating the tax region.
     *
     * Ignored when creating a tax region.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tax region was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the tax region was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
}
export interface CreateTaxRegionRequest {
    /** Tax region to create. */
    taxRegion: TaxRegion;
}
export interface CreateTaxRegionResponse {
    /** Created tax region. */
    taxRegion?: TaxRegion;
}
export interface ConflictErrorDetails {
    /**
     * Conflict details.
     * @maxLength 1000
     */
    reasonForConflict?: string;
}
export interface BulkCreateTaxRegionRequest {
    /**
     * Tax regions to create.
     * @minSize 1
     * @maxSize 100
     */
    taxRegions?: TaxRegion[];
    /**
     * Whether to return the full tax region objects in the response.
     *
     * Default: `true`
     */
    returnEntity?: boolean;
}
export interface BulkCreateTaxRegionResponse {
    /**
     * Tax regions created by bulk action.
     * @minSize 1
     * @maxSize 100
     */
    results?: BulkCreateTaxRegionResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkCreateTaxRegionResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /**
     * Tax region.
     *
     * This field is returned if the operation was successful and
     * `returnEntity` is set to `true`.
     */
    item?: TaxRegion;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface GetTaxRegionRequest {
    /**
     * ID of the tax region to retrieve.
     * @format GUID
     */
    taxRegionId: string;
}
export interface GetTaxRegionResponse {
    /** Retrieved tax region. */
    taxRegion?: TaxRegion;
}
export interface UpdateTaxRegionRequest {
    /** Tax region info to update. */
    taxRegion: TaxRegion;
}
export interface UpdateTaxRegionResponse {
    /** Updated tax region. */
    taxRegion?: TaxRegion;
}
export interface DeleteTaxRegionRequest {
    /**
     * ID of the tax region to delete.
     * @format GUID
     */
    taxRegionId: string;
}
export interface DeleteTaxRegionResponse {
}
export interface QueryTaxRegionsRequest {
    /** Query options. */
    query?: CursorQuery;
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /**
     * Cursor paging options.
     *
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
export interface QueryTaxRegionsResponse {
    /** Retrieved tax regions. */
    taxRegions?: TaxRegion[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface CreateOrGetTaxRegionWithoutValidationRequest {
    /** Tax region to create. */
    taxRegion?: TaxRegion;
}
export interface CreateOrGetTaxRegionWithoutValidationResponse {
    /** Created tax region. */
    taxRegion?: TaxRegion;
}
export interface DeleteTaxRegionWithoutDomainEventsRequest {
    /**
     * ID of the tax region to delete.
     * @format GUID
     */
    taxRegionId?: string;
}
export interface DeleteTaxRegionWithoutDomainEventsResponse {
}
export interface BulkRestoreTaxRegionsRequest {
    /**
     * Tax region IDs to restore.
     * @format GUID
     * @minSize 1
     * @maxSize 200
     */
    taxRegionIds?: string[];
}
export interface BulkRestoreTaxRegionsResponse {
    /**
     * Restored tax regions result
     * @minSize 1
     * @maxSize 200
     */
    results?: BulkRestoreTaxRegionsResult[];
}
export interface BulkRestoreTaxRegionsResult {
    itemMetadata?: ItemMetadata;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
