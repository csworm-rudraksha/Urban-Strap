"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryTaxRegions = exports.deleteTaxRegion = exports.updateTaxRegion = exports.getTaxRegion = exports.createTaxRegion = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const field_mask_1 = require("@wix/sdk-runtime/transformations/field-mask");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixBillingV1TaxRegionsServiceUrl(opts) {
    const domainToMappings = {
        'www.wixapis.com': [
            {
                srcPath: '/billing/v1/tax-regions',
                destPath: '/v1/tax-regions',
            },
            {
                srcPath: '/billing/v1/bulk/tax-regions',
                destPath: '/v1/bulk/tax-regions',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/billing/v1/tax-regions',
                destPath: '/v1/tax-regions',
            },
            {
                srcPath: '/billing/v1/bulk/tax-regions',
                destPath: '/v1/bulk/tax-regions',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_ecom_tax-regions';
/**
 * Creates a tax region.
 *
 * Tax regions require a tax calculator `appId`. Call List Tax Calculators to retrieve a list of available calculators for a site.
 *
 * Wix uses tax regions to calculate tax.
 * <!-- Subdivisions are supported for the following countries: `AU`, `BR`, `CA`, `FR`, `DE`, `IN`, `IT`, `MX`, `NL`, `ES`, `AE`, `GB`, `US` -->
 */
function createTaxRegion(payload) {
    function __createTaxRegion({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'taxRegion.createdDate' },
                    { path: 'taxRegion.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.billing.v1.tax_region',
            method: 'POST',
            methodFqn: 'wix.billing.v1.TaxRegionsService.CreateTaxRegion',
            packageName: PACKAGE_NAME,
            url: resolveWixBillingV1TaxRegionsServiceUrl({
                protoPath: '/v1/tax-regions',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'taxRegion.createdDate' },
                        { path: 'taxRegion.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createTaxRegion;
}
exports.createTaxRegion = createTaxRegion;
/** Retrieves a tax region. */
function getTaxRegion(payload) {
    function __getTaxRegion({ host }) {
        const metadata = {
            entityFqdn: 'wix.billing.v1.tax_region',
            method: 'GET',
            methodFqn: 'wix.billing.v1.TaxRegionsService.GetTaxRegion',
            packageName: PACKAGE_NAME,
            url: resolveWixBillingV1TaxRegionsServiceUrl({
                protoPath: '/v1/tax-regions/{taxRegionId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'taxRegion.createdDate' },
                        { path: 'taxRegion.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getTaxRegion;
}
exports.getTaxRegion = getTaxRegion;
/**
 * Updates a tax region.
 *
 * Each time the tax region is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the tax region.
 * This ensures you're working with the latest tax region and prevents
 * unintended overwrites.
 */
function updateTaxRegion(payload) {
    function __updateTaxRegion({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'fieldMask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'taxRegion.createdDate' },
                    { path: 'taxRegion.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.billing.v1.tax_region',
            method: 'PATCH',
            methodFqn: 'wix.billing.v1.TaxRegionsService.UpdateTaxRegion',
            packageName: PACKAGE_NAME,
            url: resolveWixBillingV1TaxRegionsServiceUrl({
                protoPath: '/v1/tax-regions/{taxRegion.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'taxRegion.createdDate' },
                        { path: 'taxRegion.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateTaxRegion;
}
exports.updateTaxRegion = updateTaxRegion;
/**
 * Deletes a tax region.
 *
 * When a tax region is deleted, tax is not calculated and zero tax will be returned for addresses in this region.
 */
function deleteTaxRegion(payload) {
    function __deleteTaxRegion({ host }) {
        const metadata = {
            entityFqdn: 'wix.billing.v1.tax_region',
            method: 'DELETE',
            methodFqn: 'wix.billing.v1.TaxRegionsService.DeleteTaxRegion',
            packageName: PACKAGE_NAME,
            url: resolveWixBillingV1TaxRegionsServiceUrl({
                protoPath: '/v1/tax-regions/{taxRegionId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteTaxRegion;
}
exports.deleteTaxRegion = deleteTaxRegion;
/**
 * Creates a query to retrieve a list of tax regions.
 *
 * The `queryTaxRegions()` function builds a query to retrieve a list of tax regions and returns a `TaxRegionsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `TaxRegionsQueryBuilder` functions onto the query. `TaxRegionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxRegions()` returns.
 *
 * `queryTaxRegions()` runs with the following `TaxRegionsQueryBuilder` default that you can override:
 * + `ascending("_id")`
 *
 * The functions that are chained to `queryTaxRegions()` are applied in the order they are called. For example, if you apply `ascending("country")` and then `ascending("subdivision")`, the results are sorted first by the `"country"`, and then, if there are multiple results with the same `"country"`, the items are sorted by `"subdivision"`.
 *
 * The following `TaxRegionsQueryBuilder` functions are supported for the `queryTaxRegions()` function. For a full description of the tax region object, see the object returned for the `items` property in `TaxRegionsQueryResult`.
 */
function queryTaxRegions(payload) {
    function __queryTaxRegions({ host }) {
        const metadata = {
            entityFqdn: 'wix.billing.v1.tax_region',
            method: 'POST',
            methodFqn: 'wix.billing.v1.TaxRegionsService.QueryTaxRegions',
            packageName: PACKAGE_NAME,
            url: resolveWixBillingV1TaxRegionsServiceUrl({
                protoPath: '/v1/tax-regions/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'taxRegions.createdDate' },
                        { path: 'taxRegions.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryTaxRegions;
}
exports.queryTaxRegions = queryTaxRegions;
//# sourceMappingURL=billing-v1-tax-region-tax-regions.http.js.map