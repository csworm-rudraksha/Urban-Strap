interface MemberReport {
    /**
     * Report ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * ID of the reported member.
     * @format GUID
     */
    reportedMemberId?: string;
    /**
     * ID of the member who created the report.
     * @readonly
     */
    reportingMemberId?: string | null;
    /** Reason for reporting a member. */
    reason?: Reason;
    /**
     * Date and time the report was created.
     * @readonly
     */
    _createdDate?: Date | null;
}
interface Reason {
    /** Report reason type. */
    category?: Category;
    /** Explanation of why the member is being reported. */
    description?: string | null;
}
declare enum Category {
    /** Unknown category. This value is unused. */
    UNKNOWN = "UNKNOWN",
    /** The member is reported for spam. */
    SPAM = "SPAM",
    /** The member is reported for impersonation. */
    IMPERSONATION = "IMPERSONATION",
    /** The member is reported for harassment. */
    HARASSMENT = "HARASSMENT",
    /** The member is reported for other reasons. */
    OTHER = "OTHER"
}
interface ReportMemberRequest {
    /** Details of a member to report. */
    memberReport: MemberReport;
}
interface ReportMemberResponse {
    /** Member report. */
    memberReport?: MemberReport;
}
interface ReportedMemberCreated {
    reportedMember?: ReportedMember;
}
/** Reported member details. */
interface ReportedMember {
    /**
     * ID of the reported member.
     * @format GUID
     */
    reportedMemberId?: string;
    /** Number of reports for this member. */
    reportCount?: string;
    /** Whether reports of this member have been reviewed. */
    reviewed?: boolean;
    /**
     * Date and time when the most recent report was created.
     * @readonly
     */
    lastReportDate?: Date | null;
}
interface SelfReportingForbiddenError {
    /**
     * ID of the member that is reported.
     * @format GUID
     */
    memberId?: string;
}
interface CannotReportBlockedMemberError {
    /**
     * ID of the member that is reported.
     * @format GUID
     */
    memberId?: string;
}
interface QueryMemberReportsRequest {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    query?: QueryV2;
}
interface QueryV2 {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     *
     * See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details.
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sorting?: Sorting[];
    /** Paging options to limit and skip the number of items. */
    paging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /**
     * The number of items to load.
     * Default: `100`
     * @max 1000
     */
    limit?: number | null;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursor?: string | null;
}
interface QueryMemberReportsResponse {
    /** Retrieved member reports. */
    memberReports?: MemberReport[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface MarkMemberReportsAsReviewedRequest {
    /**
     * ID of the member whose reports are to be marked as reviewed.
     * @format GUID
     */
    memberId?: string;
}
interface MarkMemberReportsAsReviewedResponse {
    /** Reported member details. */
    reportedMember?: ReportedMember;
}
interface ListReportedMembersRequest extends ListReportedMembersRequestPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
/** @oneof */
interface ListReportedMembersRequestPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface Paging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface ListReportedMembersResponse {
    /** Retrieved reported members. */
    reportedMembers?: ReportedMember[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface QueryReportedMembersRequest {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    query?: QueryV2;
}
interface QueryReportedMembersResponse {
    /** Retrieved reported members. */
    reportedMembers?: ReportedMember[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface DeleteMemberReportsRequest {
    /**
     * ID of the member whose reports are to be deleted.
     * @format GUID
     */
    memberId: string;
}
interface DeleteMemberReportsResponse {
}
interface ReportedMemberDeleted {
    /** @format GUID */
    reportedMemberId?: string;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface MemberReportCreatedEnvelope {
    entity: MemberReport;
    metadata: EventMetadata;
}
interface MemberReportDeletedEnvelope {
    metadata: EventMetadata;
}
interface MemberReportReportedMemberCreatedEnvelope {
    data: ReportedMemberCreated;
    metadata: EventMetadata;
}
interface MemberReportReportedMemberDeletedEnvelope {
    data: ReportedMemberDeleted;
    metadata: EventMetadata;
}
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface MemberReportsQueryResult extends QueryCursorResult {
    items: MemberReport[];
    query: MemberReportsQueryBuilder;
    next: () => Promise<MemberReportsQueryResult>;
    prev: () => Promise<MemberReportsQueryResult>;
}
interface MemberReportsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'reportedMemberId' | 'reportingMemberId' | 'reason' | '_createdDate', value: any) => MemberReportsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'reportedMemberId' | 'reportingMemberId' | 'reason' | '_createdDate', value: any) => MemberReportsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate', value: any) => MemberReportsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate', value: any) => MemberReportsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate', value: any) => MemberReportsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate', value: any) => MemberReportsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'reportedMemberId' | 'reportingMemberId', value: string) => MemberReportsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'reportedMemberId' | 'reportingMemberId' | 'reason' | '_createdDate', value: any[]) => MemberReportsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'reportedMemberId' | 'reportingMemberId' | 'reason' | '_createdDate', value: any) => MemberReportsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'reportedMemberId' | 'reportingMemberId' | 'reason' | '_createdDate', value: boolean) => MemberReportsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => MemberReportsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => MemberReportsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<MemberReportsQueryResult>;
}
interface ListReportedMembersOptions extends ListReportedMembersOptionsPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
/** @oneof */
interface ListReportedMembersOptionsPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface QueryReportedMembersOptions {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    query?: QueryV2;
}

export { type EntityUpdatedEvent as A, type EntityDeletedEvent as B, Category as C, type DeleteMemberReportsRequest as D, type EntityCreatedEvent as E, type ActionEvent as F, type Empty as G, type MessageEnvelope as H, type IdentificationData as I, type IdentificationDataIdOneOf as J, type BaseEventMetadata as K, type ListReportedMembersOptions as L, type MemberReport as M, type EventMetadata as N, type MemberReportCreatedEnvelope as O, type PagingMetadataV2 as P, type QueryReportedMembersOptions as Q, type ReportMemberResponse as R, SortOrder as S, type MemberReportDeletedEnvelope as T, type MemberReportReportedMemberCreatedEnvelope as U, type MemberReportReportedMemberDeletedEnvelope as V, WebhookIdentityType as W, type MemberReportsQueryResult as X, type ListReportedMembersOptionsPagingMethodOneOf as Y, type MemberReportsQueryBuilder as a, type ListReportedMembersResponse as b, type QueryReportedMembersResponse as c, type Reason as d, type ReportMemberRequest as e, type ReportedMemberCreated as f, type ReportedMember as g, type SelfReportingForbiddenError as h, type CannotReportBlockedMemberError as i, type QueryMemberReportsRequest as j, type QueryV2 as k, type Sorting as l, type CursorPaging as m, type QueryMemberReportsResponse as n, type Cursors as o, type MarkMemberReportsAsReviewedRequest as p, type MarkMemberReportsAsReviewedResponse as q, type ListReportedMembersRequest as r, type ListReportedMembersRequestPagingMethodOneOf as s, type Paging as t, type QueryReportedMembersRequest as u, type DeleteMemberReportsResponse as v, type ReportedMemberDeleted as w, type DomainEvent as x, type DomainEventBodyOneOf as y, type RestoreInfo as z };
