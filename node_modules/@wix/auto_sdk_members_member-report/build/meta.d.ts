import { e as ReportMemberRequest$1, R as ReportMemberResponse$1, j as QueryMemberReportsRequest$1, n as QueryMemberReportsResponse$1, r as ListReportedMembersRequest$1, b as ListReportedMembersResponse$1, u as QueryReportedMembersRequest$1, c as QueryReportedMembersResponse$1, D as DeleteMemberReportsRequest$1, v as DeleteMemberReportsResponse$1 } from './members-v1-member-report-member-report.universal-BBR1zWhW.js';

interface MemberReport {
    /**
     * Report ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * ID of the reported member.
     * @format GUID
     */
    reportedMemberId?: string;
    /**
     * ID of the member who created the report.
     * @readonly
     */
    reportingMemberId?: string | null;
    /** Reason for reporting a member. */
    reason?: Reason;
    /**
     * Date and time the report was created.
     * @readonly
     */
    createdDate?: Date | null;
}
interface Reason {
    /** Report reason type. */
    category?: Category;
    /** Explanation of why the member is being reported. */
    description?: string | null;
}
declare enum Category {
    /** Unknown category. This value is unused. */
    UNKNOWN = "UNKNOWN",
    /** The member is reported for spam. */
    SPAM = "SPAM",
    /** The member is reported for impersonation. */
    IMPERSONATION = "IMPERSONATION",
    /** The member is reported for harassment. */
    HARASSMENT = "HARASSMENT",
    /** The member is reported for other reasons. */
    OTHER = "OTHER"
}
interface ReportMemberRequest {
    /** Details of a member to report. */
    memberReport: MemberReport;
}
interface ReportMemberResponse {
    /** Member report. */
    memberReport?: MemberReport;
}
/** Reported member details. */
interface ReportedMember {
    /**
     * ID of the reported member.
     * @format GUID
     */
    reportedMemberId?: string;
    /** Number of reports for this member. */
    reportCount?: string;
    /** Whether reports of this member have been reviewed. */
    reviewed?: boolean;
    /**
     * Date and time when the most recent report was created.
     * @readonly
     */
    lastReportDate?: Date | null;
}
interface QueryMemberReportsRequest {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    query?: QueryV2;
}
interface QueryV2 {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     *
     * See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details.
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sorting?: Sorting[];
    /** Paging options to limit and skip the number of items. */
    paging?: CursorPaging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /**
     * The number of items to load.
     * Default: `100`
     * @max 1000
     */
    limit?: number | null;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursor?: string | null;
}
interface QueryMemberReportsResponse {
    /** Retrieved member reports. */
    memberReports?: MemberReport[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface ListReportedMembersRequest extends ListReportedMembersRequestPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
/** @oneof */
interface ListReportedMembersRequestPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
interface ListReportedMembersResponse {
    /** Retrieved reported members. */
    reportedMembers?: ReportedMember[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface QueryReportedMembersRequest {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    query?: QueryV2;
}
interface QueryReportedMembersResponse {
    /** Retrieved reported members. */
    reportedMembers?: ReportedMember[];
    /** Metadata for the paginated results. */
    pagingMetadata?: PagingMetadataV2;
}
interface DeleteMemberReportsRequest {
    /**
     * ID of the member whose reports are to be deleted.
     * @format GUID
     */
    memberId: string;
}
interface DeleteMemberReportsResponse {
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function reportMember(): __PublicMethodMetaInfo<'POST', {}, ReportMemberRequest$1, ReportMemberRequest, ReportMemberResponse$1, ReportMemberResponse>;
declare function queryMemberReports(): __PublicMethodMetaInfo<'POST', {}, QueryMemberReportsRequest$1, QueryMemberReportsRequest, QueryMemberReportsResponse$1, QueryMemberReportsResponse>;
declare function listReportedMembers(): __PublicMethodMetaInfo<'GET', {}, ListReportedMembersRequest$1, ListReportedMembersRequest, ListReportedMembersResponse$1, ListReportedMembersResponse>;
declare function queryReportedMembers(): __PublicMethodMetaInfo<'POST', {}, QueryReportedMembersRequest$1, QueryReportedMembersRequest, QueryReportedMembersResponse$1, QueryReportedMembersResponse>;
declare function deleteMemberReports(): __PublicMethodMetaInfo<'DELETE', {
    memberId: string;
}, DeleteMemberReportsRequest$1, DeleteMemberReportsRequest, DeleteMemberReportsResponse$1, DeleteMemberReportsResponse>;

export { type __PublicMethodMetaInfo, deleteMemberReports, listReportedMembers, queryMemberReports, queryReportedMembers, reportMember };
