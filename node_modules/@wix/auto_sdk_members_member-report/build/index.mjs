// src/members-v1-member-report-member-report.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/members-v1-member-report-member-report.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import { queryBuilder } from "@wix/sdk-runtime/query-builder";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/members-v1-member-report-member-report.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressMembersMemberreportsMemberReportsUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/members/v1/member-reports",
        destPath: "/v1/member-reports"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/members-reports-api",
        destPath: ""
      }
    ],
    "members.wixapps.net": [
      {
        srcPath: "/v1/member-reports",
        destPath: "/v1/member-reports"
      }
    ],
    _: [
      {
        srcPath: "/members/v1/member-reports",
        destPath: "/v1/member-reports"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/members/v1/member-reports",
        destPath: "/v1/member-reports"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_members_member-report";
function reportMember(payload) {
  function __reportMember({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "memberReport.createdDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.members.v1.member_report",
      method: "POST",
      methodFqn: "com.wixpress.members.memberreports.MemberReports.ReportMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberreportsMemberReportsUrl({
        protoPath: "/v1/member-reports",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "memberReport.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __reportMember;
}
function queryMemberReports(payload) {
  function __queryMemberReports({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_report",
      method: "POST",
      methodFqn: "com.wixpress.members.memberreports.MemberReports.QueryMemberReports",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberreportsMemberReportsUrl({
        protoPath: "/v1/member-reports/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "memberReports.createdDate" }]
        }
      ])
    };
    return metadata;
  }
  return __queryMemberReports;
}
function listReportedMembers(payload) {
  function __listReportedMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_report",
      method: "GET",
      methodFqn: "com.wixpress.members.memberreports.MemberReports.ListReportedMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberreportsMemberReportsUrl({
        protoPath: "/v1/member-reports/members",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "reportedMembers.lastReportDate" }]
        }
      ])
    };
    return metadata;
  }
  return __listReportedMembers;
}
function queryReportedMembers(payload) {
  function __queryReportedMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_report",
      method: "POST",
      methodFqn: "com.wixpress.members.memberreports.MemberReports.QueryReportedMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberreportsMemberReportsUrl({
        protoPath: "/v1/member-reports/members/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [{ path: "reportedMembers.lastReportDate" }]
        }
      ])
    };
    return metadata;
  }
  return __queryReportedMembers;
}
function deleteMemberReports(payload) {
  function __deleteMemberReports({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member_report",
      method: "DELETE",
      methodFqn: "com.wixpress.members.memberreports.MemberReports.DeleteMemberReports",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberreportsMemberReportsUrl({
        protoPath: "/v1/member-reports/members/{memberId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteMemberReports;
}

// src/members-v1-member-report-member-report.universal.ts
var Category = /* @__PURE__ */ ((Category2) => {
  Category2["UNKNOWN"] = "UNKNOWN";
  Category2["SPAM"] = "SPAM";
  Category2["IMPERSONATION"] = "IMPERSONATION";
  Category2["HARASSMENT"] = "HARASSMENT";
  Category2["OTHER"] = "OTHER";
  return Category2;
})(Category || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function reportMember2(memberReport) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    memberReport
  });
  const reqOpts = reportMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberReport: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["memberReport"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryMemberReports2() {
  const { httpClient, sideEffects } = arguments[0];
  return queryBuilder({
    func: async (payload) => {
      const reqOpts = queryMemberReports(payload);
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, {}];
      return renameKeysFromSDKRequestToRESTRequest({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({
      data
    }) => {
      const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
      return {
        items: transformedData?.memberReports,
        pagingMetadata: transformedData?.pagingMetadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = sdkTransformError(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "CURSOR",
    transformationPaths: {}
  });
}
async function listReportedMembers2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    cursorPaging: options?.cursorPaging
  });
  const reqOpts = listReportedMembers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { cursorPaging: "$[0].cursorPaging" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryReportedMembers2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    query: options?.query
  });
  const reqOpts = queryReportedMembers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0].query" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteMemberReports2(memberId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ memberId });
  const reqOpts = deleteMemberReports(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["memberId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/members-v1-member-report-member-report.public.ts
function reportMember3(httpClient) {
  return (memberReport) => reportMember2(
    memberReport,
    // @ts-ignore
    { httpClient }
  );
}
function queryMemberReports3(httpClient) {
  return () => queryMemberReports2(
    // @ts-ignore
    { httpClient }
  );
}
function listReportedMembers3(httpClient) {
  return (options) => listReportedMembers2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryReportedMembers3(httpClient) {
  return (options) => queryReportedMembers2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function deleteMemberReports3(httpClient) {
  return (memberId) => deleteMemberReports2(
    memberId,
    // @ts-ignore
    { httpClient }
  );
}
var onMemberReportCreated = EventDefinition(
  "wix.members.v1.member_report_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onMemberReportDeleted = EventDefinition(
  "wix.members.v1.member_report_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onMemberReportReportedMemberCreated = EventDefinition(
  "wix.members.v1.member_report_reported_member_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "data.reportedMember.lastReportDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onMemberReportReportedMemberDeleted = EventDefinition(
  "wix.members.v1.member_report_reported_member_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [{ path: "metadata.eventTime" }]
      }
    ])
  )
)();

// src/members-v1-member-report-member-report.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var reportMember4 = /* @__PURE__ */ createRESTModule(reportMember3);
var queryMemberReports4 = /* @__PURE__ */ createRESTModule(queryMemberReports3);
var listReportedMembers4 = /* @__PURE__ */ createRESTModule(listReportedMembers3);
var queryReportedMembers4 = /* @__PURE__ */ createRESTModule(queryReportedMembers3);
var deleteMemberReports4 = /* @__PURE__ */ createRESTModule(deleteMemberReports3);
var onMemberReportCreated2 = createEventModule(onMemberReportCreated);
var onMemberReportDeleted2 = createEventModule(onMemberReportDeleted);
var onMemberReportReportedMemberCreated2 = createEventModule(onMemberReportReportedMemberCreated);
var onMemberReportReportedMemberDeleted2 = createEventModule(onMemberReportReportedMemberDeleted);
export {
  Category,
  SortOrder,
  WebhookIdentityType,
  deleteMemberReports4 as deleteMemberReports,
  listReportedMembers4 as listReportedMembers,
  onMemberReportCreated2 as onMemberReportCreated,
  onMemberReportDeleted2 as onMemberReportDeleted,
  onMemberReportReportedMemberCreated2 as onMemberReportReportedMemberCreated,
  onMemberReportReportedMemberDeleted2 as onMemberReportReportedMemberDeleted,
  queryMemberReports4 as queryMemberReports,
  queryReportedMembers4 as queryReportedMembers,
  reportMember4 as reportMember
};
//# sourceMappingURL=index.mjs.map