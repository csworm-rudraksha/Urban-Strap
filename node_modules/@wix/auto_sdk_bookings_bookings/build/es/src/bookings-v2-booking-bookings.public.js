import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { addBookingsToMultiServiceBooking as universalAddBookingsToMultiServiceBooking, bulkConfirmOrDeclineBooking as universalBulkConfirmOrDeclineBooking, bulkCreateBooking as universalBulkCreateBooking, bulkGetMultiServiceBookingAllowedActions as universalBulkGetMultiServiceBookingAllowedActions, cancelBooking as universalCancelBooking, cancelMultiServiceBooking as universalCancelMultiServiceBooking, confirmBooking as universalConfirmBooking, confirmMultiServiceBooking as universalConfirmMultiServiceBooking, confirmOrDeclineBooking as universalConfirmOrDeclineBooking, createBooking as universalCreateBooking, createMultiServiceBooking as universalCreateMultiServiceBooking, declineBooking as universalDeclineBooking, declineMultiServiceBooking as universalDeclineMultiServiceBooking, getMultiServiceBooking as universalGetMultiServiceBooking, getMultiServiceBookingAvailability as universalGetMultiServiceBookingAvailability, markMultiServiceBookingAsPending as universalMarkMultiServiceBookingAsPending, removeBookingsFromMultiServiceBooking as universalRemoveBookingsFromMultiServiceBooking, rescheduleBooking as universalRescheduleBooking, rescheduleMultiServiceBooking as universalRescheduleMultiServiceBooking, updateExtendedFields as universalUpdateExtendedFields, updateNumberOfParticipants as universalUpdateNumberOfParticipants, } from './bookings-v2-booking-bookings.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/bookings' };
export function confirmOrDeclineBooking(httpClient) {
    return (bookingId, options) => universalConfirmOrDeclineBooking(bookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkConfirmOrDeclineBooking(httpClient) {
    return (details, options) => universalBulkConfirmOrDeclineBooking(details, options, 
    // @ts-ignore
    { httpClient });
}
export function createBooking(httpClient) {
    return (booking, options) => universalCreateBooking(booking, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkCreateBooking(httpClient) {
    return (createBookingsInfo, options) => universalBulkCreateBooking(createBookingsInfo, options, 
    // @ts-ignore
    { httpClient });
}
export function rescheduleBooking(httpClient) {
    return (bookingId, slot, options) => universalRescheduleBooking(bookingId, slot, options, 
    // @ts-ignore
    { httpClient });
}
export function confirmBooking(httpClient) {
    return (bookingId, revision, options) => universalConfirmBooking(bookingId, revision, options, 
    // @ts-ignore
    { httpClient });
}
export function updateExtendedFields(httpClient) {
    return (_id, namespace, options) => universalUpdateExtendedFields(_id, namespace, options, 
    // @ts-ignore
    { httpClient });
}
export function declineBooking(httpClient) {
    return (bookingId, revision, options) => universalDeclineBooking(bookingId, revision, options, 
    // @ts-ignore
    { httpClient });
}
export function cancelBooking(httpClient) {
    return (bookingId, options) => universalCancelBooking(bookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function updateNumberOfParticipants(httpClient) {
    return (bookingId, options) => universalUpdateNumberOfParticipants(bookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function createMultiServiceBooking(httpClient) {
    return (bookings, options) => universalCreateMultiServiceBooking(bookings, options, 
    // @ts-ignore
    { httpClient });
}
export function rescheduleMultiServiceBooking(httpClient) {
    return (multiServiceBookingId, rescheduleBookingsInfo, options) => universalRescheduleMultiServiceBooking(multiServiceBookingId, rescheduleBookingsInfo, options, 
    // @ts-ignore
    { httpClient });
}
export function getMultiServiceBookingAvailability(httpClient) {
    return (multiServiceBookingId) => universalGetMultiServiceBookingAvailability(multiServiceBookingId, 
    // @ts-ignore
    { httpClient });
}
export function cancelMultiServiceBooking(httpClient) {
    return (multiServiceBookingId, options) => universalCancelMultiServiceBooking(multiServiceBookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function markMultiServiceBookingAsPending(httpClient) {
    return (multiServiceBookingId, options) => universalMarkMultiServiceBookingAsPending(multiServiceBookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function confirmMultiServiceBooking(httpClient) {
    return (multiServiceBookingId, options) => universalConfirmMultiServiceBooking(multiServiceBookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function declineMultiServiceBooking(httpClient) {
    return (multiServiceBookingId, options) => universalDeclineMultiServiceBooking(multiServiceBookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkGetMultiServiceBookingAllowedActions(httpClient) {
    return (multiServiceBookingIds) => universalBulkGetMultiServiceBookingAllowedActions(multiServiceBookingIds, 
    // @ts-ignore
    { httpClient });
}
export function getMultiServiceBooking(httpClient) {
    return (multiServiceBookingId) => universalGetMultiServiceBooking(multiServiceBookingId, 
    // @ts-ignore
    { httpClient });
}
export function addBookingsToMultiServiceBooking(httpClient) {
    return (multiServiceBookingId, options) => universalAddBookingsToMultiServiceBooking(multiServiceBookingId, options, 
    // @ts-ignore
    { httpClient });
}
export function removeBookingsFromMultiServiceBooking(httpClient) {
    return (multiServiceBookingId, options) => universalRemoveBookingsFromMultiServiceBooking(multiServiceBookingId, options, 
    // @ts-ignore
    { httpClient });
}
export const onBookingCanceled = EventDefinition('wix.bookings.v2.booking_canceled', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.booking.createdDate' },
            { path: 'data.booking.startDate' },
            { path: 'data.booking.endDate' },
            { path: 'data.booking.updatedDate' },
            { path: 'data.booking.canceledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.latitude',
            },
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.longitude',
            },
        ],
    },
])))();
export const onBookingConfirmed = EventDefinition('wix.bookings.v2.booking_confirmed', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.booking.createdDate' },
            { path: 'data.booking.startDate' },
            { path: 'data.booking.endDate' },
            { path: 'data.booking.updatedDate' },
            { path: 'data.booking.canceledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.latitude',
            },
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.longitude',
            },
        ],
    },
])))();
export const onBookingCreated = EventDefinition('wix.bookings.v2.booking_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.startDate' },
            { path: 'entity.endDate' },
            { path: 'entity.updatedDate' },
            { path: 'entity.canceledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.contactDetails.fullAddress.geocode.latitude' },
            { path: 'entity.contactDetails.fullAddress.geocode.longitude' },
        ],
    },
])))();
export const onBookingDeclined = EventDefinition('wix.bookings.v2.booking_declined', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.booking.createdDate' },
            { path: 'data.booking.startDate' },
            { path: 'data.booking.endDate' },
            { path: 'data.booking.updatedDate' },
            { path: 'data.booking.canceledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.latitude',
            },
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.longitude',
            },
        ],
    },
])))();
export const onBookingNumberOfParticipantsUpdated = EventDefinition('wix.bookings.v2.booking_number_of_participants_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.booking.createdDate' },
            { path: 'data.booking.startDate' },
            { path: 'data.booking.endDate' },
            { path: 'data.booking.updatedDate' },
            { path: 'data.booking.canceledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.latitude',
            },
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.longitude',
            },
        ],
    },
])))();
export const onBookingRescheduled = EventDefinition('wix.bookings.v2.booking_rescheduled', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.previousStartDate' },
            { path: 'data.previousEndDate' },
            { path: 'data.booking.createdDate' },
            { path: 'data.booking.startDate' },
            { path: 'data.booking.endDate' },
            { path: 'data.booking.updatedDate' },
            { path: 'data.booking.canceledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.latitude',
            },
            {
                path: 'data.booking.contactDetails.fullAddress.geocode.longitude',
            },
        ],
    },
])))();
export const onBookingUpdated = EventDefinition('wix.bookings.v2.booking_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.startDate' },
            { path: 'entity.endDate' },
            { path: 'entity.updatedDate' },
            { path: 'entity.canceledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.contactDetails.fullAddress.geocode.latitude' },
            { path: 'entity.contactDetails.fullAddress.geocode.longitude' },
        ],
    },
])))();
export { Actor, BookingStatus, IdentificationDataIdentityType, IdentityType, LocationLocationType, LocationType, MultiServiceBookingType, PaymentStatus, Platform, SelectedPaymentOption, SortOrder, ValueType, WebhookIdentityType, } from './bookings-v2-booking-bookings.universal.js';
//# sourceMappingURL=bookings-v2-booking-bookings.public.js.map