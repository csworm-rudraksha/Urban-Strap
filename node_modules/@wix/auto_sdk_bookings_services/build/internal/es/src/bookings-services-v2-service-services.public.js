import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTPageURLV2ToSDKPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { bulkDeleteServices as universalBulkDeleteServices, bulkDeleteServicesByFilter as universalBulkDeleteServicesByFilter, bulkUpdateServices as universalBulkUpdateServices, bulkUpdateServicesByFilter as universalBulkUpdateServicesByFilter, cloneService as universalCloneService, countServices as universalCountServices, createService as universalCreateService, deleteService as universalDeleteService, disablePricingPlansForService as universalDisablePricingPlansForService, enablePricingPlansForService as universalEnablePricingPlansForService, getService as universalGetService, queryBookingForms as universalQueryBookingForms, queryCategories as universalQueryCategories, queryLocations as universalQueryLocations, queryPolicies as universalQueryPolicies, queryServices as universalQueryServices, searchServices as universalSearchServices, setCustomSlug as universalSetCustomSlug, setServiceLocations as universalSetServiceLocations, updateService as universalUpdateService, validateSlug as universalValidateSlug, } from './bookings-services-v2-service-services.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/bookings' };
export function createService(httpClient) {
    return (service) => universalCreateService(service, 
    // @ts-ignore
    { httpClient });
}
export function getService(httpClient) {
    return (serviceId) => universalGetService(serviceId, 
    // @ts-ignore
    { httpClient });
}
export function updateService(httpClient) {
    return (_id, service) => universalUpdateService(_id, service, 
    // @ts-ignore
    { httpClient });
}
export function bulkUpdateServices(httpClient) {
    return (options) => universalBulkUpdateServices(options, 
    // @ts-ignore
    { httpClient });
}
export function bulkUpdateServicesByFilter(httpClient) {
    return (filter, options) => universalBulkUpdateServicesByFilter(filter, options, 
    // @ts-ignore
    { httpClient });
}
export function deleteService(httpClient) {
    return (serviceId, options) => universalDeleteService(serviceId, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkDeleteServices(httpClient) {
    return (ids, options) => universalBulkDeleteServices(ids, options, 
    // @ts-ignore
    { httpClient });
}
export function bulkDeleteServicesByFilter(httpClient) {
    return (filter, options) => universalBulkDeleteServicesByFilter(filter, options, 
    // @ts-ignore
    { httpClient });
}
export function queryServices(httpClient) {
    return (options) => universalQueryServices(options, 
    // @ts-ignore
    { httpClient });
}
export function searchServices(httpClient) {
    return (search) => universalSearchServices(search, 
    // @ts-ignore
    { httpClient });
}
export function queryPolicies(httpClient) {
    return (query) => universalQueryPolicies(query, 
    // @ts-ignore
    { httpClient });
}
export function queryBookingForms(httpClient) {
    return (query, options) => universalQueryBookingForms(query, options, 
    // @ts-ignore
    { httpClient });
}
export function countServices(httpClient) {
    return (options) => universalCountServices(options, 
    // @ts-ignore
    { httpClient });
}
export function queryLocations(httpClient) {
    return (options) => universalQueryLocations(options, 
    // @ts-ignore
    { httpClient });
}
export function queryCategories(httpClient) {
    return (options) => universalQueryCategories(options, 
    // @ts-ignore
    { httpClient });
}
export function setServiceLocations(httpClient) {
    return (serviceId, locations, options) => universalSetServiceLocations(serviceId, locations, options, 
    // @ts-ignore
    { httpClient });
}
export function enablePricingPlansForService(httpClient) {
    return (serviceId, pricingPlanIds) => universalEnablePricingPlansForService(serviceId, pricingPlanIds, 
    // @ts-ignore
    { httpClient });
}
export function disablePricingPlansForService(httpClient) {
    return (serviceId, options) => universalDisablePricingPlansForService(serviceId, options, 
    // @ts-ignore
    { httpClient });
}
export function setCustomSlug(httpClient) {
    return (serviceId, options) => universalSetCustomSlug(serviceId, options, 
    // @ts-ignore
    { httpClient });
}
export function validateSlug(httpClient) {
    return (serviceId, options) => universalValidateSlug(serviceId, options, 
    // @ts-ignore
    { httpClient });
}
export function cloneService(httpClient) {
    return (sourceServiceId) => universalCloneService(sourceServiceId, 
    // @ts-ignore
    { httpClient });
}
export const onServiceCreated = EventDefinition('wix.bookings.services.v2.service_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'entity.bookingPolicy.createdDate' },
            { path: 'entity.bookingPolicy.updatedDate' },
            { path: 'entity.schedule.firstSessionStart' },
            { path: 'entity.schedule.lastSessionEnd' },
            { path: 'entity.supportedSlugs.createdDate' },
            { path: 'entity.mainSlug.createdDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.media.items.image' },
            { path: 'entity.media.mainMedia.image' },
            { path: 'entity.media.coverMedia.image' },
            { path: 'entity.staffMembers.mainMedia.image' },
            { path: 'entity.staffMemberDetails.staffMembers.mainMedia.image' },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'entity.locations.calculatedAddress' },
            { path: 'entity.locations.business.address' },
            { path: 'entity.locations.custom.address' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [
            { path: 'entity.urls.servicePage' },
            { path: 'entity.urls.bookingPage' },
            { path: 'entity.urls.calendarPage' },
        ],
    },
])))();
export const onServiceDeleted = EventDefinition('wix.bookings.services.v2.service_deleted', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'entity.bookingPolicy.createdDate' },
            { path: 'entity.bookingPolicy.updatedDate' },
            { path: 'entity.schedule.firstSessionStart' },
            { path: 'entity.schedule.lastSessionEnd' },
            { path: 'entity.supportedSlugs.createdDate' },
            { path: 'entity.mainSlug.createdDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.media.items.image' },
            { path: 'entity.media.mainMedia.image' },
            { path: 'entity.media.coverMedia.image' },
            { path: 'entity.staffMembers.mainMedia.image' },
            { path: 'entity.staffMemberDetails.staffMembers.mainMedia.image' },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'entity.locations.calculatedAddress' },
            { path: 'entity.locations.business.address' },
            { path: 'entity.locations.custom.address' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [
            { path: 'entity.urls.servicePage' },
            { path: 'entity.urls.bookingPage' },
            { path: 'entity.urls.calendarPage' },
        ],
    },
])))();
export const onServiceUpdated = EventDefinition('wix.bookings.services.v2.service_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            { path: 'entity.bookingPolicy.createdDate' },
            { path: 'entity.bookingPolicy.updatedDate' },
            { path: 'entity.schedule.firstSessionStart' },
            { path: 'entity.schedule.lastSessionEnd' },
            { path: 'entity.supportedSlugs.createdDate' },
            { path: 'entity.mainSlug.createdDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.media.items.image' },
            { path: 'entity.media.mainMedia.image' },
            { path: 'entity.media.coverMedia.image' },
            { path: 'entity.staffMembers.mainMedia.image' },
            { path: 'entity.staffMemberDetails.staffMembers.mainMedia.image' },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'entity.locations.calculatedAddress' },
            { path: 'entity.locations.business.address' },
            { path: 'entity.locations.custom.address' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [
            { path: 'entity.urls.servicePage' },
            { path: 'entity.urls.bookingPage' },
            { path: 'entity.urls.calendarPage' },
        ],
    },
])))();
export { Action, AggregationType, ApprovalStatus, BenefitType, CalendarType, CategoryNotificationEvent, CategoryStatus, CloneErrors, ConferenceType, CrudType, DateHistogramAggregationInterval, Day, DayOfWeek, Event, InvalidSlugError, LocationStatus, LocationType, LocationTypeEnumLocationType, LocationsLocationType, MissingValues, Mode, NestedAggregationType, PlacementType, RateType, RecurringIntervalType, RequestedFields, ResolutionMethod, ResourceNotificationEvent, ResourceStatus, ScalarType, ScheduleStatus, ServiceType, SessionType, SortDirection, SortOrder, SortType, Status, Transparency, V2RequestedFields, WebhookIdentityType, } from './bookings-services-v2-service-services.universal.js';
//# sourceMappingURL=bookings-services-v2-service-services.public.js.map