"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cloneService = exports.validateSlug = exports.setCustomSlug = exports.disablePricingPlansForService = exports.enablePricingPlansForService = exports.setServiceLocations = exports.queryCategories = exports.queryLocations = exports.countServices = exports.queryBookingForms = exports.queryPolicies = exports.searchServices = exports.queryServices = exports.bulkDeleteServicesByFilter = exports.bulkDeleteServices = exports.deleteService = exports.bulkUpdateServicesByFilter = exports.bulkUpdateServices = exports.updateService = exports.getService = exports.createService = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const float_1 = require("@wix/sdk-runtime/transformations/float");
const float_2 = require("@wix/sdk-runtime/transformations/float");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const field_mask_1 = require("@wix/sdk-runtime/transformations/field-mask");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixBookingsServicesV2ServicesServiceUrl(opts) {
    const domainToMappings = {
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/services-2',
                destPath: '',
            },
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
            {
                srcPath: '/bookings/v2/services',
                destPath: '/v2/services',
            },
            {
                srcPath: '/bookings/v2/bulk/services',
                destPath: '/v2/bulk/services',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
            {
                srcPath: '/_api/bookings/v2/bulk/services',
                destPath: '/v2/bulk/services',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
            {
                srcPath: '/_api/bookings/v2/bulk/services',
                destPath: '/v2/bulk/services',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
            {
                srcPath: '/_api/bookings/v2/bulk/services',
                destPath: '/v2/bulk/services',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
            {
                srcPath: '/_api/bookings/v2/bulk/services',
                destPath: '/v2/bulk/services',
            },
        ],
        _: [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
        ],
        'editor.wixapps.net': [
            {
                srcPath: '/_api/bookings/v2/services',
                destPath: '/v2/services',
            },
        ],
        'api._api_base_domain_': [
            {
                srcPath: '/services-2',
                destPath: '',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_bookings_services';
/**
 * Creates a service.
 *
 *
 * ## Required fields
 *
 * When creating a service you must specify the following fields:
 * - `type`
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-types) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-types)):
 * Whether it's an appointment-based service, class, or course.
 * - `name`: Service name that's displayed to customers.
 * - `onlineBooking`:
 * Settings determining whether customers can book online, whether the business
 * must manually confirm bookings, and whether customers can request to book an
 * appointment time slot that already has a booking request awaiting business
 * confirmation.
 * - `payment`
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-payments) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-payments)):
 * How customers can pay when signing up for the service.
 *
 * ### Session durations
 *
 * Depending on which type of service you're creating, you may also need to specify
 * supported session durations.
 *
 * __Classes and courses__
 *
 * Don't specify `schedule.availabilityConstraints.sessionDurations`.
 *
 * __Appointment-based services without varied pricing based on session length__
 *
 * Specify the single supported session duration in the
 * `schedule.availabilityConstraints.sessionDurations` array.
 *
 * __Appointment-based services with varied pricing based on session length__
 *
 * - Specify all supported session durations in `schedule.availabilityConstraints.sessionDurations`.
 * - Note that Wix Bookings doesn't display these values to customers and
 * ignores them in pricing and availability calculations. Instead session
 * durations are retrieved from the relevant service *variants*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
 * - It is mandatory to specify `schedule.availabilityConstraints.sessionDurations`,
 * even though these values are ignored.
 */
function createService(payload) {
    function __createService({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'service.createdDate' },
                    { path: 'service.updatedDate' },
                    { path: 'service.media.items.image.urlExpirationDate' },
                    { path: 'service.media.mainMedia.image.urlExpirationDate' },
                    { path: 'service.media.coverMedia.image.urlExpirationDate' },
                    { path: 'service.bookingPolicy.createdDate' },
                    { path: 'service.bookingPolicy.updatedDate' },
                    { path: 'service.schedule.firstSessionStart' },
                    { path: 'service.schedule.lastSessionEnd' },
                    { path: 'service.staffMembers.mainMedia.image.urlExpirationDate' },
                    {
                        path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                    },
                    { path: 'service.supportedSlugs.createdDate' },
                    { path: 'service.mainSlug.createdDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'service.locations.business.address.geocode.latitude' },
                    { path: 'service.locations.business.address.geocode.longitude' },
                    { path: 'service.locations.custom.address.geocode.latitude' },
                    { path: 'service.locations.custom.address.geocode.longitude' },
                    { path: 'service.locations.calculatedAddress.geocode.latitude' },
                    { path: 'service.locations.calculatedAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.CreateService',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createService;
}
exports.createService = createService;
/** Retrieves a service. */
function getService(payload) {
    function __getService({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'GET',
            methodFqn: 'wix.bookings.services.v2.ServicesService.GetService',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/{serviceId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getService;
}
exports.getService = getService;
/**
 * Updates a service.
 *
 *
 * Each time the service is updated, `revision` increments by 1. You must
 * include the number of the existing revision when updating the service.
 * This ensures you're working with the latest service information and
 * prevents unintended overwrites.
 *
 * ## Session durations
 *
 * Specify `schedule.availabilityConstraints.sessionDurations`
 * only if you want to update it for appointment-based services without varied
 * pricing based on session length. Don't specify `schedule.availabilityConstraints.sessionDurations`
 * for all other appointment-based services, classes, or courses. See *Create Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/create-service#session-durations) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/create-service#session-durations))
 * for more details.
 */
function updateService(payload) {
    function __updateService({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'mask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'service.createdDate' },
                    { path: 'service.updatedDate' },
                    { path: 'service.media.items.image.urlExpirationDate' },
                    { path: 'service.media.mainMedia.image.urlExpirationDate' },
                    { path: 'service.media.coverMedia.image.urlExpirationDate' },
                    { path: 'service.bookingPolicy.createdDate' },
                    { path: 'service.bookingPolicy.updatedDate' },
                    { path: 'service.schedule.firstSessionStart' },
                    { path: 'service.schedule.lastSessionEnd' },
                    { path: 'service.staffMembers.mainMedia.image.urlExpirationDate' },
                    {
                        path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                    },
                    { path: 'service.supportedSlugs.createdDate' },
                    { path: 'service.mainSlug.createdDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'service.locations.business.address.geocode.latitude' },
                    { path: 'service.locations.business.address.geocode.longitude' },
                    { path: 'service.locations.custom.address.geocode.latitude' },
                    { path: 'service.locations.custom.address.geocode.longitude' },
                    { path: 'service.locations.calculatedAddress.geocode.latitude' },
                    { path: 'service.locations.calculatedAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'PATCH',
            methodFqn: 'wix.bookings.services.v2.ServicesService.UpdateService',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/{service.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateService;
}
exports.updateService = updateService;
/**
 * Updates up to 100 services.
 *
 *
 * See *Update Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/update-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/update-service))
 * for more details.
 *
 * The call succeeds even if one or more individual services can't be updated.
 * Information about failures is returned in `bulkActionMetadata`.
 */
function bulkUpdateServices(payload) {
    function __bulkUpdateServices({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'services.mask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'services.service.createdDate' },
                    { path: 'services.service.updatedDate' },
                    { path: 'services.service.media.items.image.urlExpirationDate' },
                    { path: 'services.service.media.mainMedia.image.urlExpirationDate' },
                    { path: 'services.service.media.coverMedia.image.urlExpirationDate' },
                    { path: 'services.service.bookingPolicy.createdDate' },
                    { path: 'services.service.bookingPolicy.updatedDate' },
                    { path: 'services.service.schedule.firstSessionStart' },
                    { path: 'services.service.schedule.lastSessionEnd' },
                    {
                        path: 'services.service.staffMembers.mainMedia.image.urlExpirationDate',
                    },
                    {
                        path: 'services.service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                    },
                    { path: 'services.service.supportedSlugs.createdDate' },
                    { path: 'services.service.mainSlug.createdDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    {
                        path: 'services.service.locations.business.address.geocode.latitude',
                    },
                    {
                        path: 'services.service.locations.business.address.geocode.longitude',
                    },
                    {
                        path: 'services.service.locations.custom.address.geocode.latitude',
                    },
                    {
                        path: 'services.service.locations.custom.address.geocode.longitude',
                    },
                    {
                        path: 'services.service.locations.calculatedAddress.geocode.latitude',
                    },
                    {
                        path: 'services.service.locations.calculatedAddress.geocode.longitude',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.BulkUpdateServices',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/bulk/services/update',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                        { path: 'results.item.media.items.image.urlExpirationDate' },
                        { path: 'results.item.media.mainMedia.image.urlExpirationDate' },
                        { path: 'results.item.media.coverMedia.image.urlExpirationDate' },
                        { path: 'results.item.bookingPolicy.createdDate' },
                        { path: 'results.item.bookingPolicy.updatedDate' },
                        { path: 'results.item.schedule.firstSessionStart' },
                        { path: 'results.item.schedule.lastSessionEnd' },
                        {
                            path: 'results.item.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'results.item.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'results.item.supportedSlugs.createdDate' },
                        { path: 'results.item.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'results.item.locations.business.address.geocode.latitude',
                        },
                        {
                            path: 'results.item.locations.business.address.geocode.longitude',
                        },
                        {
                            path: 'results.item.locations.custom.address.geocode.latitude',
                        },
                        {
                            path: 'results.item.locations.custom.address.geocode.longitude',
                        },
                        {
                            path: 'results.item.locations.calculatedAddress.geocode.latitude',
                        },
                        {
                            path: 'results.item.locations.calculatedAddress.geocode.longitude',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkUpdateServices;
}
exports.bulkUpdateServices = bulkUpdateServices;
/**
 * Updates multiple services by filter.
 *
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering))
 * for more details.
 *
 * See *Update Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/update-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/update-service))
 * for more details about updating a service.
 *
 * The call succeeds even if one or more individual services can't be updated.
 * Information about failures is returned in `bulkActionMetadata`.
 */
function bulkUpdateServicesByFilter(payload) {
    function __bulkUpdateServicesByFilter({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'mask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'service.createdDate' },
                    { path: 'service.updatedDate' },
                    { path: 'service.media.items.image.urlExpirationDate' },
                    { path: 'service.media.mainMedia.image.urlExpirationDate' },
                    { path: 'service.media.coverMedia.image.urlExpirationDate' },
                    { path: 'service.bookingPolicy.createdDate' },
                    { path: 'service.bookingPolicy.updatedDate' },
                    { path: 'service.schedule.firstSessionStart' },
                    { path: 'service.schedule.lastSessionEnd' },
                    { path: 'service.staffMembers.mainMedia.image.urlExpirationDate' },
                    {
                        path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                    },
                    { path: 'service.supportedSlugs.createdDate' },
                    { path: 'service.mainSlug.createdDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'service.locations.business.address.geocode.latitude' },
                    { path: 'service.locations.business.address.geocode.longitude' },
                    { path: 'service.locations.custom.address.geocode.latitude' },
                    { path: 'service.locations.custom.address.geocode.longitude' },
                    { path: 'service.locations.calculatedAddress.geocode.latitude' },
                    { path: 'service.locations.calculatedAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.BulkUpdateServicesByFilter',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/bulk/services/update-by-filter',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __bulkUpdateServicesByFilter;
}
exports.bulkUpdateServicesByFilter = bulkUpdateServicesByFilter;
/**
 * Deletes a service.
 *
 *
 * Specify `{"preserveFutureSessionsWithParticipants": true}` to retain all
 * future sessions for the service. By default, all future sessions are canceled.
 */
function deleteService(payload) {
    function __deleteService({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'DELETE',
            methodFqn: 'wix.bookings.services.v2.ServicesService.DeleteService',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/{serviceId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteService;
}
exports.deleteService = deleteService;
/**
 * Deletes multiple services.
 *
 *
 * See *Delete Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/delete-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/delete-service))
 * for more details about deleting a service.
 *
 * The call succeeds even if one or more individual services can't be deleted.
 * Information about failures is returned in `bulkActionMetadata`.
 */
function bulkDeleteServices(payload) {
    function __bulkDeleteServices({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.BulkDeleteServices',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/bulk/services/delete',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                        { path: 'results.item.media.items.image.urlExpirationDate' },
                        { path: 'results.item.media.mainMedia.image.urlExpirationDate' },
                        { path: 'results.item.media.coverMedia.image.urlExpirationDate' },
                        { path: 'results.item.bookingPolicy.createdDate' },
                        { path: 'results.item.bookingPolicy.updatedDate' },
                        { path: 'results.item.schedule.firstSessionStart' },
                        { path: 'results.item.schedule.lastSessionEnd' },
                        {
                            path: 'results.item.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'results.item.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'results.item.supportedSlugs.createdDate' },
                        { path: 'results.item.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'results.item.locations.business.address.geocode.latitude',
                        },
                        {
                            path: 'results.item.locations.business.address.geocode.longitude',
                        },
                        {
                            path: 'results.item.locations.custom.address.geocode.latitude',
                        },
                        {
                            path: 'results.item.locations.custom.address.geocode.longitude',
                        },
                        {
                            path: 'results.item.locations.calculatedAddress.geocode.latitude',
                        },
                        {
                            path: 'results.item.locations.calculatedAddress.geocode.longitude',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkDeleteServices;
}
exports.bulkDeleteServices = bulkDeleteServices;
/**
 * Deletes multiple services by filter.
 *
 *
 * See *Delete Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/delete-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/delete-service))
 * for more details about deleting a service.
 *
 * The call succeeds even if one or more individual services can't be deleted.
 * Information about failures is returned in `bulkActionMetadata`.
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering))
 * for more details.
 *
 * To learn about working with filters in general, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
 */
function bulkDeleteServicesByFilter(payload) {
    function __bulkDeleteServicesByFilter({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.BulkDeleteServicesByFilter',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/bulk/services/delete-by-filter',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __bulkDeleteServicesByFilter;
}
exports.bulkDeleteServicesByFilter = bulkDeleteServicesByFilter;
/**
 * Creates a query to retrieve a list of `service` objects.
 *
 * The `queryServices()` function builds a query to retrieve a list of `service` objects and returns a `ServicesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/services-query-builder/find) function.
 *
 * You can refine the query by chaining `ServicesQueryBuilder` functions onto the query. `ServicesQueryBuilder` functions enable you to sort, filter, and control the results that `queryServices()` returns.
 *
 * `queryServices()` runs with the following `ServicesQueryBuilder` defaults that you can override:
 *
 * + `limit` is `100`.
 * + Sorted by `createdDate` in ascending order.
 *
 * The functions that are chained to `queryServices()` are applied in the order they are called. For example, if you apply `ascending("category.name")` and then `ascending("name")`, the results are sorted first by `category.name`, and then, if there are multiple results with the same `category.name`, the items are sorted by `name`.
 *
 * The following `ServicesQueryBuilder` functions are supported for the `queryServices()` function. For a full description of the `service` object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/services-query-result/items) property in `ServicesQueryResult`.
 */
function queryServices(payload) {
    function __queryServices({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.QueryServices',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'services.createdDate' },
                        { path: 'services.updatedDate' },
                        { path: 'services.media.items.image.urlExpirationDate' },
                        { path: 'services.media.mainMedia.image.urlExpirationDate' },
                        { path: 'services.media.coverMedia.image.urlExpirationDate' },
                        { path: 'services.bookingPolicy.createdDate' },
                        { path: 'services.bookingPolicy.updatedDate' },
                        { path: 'services.schedule.firstSessionStart' },
                        { path: 'services.schedule.lastSessionEnd' },
                        {
                            path: 'services.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'services.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'services.supportedSlugs.createdDate' },
                        { path: 'services.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'services.locations.business.address.geocode.latitude' },
                        { path: 'services.locations.business.address.geocode.longitude' },
                        { path: 'services.locations.custom.address.geocode.latitude' },
                        { path: 'services.locations.custom.address.geocode.longitude' },
                        { path: 'services.locations.calculatedAddress.geocode.latitude' },
                        {
                            path: 'services.locations.calculatedAddress.geocode.longitude',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryServices;
}
exports.queryServices = queryServices;
/**
 * Retrieves a list of up to 100 services, given the provided filtering, paging,
 * and sorting.
 *
 *
 * ## Defaults
 *
 * Search Services has the following default settings, which you can override:
 * + Sorted by `createdDate` in ascending order.
 * + `paging.limit` set to `100`.
 * + `paging.offset` set to `0`.
 *
 * ## Filters
 *
 * When using filters for dates, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting))
 * for a complete list of supported filters and sorting options.
 *
 * ## See also
 *
 * To learn about working with *Search* methods, see
 * _API Query Language_
 * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language))
 * and *Sorting and Paging*
 * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language#the-sort-array) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging)).
 */
function searchServices(payload) {
    function __searchServices({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'search.aggregations.range.buckets.from' },
                    { path: 'search.aggregations.range.buckets.to' },
                    {
                        path: 'search.aggregations.nested.nestedAggregations.range.buckets.from',
                    },
                    {
                        path: 'search.aggregations.nested.nestedAggregations.range.buckets.to',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.SearchServices',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/search',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'services.createdDate' },
                        { path: 'services.updatedDate' },
                        { path: 'services.media.items.image.urlExpirationDate' },
                        { path: 'services.media.mainMedia.image.urlExpirationDate' },
                        { path: 'services.media.coverMedia.image.urlExpirationDate' },
                        { path: 'services.bookingPolicy.createdDate' },
                        { path: 'services.bookingPolicy.updatedDate' },
                        { path: 'services.schedule.firstSessionStart' },
                        { path: 'services.schedule.lastSessionEnd' },
                        {
                            path: 'services.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'services.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'services.supportedSlugs.createdDate' },
                        { path: 'services.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'services.locations.business.address.geocode.latitude' },
                        { path: 'services.locations.business.address.geocode.longitude' },
                        { path: 'services.locations.custom.address.geocode.latitude' },
                        { path: 'services.locations.custom.address.geocode.longitude' },
                        { path: 'services.locations.calculatedAddress.geocode.latitude' },
                        {
                            path: 'services.locations.calculatedAddress.geocode.longitude',
                        },
                        { path: 'aggregationData.results.ranges.results.from' },
                        { path: 'aggregationData.results.ranges.results.to' },
                        {
                            path: 'aggregationData.results.groupedByValue.results.nestedResults.ranges.results.from',
                        },
                        {
                            path: 'aggregationData.results.groupedByValue.results.nestedResults.ranges.results.to',
                        },
                        {
                            path: 'aggregationData.results.nested.results.results.*.range.from',
                        },
                        {
                            path: 'aggregationData.results.nested.results.results.*.range.to',
                        },
                        { path: 'aggregationData.results.scalar.value' },
                        {
                            path: 'aggregationData.results.groupedByValue.results.nestedResults.scalar.value',
                        },
                        {
                            path: 'aggregationData.results.nested.results.results.*.scalar.value',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __searchServices;
}
exports.searchServices = searchServices;
/**
 * Retrieves a list of up to 100 *booking policies*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policies/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/introduction)),
 * and information about the services that are connected to them,
 * given the provided filtering, paging, and sorting.
 *
 * ## Defaults
 *
 * Query Policies has the following default settings, which you can override:
 *
 * + Sorted by `id` in ascending order.
 * + `cursorPaging.limit` set to `100`.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to **Booking Policies API: Supported Filters**
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/supported-filters)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## Returned services
 *
 * If a booking policy is connected to more than 5 services, only a subset of
 * those services is returned. The `bookingPolicies.totalServiceCount` values
 * indicate the total number of services linked to each policy. You can call *Search Services*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/search-services) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/search-services))
 * and specify the relevant policy ID in the filter to retrieve all services
 * connected to the booking policy.
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
function queryPolicies(payload) {
    function __queryPolicies({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.QueryPolicies',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/policies/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'bookingPolicies.bookingPolicy.createdDate' },
                        { path: 'bookingPolicies.bookingPolicy.updatedDate' },
                        { path: 'bookingPolicies.services.createdDate' },
                        { path: 'bookingPolicies.services.updatedDate' },
                        {
                            path: 'bookingPolicies.services.media.items.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.services.media.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.services.media.coverMedia.image.urlExpirationDate',
                        },
                        { path: 'bookingPolicies.services.bookingPolicy.createdDate' },
                        { path: 'bookingPolicies.services.bookingPolicy.updatedDate' },
                        { path: 'bookingPolicies.services.schedule.firstSessionStart' },
                        { path: 'bookingPolicies.services.schedule.lastSessionEnd' },
                        {
                            path: 'bookingPolicies.services.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.services.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'bookingPolicies.services.supportedSlugs.createdDate' },
                        { path: 'bookingPolicies.services.mainSlug.createdDate' },
                        { path: 'bookingPolicies.connectedServices.createdDate' },
                        { path: 'bookingPolicies.connectedServices.updatedDate' },
                        {
                            path: 'bookingPolicies.connectedServices.media.items.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.media.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.media.coverMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.bookingPolicy.createdDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.bookingPolicy.updatedDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.schedule.firstSessionStart',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.schedule.lastSessionEnd',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.supportedSlugs.createdDate',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.mainSlug.createdDate',
                        },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'bookingPolicies.services.locations.business.address.geocode.latitude',
                        },
                        {
                            path: 'bookingPolicies.services.locations.business.address.geocode.longitude',
                        },
                        {
                            path: 'bookingPolicies.services.locations.custom.address.geocode.latitude',
                        },
                        {
                            path: 'bookingPolicies.services.locations.custom.address.geocode.longitude',
                        },
                        {
                            path: 'bookingPolicies.services.locations.calculatedAddress.geocode.latitude',
                        },
                        {
                            path: 'bookingPolicies.services.locations.calculatedAddress.geocode.longitude',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.locations.business.address.geocode.latitude',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.locations.business.address.geocode.longitude',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.locations.custom.address.geocode.latitude',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.locations.custom.address.geocode.longitude',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.locations.calculatedAddress.geocode.latitude',
                        },
                        {
                            path: 'bookingPolicies.connectedServices.locations.calculatedAddress.geocode.longitude',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryPolicies;
}
exports.queryPolicies = queryPolicies;
/**
 * Retrieves a list of up to 100 *booking forms*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/forms/forms/introduction) | [REST](https://dev.wix.com/docs/rest/crm/forms/forms/introduction)),
 * and information about the services that are connected to them,
 * given the provided filtering, paging, and sorting.
 *
 *
 * ## Defaults
 *
 * Query Booking Forms has the following default settings, which you can override:
 *
 * + Sorted by `id` in ascending order.
 * + `cursorPaging.limit` set to `100`.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to **Forms API: Supported Filters**
 * ([REST](https://dev.wix.com/docs/rest/crm/forms/forms/introduction/supported-filters)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## Returned services
 *
 * If a booking policy is connected to more than 5 services, only a subset of
 * these service IDs and names is returned. The `bookingForms.totalServiceCount`
 * values indicate the total number of services linked to each form. You can call *Query Services*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/query-services) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/query-services))
 * and specify the relevant form ID in the filter to retrieve all services
 * connected to the booking form.
 *
 * ## Default booking forms
 *
 * By default, all Wix Bookings services use a standard booking form. To retrieve
 * a site's default booking form with Query Booking Forms, specify
 * `{"conditionalFields": ["DEFAULT_BOOKING_FORM"]}`.
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
function queryBookingForms(payload) {
    function __queryBookingForms({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.QueryBookingForms',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/booking-forms/query',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __queryBookingForms;
}
exports.queryBookingForms = queryBookingForms;
/**
 * Counts how many services match the given filter.
 *
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering))
 * for more details.
 *
 * To learn about working with filters in general, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters)
 */
function countServices(payload) {
    function __countServices({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.CountServices',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/count',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __countServices;
}
exports.countServices = countServices;
/**
 * Retrieves 3 separate lists of business, custom, and customer *locations*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction)),
 * given the provided filtering, and whether each location is connected to at
 * least one of the site's services.
 *
 *
 * ## Defaults
 *
 * Query Locations has the following default setting, which you can't override:
 * Sorted by `id` in ascending order.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to the `location` object
 * ([REST](https://dev.wix.com/docs/rest/business-management/locations/location-object)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
function queryLocations(payload) {
    function __queryLocations({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.QueryLocations',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/locations/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'businessLocations.locations.business.address.geocode.latitude',
                        },
                        {
                            path: 'businessLocations.locations.business.address.geocode.longitude',
                        },
                        {
                            path: 'businessLocations.locations.custom.address.geocode.latitude',
                        },
                        {
                            path: 'businessLocations.locations.custom.address.geocode.longitude',
                        },
                        {
                            path: 'businessLocations.locations.calculatedAddress.geocode.latitude',
                        },
                        {
                            path: 'businessLocations.locations.calculatedAddress.geocode.longitude',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryLocations;
}
exports.queryLocations = queryLocations;
/**
 * Retrieves a list of service *categories*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/categories/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/categories-v2/introduction)),
 * given the provided filtering.
 *
 *
 * ## Defaults
 *
 * Query Categories has the following default setting, which you can't override:
 * Sorted by `id` in ascending order.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
function queryCategories(payload) {
    function __queryCategories({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.QueryCategories',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/categories/query',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __queryCategories;
}
exports.queryCategories = queryCategories;
/**
 * Replaces the list of the *locations*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction))
 * where the business offers the service.
 *
 *
 * ## Consequences for customers
 *
 * Removing a service location may impact existing sessions and their
 * participants. If you remove at least one service location, you must
 * specify `removedLocationSessionsAction` to indicate what happens to all
 * future sessions scheduled at this location.
 *
 * - **Keep existing location**: If you want to retain future sessions at their
 * originally scheduled location, specify
 * `{"removedLocationSessionsAction.action": "KEEP_AT_CURRENT_LOCATION"}`.
 * This ensures nothing changes for the customer, but the business must be
 * able to provide access to the removed location in the future.
 * - **Update location**: If you want to update the location for future sessions
 * scheduled at the removed location, specify
 * `{"removedLocationSessionsAction.action": "MOVE_TO_LOCATION"}` and
 * `moveToLocationOptions.newLocation`.
 *
 * You can't mix and match to keep some sessions at the previous location while
 * moving other sessions to an updated location.
 *
 * Past session details aren't changed, no matter which option you choose for
 * future sessions.
 *
 * Future sessions scheduled for a location defined by the customer are also not
 * updated.
 *
 * ## Specify location details
 *
 * Depending on whether the new or updated location is a business or custom location,
 * you need to specify different fields.
 *
 * - **Business location**: Specify the relevant *location ID*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction))
 * in `locations.business.id`.
 * - **Custom location**: Specify the complete address object as
 * `locations.custom.address`.
 *
 * ## Participant notifications
 *
 * You can specify a `participantNotification.message` that's immediately send
 * to all customers who had booked at a changed location. Ensure
 * `participantNotification.notifyParticipants` is set to `true` to send the
 * message.
 */
function setServiceLocations(payload) {
    function __setServiceLocations({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'locations.business.address.geocode.latitude' },
                    { path: 'locations.business.address.geocode.longitude' },
                    { path: 'locations.custom.address.geocode.latitude' },
                    { path: 'locations.custom.address.geocode.longitude' },
                    { path: 'locations.calculatedAddress.geocode.latitude' },
                    { path: 'locations.calculatedAddress.geocode.longitude' },
                    {
                        path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.business.address.geocode.latitude',
                    },
                    {
                        path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.business.address.geocode.longitude',
                    },
                    {
                        path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.custom.address.geocode.latitude',
                    },
                    {
                        path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.custom.address.geocode.longitude',
                    },
                    {
                        path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.calculatedAddress.geocode.latitude',
                    },
                    {
                        path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.calculatedAddress.geocode.longitude',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.SetServiceLocations',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/{serviceId}/locations',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __setServiceLocations;
}
exports.setServiceLocations = setServiceLocations;
/**
 * Adds a list of *pricing plan IDs*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/introduction) | [REST](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/plan-object))
 * to a service's `payment.pricingPlanIds` array.
 *
 *
 * The call doesn't validate whether the service's `payment.options.pricingPlan`
 * is set to `true`. If it's set to `false`, customers aren't able to pay
 * for their bookings using pricing plans. You can call *Update Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/update-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/update-service))
 * to change a service's supported payment methods.
 */
function enablePricingPlansForService(payload) {
    function __enablePricingPlansForService({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.EnablePricingPlansForService',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/{serviceId}/pricing-plans/add',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __enablePricingPlansForService;
}
exports.enablePricingPlansForService = enablePricingPlansForService;
/**
 * Removes a list of *pricing plan IDs*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/introduction) | [REST](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/plan-object))
 * from a service's `payment.pricingPlanIds` array.
 *
 *
 * If you remove all pricing plan IDs from `payment.pricingPlanIds` and the
 * service supports only payments by pricing plan, customers will no longer be
 * able to book the service, as they will have no payment options available.
 */
function disablePricingPlansForService(payload) {
    function __disablePricingPlansForService({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.DisablePricingPlansForService',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/{serviceId}/pricing-plans/remove',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __disablePricingPlansForService;
}
exports.disablePricingPlansForService = disablePricingPlansForService;
/**
 * Sets a new active slug for the service.
 *
 *
 * The call fails if at least one of these conditions is met:
 * - The slug doesn't adheres to the supported format.
 * - Another service is currently using the slug.
 * - Another service has used the slug in the past.
 */
function setCustomSlug(payload) {
    function __setCustomSlug({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.SetCustomSlug',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/{serviceId}/slugs/custom',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'slug.createdDate' },
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __setCustomSlug;
}
exports.setCustomSlug = setCustomSlug;
/**
 * Checks whether a custom slug is validate for the service.
 *
 *
 * The checks include:
 * - The slug adheres to the supported format.
 * - No other service is currently using the slug.
 * - No other service has used the slug in the past.
 *
 * The call fails if at least one of the checks fails.
 */
function validateSlug(payload) {
    function __validateSlug({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.ValidateSlug',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/slugs/validate',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __validateSlug;
}
exports.validateSlug = validateSlug;
/**
 * Clones a service.
 *
 *
 * ## Connected entities
 *
 * By default, not all entities connected to the service are cloned.
 *
 * ### Schedule
 *
 * Wix Bookings automatically creates a new active *schedule*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
 * for the cloned service. If Wix Bookings can't create this schedule, the
 * Clone Service* call fails.
 *
 * - __For appointment-based services__: Future appointments aren't added to the
 * cloned service's schedule. Use the *Events API*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
 * to add them as needed.
 * - __For classes and courses__: Future one-time events aren't added to the
 * cloned service's schedule, while future recurring events are added
 * asynchronously. The *Clone Service* call always succeeds, whether or not
 * recurring events are added.
 * If the response includes `RECURRING_EVENTS` in the `errors` array, it means the
 * cloned service doesn't have future recurring events, even though the original
 * service does. You can either delete the cloned service and try again or use
 * the *Events API*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
 * to add missing events to the schedule.
 *
 * Wix Bookings never adds past events to the cloned service's schedule.
 *
 * ### Service options and variants
 *
 * If the original service has *variants*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)),
 * they're cloned asynchronously. The *Clone Service* call always succeeds,
 * regardless of whether variants were cloned.
 *
 * If the response includes `OPTIONS_AND_VARIANTS` in the `errors` array, the cloned
 * service doesn't have variants, even though the original service does. You can
 * delete the cloned service and call *Clone Service* again, or use the
 * _Service Options And Variants API_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction))
 * to add variants.
 *
 * ### Booking form
 *
 * The original service's booking form isn't cloned, whether it's
 * the default or a custom booking form.
 *
 * ### Pricing plans
 *
 * If the original service's accepts payments via *pricing plans*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/pricing-plans/pricing-plans/plans/introduction)),
 * the cloned service's `payment.options.pricingPlan` is also set to `true`. To
 * accept specific pricing plans, call *Enable Pricing Plans For Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/enable-pricing-plans-for-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/enable-pricing-plans-for-service)),
 * after cloning the service. If the original service accepts only
 * pricing plan payments and you don't call *Enable Pricing Plans For Service*
 * after cloning the service, customers will be unable to book the service.
 */
function cloneService(payload) {
    function __cloneService({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.services.v2.service',
            method: 'POST',
            methodFqn: 'wix.bookings.services.v2.ServicesService.CloneService',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsServicesV2ServicesServiceUrl({
                protoPath: '/v2/services/clone',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'service.createdDate' },
                        { path: 'service.updatedDate' },
                        { path: 'service.media.items.image.urlExpirationDate' },
                        { path: 'service.media.mainMedia.image.urlExpirationDate' },
                        { path: 'service.media.coverMedia.image.urlExpirationDate' },
                        { path: 'service.bookingPolicy.createdDate' },
                        { path: 'service.bookingPolicy.updatedDate' },
                        { path: 'service.schedule.firstSessionStart' },
                        { path: 'service.schedule.lastSessionEnd' },
                        {
                            path: 'service.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        {
                            path: 'service.staffMemberDetails.staffMembers.mainMedia.image.urlExpirationDate',
                        },
                        { path: 'service.supportedSlugs.createdDate' },
                        { path: 'service.mainSlug.createdDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'service.locations.business.address.geocode.latitude' },
                        { path: 'service.locations.business.address.geocode.longitude' },
                        { path: 'service.locations.custom.address.geocode.latitude' },
                        { path: 'service.locations.custom.address.geocode.longitude' },
                        { path: 'service.locations.calculatedAddress.geocode.latitude' },
                        { path: 'service.locations.calculatedAddress.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __cloneService;
}
exports.cloneService = cloneService;
//# sourceMappingURL=bookings-services-v2-service-services.http.js.map