"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchServices = exports.queryServices = exports.bulkDeleteServicesByFilter = exports.bulkDeleteServices = exports.deleteService = exports.bulkUpdateServicesByFilter = exports.bulkUpdateServices = exports.updateService = exports.getService = exports.createService = exports.ResolutionMethod = exports.PlacementType = exports.CrudType = exports.Event = exports.BenefitType = exports.ResourceNotificationEvent = exports.ResourceStatus = exports.SessionType = exports.Status = exports.CalendarType = exports.ConferenceType = exports.ScheduleStatus = exports.ApprovalStatus = exports.DayOfWeek = exports.LocationsLocationType = exports.LocationStatus = exports.LocationType = exports.RecurringIntervalType = exports.Transparency = exports.Day = exports.CategoryNotificationEvent = exports.CategoryStatus = exports.CloneErrors = exports.InvalidSlugError = exports.Action = exports.RequestedFields = exports.Mode = exports.AggregationType = exports.DateHistogramAggregationInterval = exports.NestedAggregationType = exports.ScalarType = exports.MissingValues = exports.SortDirection = exports.SortType = exports.SortOrder = exports.V2RequestedFields = exports.WebhookIdentityType = exports.LocationTypeEnumLocationType = exports.RateType = exports.ServiceType = void 0;
exports.cloneService = exports.validateSlug = exports.setCustomSlug = exports.disablePricingPlansForService = exports.enablePricingPlansForService = exports.setServiceLocations = exports.queryCategories = exports.queryLocations = exports.countServices = exports.queryBookingForms = exports.queryPolicies = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsServicesV2Service = __importStar(require("./bookings-services-v2-service-services.http.js"));
// @ts-ignore
const address_1 = require("@wix/sdk-runtime/transformations/address");
const address_2 = require("@wix/sdk-runtime/transformations/address");
const image_1 = require("@wix/sdk-runtime/transformations/image");
const image_2 = require("@wix/sdk-runtime/transformations/image");
const page_url_v2_1 = require("@wix/sdk-runtime/transformations/page-url-v2");
const page_url_v2_2 = require("@wix/sdk-runtime/transformations/page-url-v2");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var ServiceType;
(function (ServiceType) {
    /** Appointment-based service. */
    ServiceType["APPOINTMENT"] = "APPOINTMENT";
    /** Class service. */
    ServiceType["CLASS"] = "CLASS";
    /** Course service. */
    ServiceType["COURSE"] = "COURSE";
})(ServiceType || (exports.ServiceType = ServiceType = {}));
var RateType;
(function (RateType) {
    /** Unknown rate type. */
    RateType["UNKNOWN_RATE_TYPE"] = "UNKNOWN_RATE_TYPE";
    /** The service has a fixed price. */
    RateType["FIXED"] = "FIXED";
    /** The service has a custom price, expressed as a price description. */
    RateType["CUSTOM"] = "CUSTOM";
    /** This service is offered with a set of different prices based on different terms. */
    RateType["VARIED"] = "VARIED";
    /** This service is offered free of charge. */
    RateType["NO_FEE"] = "NO_FEE";
})(RateType || (exports.RateType = RateType = {}));
var LocationTypeEnumLocationType;
(function (LocationTypeEnumLocationType) {
    LocationTypeEnumLocationType["UNKNOWN_LOCATION_TYPE"] = "UNKNOWN_LOCATION_TYPE";
    /**
     * Location set by the business that is not a standard business *location*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction)).
     */
    LocationTypeEnumLocationType["CUSTOM"] = "CUSTOM";
    /**
     * Business *location*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction)).
     */
    LocationTypeEnumLocationType["BUSINESS"] = "BUSINESS";
    /**
     * The customer specifies any address when booking. Available only for
     * appointment-based services.
     */
    LocationTypeEnumLocationType["CUSTOMER"] = "CUSTOMER";
})(LocationTypeEnumLocationType || (exports.LocationTypeEnumLocationType = LocationTypeEnumLocationType = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
var V2RequestedFields;
(function (V2RequestedFields) {
    /** Unknown requested field. */
    V2RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    /** When passed, `service.staff_members` is returned. */
    V2RequestedFields["STAFF_MEMBER_DETAILS"] = "STAFF_MEMBER_DETAILS";
    /** When passed, `service.service_resources.resource_type.name` is returned. */
    V2RequestedFields["RESOURCE_TYPE_DETAILS"] = "RESOURCE_TYPE_DETAILS";
})(V2RequestedFields || (exports.V2RequestedFields = V2RequestedFields = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var SortType;
(function (SortType) {
    SortType["COUNT"] = "COUNT";
    SortType["VALUE"] = "VALUE";
})(SortType || (exports.SortType = SortType = {}));
var SortDirection;
(function (SortDirection) {
    SortDirection["DESC"] = "DESC";
    SortDirection["ASC"] = "ASC";
})(SortDirection || (exports.SortDirection = SortDirection = {}));
var MissingValues;
(function (MissingValues) {
    MissingValues["EXCLUDE"] = "EXCLUDE";
    MissingValues["INCLUDE"] = "INCLUDE";
})(MissingValues || (exports.MissingValues = MissingValues = {}));
var ScalarType;
(function (ScalarType) {
    ScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    ScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    ScalarType["MIN"] = "MIN";
    ScalarType["MAX"] = "MAX";
})(ScalarType || (exports.ScalarType = ScalarType = {}));
var NestedAggregationType;
(function (NestedAggregationType) {
    NestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    NestedAggregationType["VALUE"] = "VALUE";
    NestedAggregationType["RANGE"] = "RANGE";
    NestedAggregationType["SCALAR"] = "SCALAR";
    NestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationType || (exports.NestedAggregationType = NestedAggregationType = {}));
var DateHistogramAggregationInterval;
(function (DateHistogramAggregationInterval) {
    /** Unknown interval. */
    DateHistogramAggregationInterval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval. */
    DateHistogramAggregationInterval["YEAR"] = "YEAR";
    /** Monthly interval. */
    DateHistogramAggregationInterval["MONTH"] = "MONTH";
    /** Weekly interval. */
    DateHistogramAggregationInterval["WEEK"] = "WEEK";
    /** Daily interval. */
    DateHistogramAggregationInterval["DAY"] = "DAY";
    /** Hourly interval. */
    DateHistogramAggregationInterval["HOUR"] = "HOUR";
    /** Minute interval. */
    DateHistogramAggregationInterval["MINUTE"] = "MINUTE";
    /** Second interval. */
    DateHistogramAggregationInterval["SECOND"] = "SECOND";
})(DateHistogramAggregationInterval || (exports.DateHistogramAggregationInterval = DateHistogramAggregationInterval = {}));
var AggregationType;
(function (AggregationType) {
    AggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    AggregationType["VALUE"] = "VALUE";
    AggregationType["RANGE"] = "RANGE";
    AggregationType["SCALAR"] = "SCALAR";
    AggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    AggregationType["NESTED"] = "NESTED";
})(AggregationType || (exports.AggregationType = AggregationType = {}));
var Mode;
(function (Mode) {
    /** Any */
    Mode["OR"] = "OR";
    /** All */
    Mode["AND"] = "AND";
})(Mode || (exports.Mode = Mode = {}));
var RequestedFields;
(function (RequestedFields) {
    /** Unknown requested conditional field. */
    RequestedFields["UNKNOWN_REQUESTED_FIELD"] = "UNKNOWN_REQUESTED_FIELD";
    /** Whether to return the site's default booking form. */
    RequestedFields["DEFAULT_BOOKING_FORM"] = "DEFAULT_BOOKING_FORM";
})(RequestedFields || (exports.RequestedFields = RequestedFields = {}));
var Action;
(function (Action) {
    Action["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
    /** Retain all future sessions at their current location. This is the default. */
    Action["KEEP_AT_CURRENT_LOCATION"] = "KEEP_AT_CURRENT_LOCATION";
    /** Move future events to a new location. */
    Action["MOVE_TO_LOCATION"] = "MOVE_TO_LOCATION";
    /**
     * Cancel all future events at the removed location.
     * Currently not supported.
     */
    Action["DELETE"] = "DELETE";
})(Action || (exports.Action = Action = {}));
var InvalidSlugError;
(function (InvalidSlugError) {
    /** Unknown slug error. */
    InvalidSlugError["UNKNOWN_SLUG_ERROR"] = "UNKNOWN_SLUG_ERROR";
    /** Slug contains illegal characters. */
    InvalidSlugError["SLUG_CONTAINS_ILLEGAL_CHARACTERS"] = "SLUG_CONTAINS_ILLEGAL_CHARACTERS";
    /** Slug is already associated with another service. */
    InvalidSlugError["SLUG_ALREADY_EXISTS"] = "SLUG_ALREADY_EXISTS";
})(InvalidSlugError || (exports.InvalidSlugError = InvalidSlugError = {}));
var CloneErrors;
(function (CloneErrors) {
    /**
     * Failed to clone the original service's *options and variants*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     */
    CloneErrors["OPTIONS_AND_VARIANTS"] = "OPTIONS_AND_VARIANTS";
    /** Failed to clone the original service's *booking form*. */
    CloneErrors["FORM"] = "FORM";
})(CloneErrors || (exports.CloneErrors = CloneErrors = {}));
var CategoryStatus;
(function (CategoryStatus) {
    /** The category was created. */
    CategoryStatus["CREATED"] = "CREATED";
    /** The category was deleted. */
    CategoryStatus["DELETED"] = "DELETED";
})(CategoryStatus || (exports.CategoryStatus = CategoryStatus = {}));
var CategoryNotificationEvent;
(function (CategoryNotificationEvent) {
    /** Category was updated. */
    CategoryNotificationEvent["Updated"] = "Updated";
    /** Category was deleted. */
    CategoryNotificationEvent["Deleted"] = "Deleted";
    /** Category was created. */
    CategoryNotificationEvent["Created"] = "Created";
})(CategoryNotificationEvent || (exports.CategoryNotificationEvent = CategoryNotificationEvent = {}));
var Day;
(function (Day) {
    /** Undefined. */
    Day["UNDEFINED"] = "UNDEFINED";
    /** Monday. */
    Day["MON"] = "MON";
    /** Tuesday. */
    Day["TUE"] = "TUE";
    /** Wednesday. */
    Day["WED"] = "WED";
    /** Thursday. */
    Day["THU"] = "THU";
    /** Friday. */
    Day["FRI"] = "FRI";
    /** Saturday. */
    Day["SAT"] = "SAT";
    /** Sunday. */
    Day["SUN"] = "SUN";
})(Day || (exports.Day = Day = {}));
var Transparency;
(function (Transparency) {
    Transparency["UNDEFINED"] = "UNDEFINED";
    /** The schedule can have available slots during the linked schedule's sessions. */
    Transparency["FREE"] = "FREE";
    /** The schedule can't have available slots during the linked schedule's sessions. */
    Transparency["BUSY"] = "BUSY";
})(Transparency || (exports.Transparency = Transparency = {}));
var RecurringIntervalType;
(function (RecurringIntervalType) {
    /** The default value. Sessions for this interval will be of type EVENT. */
    RecurringIntervalType["UNDEFINED"] = "UNDEFINED";
    /** A recurring interval of events. */
    RecurringIntervalType["EVENT"] = "EVENT";
    /** Deprecated. */
    RecurringIntervalType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** A recurring interval for availability. */
    RecurringIntervalType["AVAILABILITY"] = "AVAILABILITY";
})(RecurringIntervalType || (exports.RecurringIntervalType = RecurringIntervalType = {}));
var LocationType;
(function (LocationType) {
    LocationType["UNDEFINED"] = "UNDEFINED";
    LocationType["OWNER_BUSINESS"] = "OWNER_BUSINESS";
    LocationType["OWNER_CUSTOM"] = "OWNER_CUSTOM";
    LocationType["CUSTOM"] = "CUSTOM";
})(LocationType || (exports.LocationType = LocationType = {}));
/** For future use */
var LocationStatus;
(function (LocationStatus) {
    LocationStatus["ACTIVE"] = "ACTIVE";
    LocationStatus["INACTIVE"] = "INACTIVE";
})(LocationStatus || (exports.LocationStatus = LocationStatus = {}));
/** For future use */
var LocationsLocationType;
(function (LocationsLocationType) {
    LocationsLocationType["UNKNOWN"] = "UNKNOWN";
    LocationsLocationType["BRANCH"] = "BRANCH";
    LocationsLocationType["OFFICES"] = "OFFICES";
    LocationsLocationType["RECEPTION"] = "RECEPTION";
    LocationsLocationType["HEADQUARTERS"] = "HEADQUARTERS";
    LocationsLocationType["INVENTORY"] = "INVENTORY";
})(LocationsLocationType || (exports.LocationsLocationType = LocationsLocationType = {}));
/** Enumerates the days of the week. */
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["MONDAY"] = "MONDAY";
    DayOfWeek["TUESDAY"] = "TUESDAY";
    DayOfWeek["WEDNESDAY"] = "WEDNESDAY";
    DayOfWeek["THURSDAY"] = "THURSDAY";
    DayOfWeek["FRIDAY"] = "FRIDAY";
    DayOfWeek["SATURDAY"] = "SATURDAY";
    DayOfWeek["SUNDAY"] = "SUNDAY";
})(DayOfWeek || (exports.DayOfWeek = DayOfWeek = {}));
var ApprovalStatus;
(function (ApprovalStatus) {
    /** Default. */
    ApprovalStatus["UNDEFINED"] = "UNDEFINED";
    /** Pending business approval. */
    ApprovalStatus["PENDING"] = "PENDING";
    /** Approved by the business. */
    ApprovalStatus["APPROVED"] = "APPROVED";
    /** Declined by the business. */
    ApprovalStatus["DECLINED"] = "DECLINED";
})(ApprovalStatus || (exports.ApprovalStatus = ApprovalStatus = {}));
var ScheduleStatus;
(function (ScheduleStatus) {
    /** Undefined schedule status. */
    ScheduleStatus["UNDEFINED"] = "UNDEFINED";
    /** The schedule was created. */
    ScheduleStatus["CREATED"] = "CREATED";
    /** The schedule was cancelled. */
    ScheduleStatus["CANCELLED"] = "CANCELLED";
})(ScheduleStatus || (exports.ScheduleStatus = ScheduleStatus = {}));
var ConferenceType;
(function (ConferenceType) {
    /** Undefined conference type. */
    ConferenceType["UNDEFINED"] = "UNDEFINED";
    /** API-generated online meeting. */
    ConferenceType["ONLINE_MEETING_PROVIDER"] = "ONLINE_MEETING_PROVIDER";
    /** User-defined meeting. */
    ConferenceType["CUSTOM"] = "CUSTOM";
})(ConferenceType || (exports.ConferenceType = ConferenceType = {}));
var CalendarType;
(function (CalendarType) {
    /** There is no information about the external calendar type. */
    CalendarType["UNDEFINED"] = "UNDEFINED";
    /** [Google Calendar](https://developers.google.com/calendar/api/guides/overview). */
    CalendarType["GOOGLE"] = "GOOGLE";
    /** Apple iCalendar. */
    CalendarType["I_CAL"] = "I_CAL";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OUTLOOK"] = "OUTLOOK";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OFFICE_365"] = "OFFICE_365";
    /** Microsoft Calendar. For example, Office 365 calendar or Outlook calendar. */
    CalendarType["MICROSOFT"] = "MICROSOFT";
    /** A different type of external calendar, not listed here. */
    CalendarType["OTHER"] = "OTHER";
})(CalendarType || (exports.CalendarType = CalendarType = {}));
var Status;
(function (Status) {
    /** Undefined status. */
    Status["UNDEFINED"] = "UNDEFINED";
    /** Session is confirmed. Default status. */
    Status["CONFIRMED"] = "CONFIRMED";
    /**
     * Session is cancelled.
     * A cancelled session can be the cancellation of a recurring session that should no longer be displayed or a deleted single session.
     * The ListSessions returns cancelled sessions only if 'includeDelete' flag is set to true.
     */
    Status["CANCELLED"] = "CANCELLED";
})(Status || (exports.Status = Status = {}));
var SessionType;
(function (SessionType) {
    SessionType["UNDEFINED"] = "UNDEFINED";
    /**
     * Creates an event on the calendar for the owner of the schedule that the session belongs to.
     * Default type.
     */
    SessionType["EVENT"] = "EVENT";
    /** Represents a resource's available working hours. */
    SessionType["WORKING_HOURS"] = "WORKING_HOURS";
    /** Deprecated. Please use WORKING_HOURS. */
    SessionType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** Deprecated. Represents a resource's available hours. Please use WORKING_HOURS. */
    SessionType["AVAILABILITY"] = "AVAILABILITY";
})(SessionType || (exports.SessionType = SessionType = {}));
var ResourceStatus;
(function (ResourceStatus) {
    /** Undefined resource status. */
    ResourceStatus["UNDEFINED"] = "UNDEFINED";
    /** The resource was created. */
    ResourceStatus["CREATED"] = "CREATED";
    /** The resource was deleted. */
    ResourceStatus["DELETED"] = "DELETED";
    /** The resource was updated. */
    ResourceStatus["UPDATED"] = "UPDATED";
})(ResourceStatus || (exports.ResourceStatus = ResourceStatus = {}));
var ResourceNotificationEvent;
(function (ResourceNotificationEvent) {
    /** Undefined resource event. */
    ResourceNotificationEvent["UNDEFINED"] = "UNDEFINED";
    /** The resource was updated. */
    ResourceNotificationEvent["Updated"] = "Updated";
    /** The resource was deleted. */
    ResourceNotificationEvent["Deleted"] = "Deleted";
    /** The resource was created. */
    ResourceNotificationEvent["Created"] = "Created";
    /** The schedule was updated. */
    ResourceNotificationEvent["Schedule_Updated"] = "Schedule_Updated";
})(ResourceNotificationEvent || (exports.ResourceNotificationEvent = ResourceNotificationEvent = {}));
var BenefitType;
(function (BenefitType) {
    /** Should never be used */
    BenefitType["UNDEFINED"] = "UNDEFINED";
    /** Limited benefit type */
    BenefitType["LIMITED"] = "LIMITED";
    /** Unlimited benefit type */
    BenefitType["UNLIMITED"] = "UNLIMITED";
})(BenefitType || (exports.BenefitType = BenefitType = {}));
var Event;
(function (Event) {
    Event["Updated"] = "Updated";
    Event["Deleted"] = "Deleted";
    Event["Created"] = "Created";
})(Event || (exports.Event = Event = {}));
var CrudType;
(function (CrudType) {
    CrudType["INVALID_CRUD_TYPE"] = "INVALID_CRUD_TYPE";
    CrudType["CREATE"] = "CREATE";
    CrudType["UPDATE"] = "UPDATE";
    CrudType["DELETE"] = "DELETE";
    /** Unfortunately this action is used by hibernate save in wix-war */
    CrudType["CREATE_OR_UPDATE"] = "CREATE_OR_UPDATE";
})(CrudType || (exports.CrudType = CrudType = {}));
/** Where the extra text should be displayed: before, after or instead of the actual address. */
var PlacementType;
(function (PlacementType) {
    PlacementType["BEFORE"] = "BEFORE";
    PlacementType["AFTER"] = "AFTER";
    PlacementType["REPLACE"] = "REPLACE";
})(PlacementType || (exports.PlacementType = PlacementType = {}));
var ResolutionMethod;
(function (ResolutionMethod) {
    ResolutionMethod["QUERY_PARAM"] = "QUERY_PARAM";
    ResolutionMethod["SUBDOMAIN"] = "SUBDOMAIN";
    ResolutionMethod["SUBDIRECTORY"] = "SUBDIRECTORY";
})(ResolutionMethod || (exports.ResolutionMethod = ResolutionMethod = {}));
/**
 * Creates a service.
 *
 *
 * ## Required fields
 *
 * When creating a service you must specify the following fields:
 * - `type`
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-types) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-types)):
 * Whether it's an appointment-based service, class, or course.
 * - `name`: Service name that's displayed to customers.
 * - `onlineBooking`:
 * Settings determining whether customers can book online, whether the business
 * must manually confirm bookings, and whether customers can request to book an
 * appointment time slot that already has a booking request awaiting business
 * confirmation.
 * - `payment`
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-payments) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-payments)):
 * How customers can pay when signing up for the service.
 *
 * ### Session durations
 *
 * Depending on which type of service you're creating, you may also need to specify
 * supported session durations.
 *
 * __Classes and courses__
 *
 * Don't specify `schedule.availabilityConstraints.sessionDurations`.
 *
 * __Appointment-based services without varied pricing based on session length__
 *
 * Specify the single supported session duration in the
 * `schedule.availabilityConstraints.sessionDurations` array.
 *
 * __Appointment-based services with varied pricing based on session length__
 *
 * - Specify all supported session durations in `schedule.availabilityConstraints.sessionDurations`.
 * - Note that Wix Bookings doesn't display these values to customers and
 * ignores them in pricing and availability calculations. Instead session
 * durations are retrieved from the relevant service *variants*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
 * - It is mandatory to specify `schedule.availabilityConstraints.sessionDurations`,
 * even though these values are ignored.
 * @param service - Service to create.
 * @public
 * @requiredField service
 * @permissionId BOOKINGS.SERVICES_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created service.
 * @fqn wix.bookings.services.v2.ServicesService.CreateService
 */
async function createService(service) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ service: service }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'service.media.items.image' },
                { path: 'service.media.mainMedia.image' },
                { path: 'service.media.coverMedia.image' },
                { path: 'service.staffMembers.mainMedia.image' },
                { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
            ],
        },
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [
                { path: 'service.locations.calculatedAddress' },
                { path: 'service.locations.business.address' },
                { path: 'service.locations.custom.address' },
            ],
        },
        {
            transformFn: page_url_v2_1.transformSDKPageURLV2ToRESTPageURLV2,
            paths: [
                { path: 'service.urls.servicePage' },
                { path: 'service.urls.bookingPage' },
                { path: 'service.urls.calendarPage' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixBookingsServicesV2Service.createService(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]))?.service;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { service: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['service']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createService = createService;
/**
 * Retrieves a service.
 * @param serviceId - ID of the service to retrieve.
 * @public
 * @requiredField serviceId
 * @permissionId BOOKINGS.SERVICES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved service.
 * @fqn wix.bookings.services.v2.ServicesService.GetService
 */
async function getService(serviceId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        serviceId: serviceId,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.getService(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]))?.service;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { serviceId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['serviceId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getService = getService;
/**
 * Updates a service.
 *
 *
 * Each time the service is updated, `revision` increments by 1. You must
 * include the number of the existing revision when updating the service.
 * This ensures you're working with the latest service information and
 * prevents unintended overwrites.
 *
 * ## Session durations
 *
 * Specify `schedule.availabilityConstraints.sessionDurations`
 * only if you want to update it for appointment-based services without varied
 * pricing based on session length. Don't specify `schedule.availabilityConstraints.sessionDurations`
 * for all other appointment-based services, classes, or courses. See *Create Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/create-service#session-durations) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/create-service#session-durations))
 * for more details.
 * @param _id - Service ID.
 * @public
 * @requiredField _id
 * @requiredField service
 * @requiredField service.revision
 * @permissionId BOOKINGS.SERVICES_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated service.
 * @fqn wix.bookings.services.v2.ServicesService.UpdateService
 */
async function updateService(_id, service) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ service: { ...service, id: _id } }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'service.media.items.image' },
                { path: 'service.media.mainMedia.image' },
                { path: 'service.media.coverMedia.image' },
                { path: 'service.staffMembers.mainMedia.image' },
                { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
            ],
        },
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [
                { path: 'service.locations.calculatedAddress' },
                { path: 'service.locations.business.address' },
                { path: 'service.locations.custom.address' },
            ],
        },
        {
            transformFn: page_url_v2_1.transformSDKPageURLV2ToRESTPageURLV2,
            paths: [
                { path: 'service.urls.servicePage' },
                { path: 'service.urls.bookingPage' },
                { path: 'service.urls.calendarPage' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixBookingsServicesV2Service.updateService(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]))?.service;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { service: '$[1]' },
            explicitPathsToArguments: { 'service.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'service']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateService = updateService;
/**
 * Updates up to 100 services.
 *
 *
 * See *Update Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/update-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/update-service))
 * for more details.
 *
 * The call succeeds even if one or more individual services can't be updated.
 * Information about failures is returned in `bulkActionMetadata`.
 * @public
 * @requiredField options.services.service
 * @requiredField options.services.service._id
 * @requiredField options.services.service.revision
 * @permissionId BOOKINGS.SERVICES_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.BulkUpdateServices
 */
async function bulkUpdateServices(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        services: options?.services,
        returnEntity: options?.returnEntity,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'services.service.media.items.image' },
                { path: 'services.service.media.mainMedia.image' },
                { path: 'services.service.media.coverMedia.image' },
                { path: 'services.service.staffMembers.mainMedia.image' },
                {
                    path: 'services.service.staffMemberDetails.staffMembers.mainMedia.image',
                },
            ],
        },
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [
                { path: 'services.service.locations.calculatedAddress' },
                { path: 'services.service.locations.business.address' },
                { path: 'services.service.locations.custom.address' },
            ],
        },
        {
            transformFn: page_url_v2_1.transformSDKPageURLV2ToRESTPageURLV2,
            paths: [
                { path: 'services.service.urls.servicePage' },
                { path: 'services.service.urls.bookingPage' },
                { path: 'services.service.urls.calendarPage' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixBookingsServicesV2Service.bulkUpdateServices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.media.items.image' },
                    { path: 'results.item.media.mainMedia.image' },
                    { path: 'results.item.media.coverMedia.image' },
                    { path: 'results.item.staffMembers.mainMedia.image' },
                    {
                        path: 'results.item.staffMemberDetails.staffMembers.mainMedia.image',
                    },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'results.item.locations.calculatedAddress' },
                    { path: 'results.item.locations.business.address' },
                    { path: 'results.item.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'results.item.urls.servicePage' },
                    { path: 'results.item.urls.bookingPage' },
                    { path: 'results.item.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                services: '$[0].services',
                returnEntity: '$[0].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkUpdateServices = bulkUpdateServices;
/**
 * Updates multiple services by filter.
 *
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering))
 * for more details.
 *
 * See *Update Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/update-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/update-service))
 * for more details about updating a service.
 *
 * The call succeeds even if one or more individual services can't be updated.
 * Information about failures is returned in `bulkActionMetadata`.
 * @param filter - Filter to identify the services to update.
 * @public
 * @requiredField filter
 * @requiredField options
 * @requiredField options.service
 * @permissionId BOOKINGS.SERVICES_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.BulkUpdateServicesByFilter
 */
async function bulkUpdateServicesByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: filter,
        service: options?.service,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'service.media.items.image' },
                { path: 'service.media.mainMedia.image' },
                { path: 'service.media.coverMedia.image' },
                { path: 'service.staffMembers.mainMedia.image' },
                { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
            ],
        },
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [
                { path: 'service.locations.calculatedAddress' },
                { path: 'service.locations.business.address' },
                { path: 'service.locations.custom.address' },
            ],
        },
        {
            transformFn: page_url_v2_1.transformSDKPageURLV2ToRESTPageURLV2,
            paths: [
                { path: 'service.urls.servicePage' },
                { path: 'service.urls.bookingPage' },
                { path: 'service.urls.calendarPage' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixBookingsServicesV2Service.bulkUpdateServicesByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0]', service: '$[1].service' },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkUpdateServicesByFilter = bulkUpdateServicesByFilter;
/**
 * Deletes a service.
 *
 *
 * Specify `{"preserveFutureSessionsWithParticipants": true}` to retain all
 * future sessions for the service. By default, all future sessions are canceled.
 * @param serviceId - ID of the service to delete.
 * @public
 * @requiredField serviceId
 * @param options - Allows you to configure how to handle the deleted service's future sessions and how to notify the sessions participants.
 * @permissionId BOOKINGS.SERVICES_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.DeleteService
 */
async function deleteService(serviceId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        serviceId: serviceId,
        preserveFutureSessionsWithParticipants: options?.preserveFutureSessionsWithParticipants,
        participantNotification: options?.participantNotification,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.deleteService(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                serviceId: '$[0]',
                preserveFutureSessionsWithParticipants: '$[1].preserveFutureSessionsWithParticipants',
                participantNotification: '$[1].participantNotification',
            },
            singleArgumentUnchanged: false,
        }, ['serviceId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteService = deleteService;
/**
 * Deletes multiple services.
 *
 *
 * See *Delete Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/delete-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/delete-service))
 * for more details about deleting a service.
 *
 * The call succeeds even if one or more individual services can't be deleted.
 * Information about failures is returned in `bulkActionMetadata`.
 * @param ids - IDs of the services to delete.
 * @public
 * @requiredField ids
 * @permissionId BOOKINGS.SERVICES_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.BulkDeleteServices
 */
async function bulkDeleteServices(ids, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        ids: ids,
        preserveFutureSessionsWithParticipants: options?.preserveFutureSessionsWithParticipants,
        participantNotification: options?.participantNotification,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.bulkDeleteServices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'results.item.media.items.image' },
                    { path: 'results.item.media.mainMedia.image' },
                    { path: 'results.item.media.coverMedia.image' },
                    { path: 'results.item.staffMembers.mainMedia.image' },
                    {
                        path: 'results.item.staffMemberDetails.staffMembers.mainMedia.image',
                    },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'results.item.locations.calculatedAddress' },
                    { path: 'results.item.locations.business.address' },
                    { path: 'results.item.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'results.item.urls.servicePage' },
                    { path: 'results.item.urls.bookingPage' },
                    { path: 'results.item.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                ids: '$[0]',
                preserveFutureSessionsWithParticipants: '$[1].preserveFutureSessionsWithParticipants',
                participantNotification: '$[1].participantNotification',
            },
            singleArgumentUnchanged: false,
        }, ['ids', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkDeleteServices = bulkDeleteServices;
/**
 * Deletes multiple services by filter.
 *
 *
 * See *Delete Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/delete-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/delete-service))
 * for more details about deleting a service.
 *
 * The call succeeds even if one or more individual services can't be deleted.
 * Information about failures is returned in `bulkActionMetadata`.
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering))
 * for more details.
 *
 * To learn about working with filters in general, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
 * @param filter - Filter to identify the services that need to be deleted.
 * @public
 * @requiredField filter
 * @permissionId BOOKINGS.SERVICES_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.BulkDeleteServicesByFilter
 */
async function bulkDeleteServicesByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: filter,
        preserveFutureSessionsWithParticipants: options?.preserveFutureSessionsWithParticipants,
        participantNotification: options?.participantNotification,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.bulkDeleteServicesByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                preserveFutureSessionsWithParticipants: '$[1].preserveFutureSessionsWithParticipants',
                participantNotification: '$[1].participantNotification',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkDeleteServicesByFilter = bulkDeleteServicesByFilter;
/**
 * Creates a query to retrieve a list of `service` objects.
 *
 * The `queryServices()` function builds a query to retrieve a list of `service` objects and returns a `ServicesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/services-query-builder/find) function.
 *
 * You can refine the query by chaining `ServicesQueryBuilder` functions onto the query. `ServicesQueryBuilder` functions enable you to sort, filter, and control the results that `queryServices()` returns.
 *
 * `queryServices()` runs with the following `ServicesQueryBuilder` defaults that you can override:
 *
 * + `limit` is `100`.
 * + Sorted by `createdDate` in ascending order.
 *
 * The functions that are chained to `queryServices()` are applied in the order they are called. For example, if you apply `ascending("category.name")` and then `ascending("name")`, the results are sorted first by `category.name`, and then, if there are multiple results with the same `category.name`, the items are sorted by `name`.
 *
 * The following `ServicesQueryBuilder` functions are supported for the `queryServices()` function. For a full description of the `service` object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/services-query-result/items) property in `ServicesQueryResult`.
 * @public
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.SERVICES_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.services.v2.ServicesService.QueryServices
 */
function queryServices(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsServicesV2Service.queryServices({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(data, [
                {
                    transformFn: image_2.transformRESTImageToSDKImage,
                    paths: [
                        { path: 'services.media.items.image' },
                        { path: 'services.media.mainMedia.image' },
                        { path: 'services.media.coverMedia.image' },
                        { path: 'services.staffMembers.mainMedia.image' },
                        {
                            path: 'services.staffMemberDetails.staffMembers.mainMedia.image',
                        },
                    ],
                },
                {
                    transformFn: address_2.transformRESTAddressToSDKAddress,
                    paths: [
                        { path: 'services.locations.calculatedAddress' },
                        { path: 'services.locations.business.address' },
                        { path: 'services.locations.custom.address' },
                    ],
                },
                {
                    transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                    paths: [
                        { path: 'services.urls.servicePage' },
                        { path: 'services.urls.bookingPage' },
                        { path: 'services.urls.calendarPage' },
                    ],
                },
            ]));
            return {
                items: transformedData?.services,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'OFFSET',
        transformationPaths: {},
    });
}
exports.queryServices = queryServices;
/**
 * Retrieves a list of up to 100 services, given the provided filtering, paging,
 * and sorting.
 *
 *
 * ## Defaults
 *
 * Search Services has the following default settings, which you can override:
 * + Sorted by `createdDate` in ascending order.
 * + `paging.limit` set to `100`.
 * + `paging.offset` set to `0`.
 *
 * ## Filters
 *
 * When using filters for dates, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting))
 * for a complete list of supported filters and sorting options.
 *
 * ## See also
 *
 * To learn about working with *Search* methods, see
 * _API Query Language_
 * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language))
 * and *Sorting and Paging*
 * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language#the-sort-array) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging)).
 * @param search - WQL, search or aggregation expression.
 * @public
 * @documentationMaturity preview
 * @requiredField search
 * @permissionId BOOKINGS.SERVICES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.services.v2.ServicesService.SearchServices
 */
async function searchServices(search) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ search: search });
    const reqOpts = ambassadorWixBookingsServicesV2Service.searchServices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'services.media.items.image' },
                    { path: 'services.media.mainMedia.image' },
                    { path: 'services.media.coverMedia.image' },
                    { path: 'services.staffMembers.mainMedia.image' },
                    {
                        path: 'services.staffMemberDetails.staffMembers.mainMedia.image',
                    },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'services.locations.calculatedAddress' },
                    { path: 'services.locations.business.address' },
                    { path: 'services.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'services.urls.servicePage' },
                    { path: 'services.urls.bookingPage' },
                    { path: 'services.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { search: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['search']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.searchServices = searchServices;
/**
 * Retrieves a list of up to 100 *booking policies*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policies/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/introduction)),
 * and information about the services that are connected to them,
 * given the provided filtering, paging, and sorting.
 *
 * ## Defaults
 *
 * Query Policies has the following default settings, which you can override:
 *
 * + Sorted by `id` in ascending order.
 * + `cursorPaging.limit` set to `100`.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to **Booking Policies API: Supported Filters**
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/supported-filters)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## Returned services
 *
 * If a booking policy is connected to more than 5 services, only a subset of
 * those services is returned. The `bookingPolicies.totalServiceCount` values
 * indicate the total number of services linked to each policy. You can call *Search Services*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/search-services) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/search-services))
 * and specify the relevant policy ID in the filter to retrieve all services
 * connected to the booking policy.
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @param query - Information about filters, paging, and sorting. See the article about
 * booking policy filters
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/supported-filters))
 * for all supported filters and sorting options.
 * @public
 * @documentationMaturity preview
 * @requiredField query
 * @permissionId BOOKINGS.BOOKING_POLICY_READ
 * @permissionId BOOKINGS.SERVICES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.services.v2.ServicesService.QueryPolicies
 */
async function queryPolicies(query) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ query: query });
    const reqOpts = ambassadorWixBookingsServicesV2Service.queryPolicies(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'bookingPolicies.services.media.items.image' },
                    { path: 'bookingPolicies.services.media.mainMedia.image' },
                    { path: 'bookingPolicies.services.media.coverMedia.image' },
                    { path: 'bookingPolicies.services.staffMembers.mainMedia.image' },
                    {
                        path: 'bookingPolicies.services.staffMemberDetails.staffMembers.mainMedia.image',
                    },
                    { path: 'bookingPolicies.connectedServices.media.items.image' },
                    { path: 'bookingPolicies.connectedServices.media.mainMedia.image' },
                    {
                        path: 'bookingPolicies.connectedServices.media.coverMedia.image',
                    },
                    {
                        path: 'bookingPolicies.connectedServices.staffMembers.mainMedia.image',
                    },
                    {
                        path: 'bookingPolicies.connectedServices.staffMemberDetails.staffMembers.mainMedia.image',
                    },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'bookingPolicies.services.locations.calculatedAddress' },
                    { path: 'bookingPolicies.services.locations.business.address' },
                    { path: 'bookingPolicies.services.locations.custom.address' },
                    {
                        path: 'bookingPolicies.connectedServices.locations.calculatedAddress',
                    },
                    {
                        path: 'bookingPolicies.connectedServices.locations.business.address',
                    },
                    {
                        path: 'bookingPolicies.connectedServices.locations.custom.address',
                    },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'bookingPolicies.services.urls.servicePage' },
                    { path: 'bookingPolicies.services.urls.bookingPage' },
                    { path: 'bookingPolicies.services.urls.calendarPage' },
                    { path: 'bookingPolicies.connectedServices.urls.servicePage' },
                    { path: 'bookingPolicies.connectedServices.urls.bookingPage' },
                    { path: 'bookingPolicies.connectedServices.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { query: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['query']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryPolicies = queryPolicies;
/**
 * Retrieves a list of up to 100 *booking forms*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/forms/forms/introduction) | [REST](https://dev.wix.com/docs/rest/crm/forms/forms/introduction)),
 * and information about the services that are connected to them,
 * given the provided filtering, paging, and sorting.
 *
 *
 * ## Defaults
 *
 * Query Booking Forms has the following default settings, which you can override:
 *
 * + Sorted by `id` in ascending order.
 * + `cursorPaging.limit` set to `100`.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to **Forms API: Supported Filters**
 * ([REST](https://dev.wix.com/docs/rest/crm/forms/forms/introduction/supported-filters)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## Returned services
 *
 * If a booking policy is connected to more than 5 services, only a subset of
 * these service IDs and names is returned. The `bookingForms.totalServiceCount`
 * values indicate the total number of services linked to each form. You can call *Query Services*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/query-services) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/query-services))
 * and specify the relevant form ID in the filter to retrieve all services
 * connected to the booking form.
 *
 * ## Default booking forms
 *
 * By default, all Wix Bookings services use a standard booking form. To retrieve
 * a site's default booking form with Query Booking Forms, specify
 * `{"conditionalFields": ["DEFAULT_BOOKING_FORM"]}`.
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @param query - Information about filters, paging, and sorting. See the article about
 * form filters ([REST](https://dev.wix.com/docs/rest/crm/forms/forms/introduction/supported-filters))
 * for all supported filters and sorting options.
 * @public
 * @requiredField query
 * @permissionId BOOKINGS.SERVICE_BOOKING_FORMS_READ
 * @permissionId BOOKINGS.SERVICES_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.services.v2.ServicesService.QueryBookingForms
 */
async function queryBookingForms(query, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        query: query,
        conditionalFields: options?.conditionalFields,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.queryBookingForms(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                query: '$[0]',
                conditionalFields: '$[1].conditionalFields',
            },
            singleArgumentUnchanged: false,
        }, ['query', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryBookingForms = queryBookingForms;
/**
 * Counts how many services match the given filter.
 *
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering))
 * for more details.
 *
 * To learn about working with filters in general, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters)
 * @public
 * @permissionId BOOKINGS.SERVICES_COUNT
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.services.v2.ServicesService.CountServices
 */
async function countServices(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.countServices(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.countServices = countServices;
/**
 * Retrieves 3 separate lists of business, custom, and customer *locations*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction)),
 * given the provided filtering, and whether each location is connected to at
 * least one of the site's services.
 *
 *
 * ## Defaults
 *
 * Query Locations has the following default setting, which you can't override:
 * Sorted by `id` in ascending order.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to the `location` object
 * ([REST](https://dev.wix.com/docs/rest/business-management/locations/location-object)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.SERVICES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.services.v2.ServicesService.QueryLocations
 */
async function queryLocations(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.queryLocations(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'businessLocations.locations.calculatedAddress' },
                    { path: 'businessLocations.locations.business.address' },
                    { path: 'businessLocations.locations.custom.address' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryLocations = queryLocations;
/**
 * Retrieves a list of service *categories*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/categories/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/categories-v2/introduction)),
 * given the provided filtering.
 *
 *
 * ## Defaults
 *
 * Query Categories has the following default setting, which you can't override:
 * Sorted by `id` in ascending order.
 *
 * ## Filters
 *
 * For a complete list of supported filters, refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/filtering-and-sorting#filtering)).
 *
 * When using date filters, you must use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * ## See also
 *
 * To learn about working with *Query* endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)
 * and [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.SERVICES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.services.v2.ServicesService.QueryCategories
 */
async function queryCategories(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.queryCategories(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryCategories = queryCategories;
/**
 * Replaces the list of the *locations*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction))
 * where the business offers the service.
 *
 *
 * ## Consequences for customers
 *
 * Removing a service location may impact existing sessions and their
 * participants. If you remove at least one service location, you must
 * specify `removedLocationSessionsAction` to indicate what happens to all
 * future sessions scheduled at this location.
 *
 * - **Keep existing location**: If you want to retain future sessions at their
 * originally scheduled location, specify
 * `{"removedLocationSessionsAction.action": "KEEP_AT_CURRENT_LOCATION"}`.
 * This ensures nothing changes for the customer, but the business must be
 * able to provide access to the removed location in the future.
 * - **Update location**: If you want to update the location for future sessions
 * scheduled at the removed location, specify
 * `{"removedLocationSessionsAction.action": "MOVE_TO_LOCATION"}` and
 * `moveToLocationOptions.newLocation`.
 *
 * You can't mix and match to keep some sessions at the previous location while
 * moving other sessions to an updated location.
 *
 * Past session details aren't changed, no matter which option you choose for
 * future sessions.
 *
 * Future sessions scheduled for a location defined by the customer are also not
 * updated.
 *
 * ## Specify location details
 *
 * Depending on whether the new or updated location is a business or custom location,
 * you need to specify different fields.
 *
 * - **Business location**: Specify the relevant *location ID*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction))
 * in `locations.business.id`.
 * - **Custom location**: Specify the complete address object as
 * `locations.custom.address`.
 *
 * ## Participant notifications
 *
 * You can specify a `participantNotification.message` that's immediately send
 * to all customers who had booked at a changed location. Ensure
 * `participantNotification.notifyParticipants` is set to `true` to send the
 * message.
 * @param serviceId - ID of the service.
 * @param locations - List of locations replacing existing service locations. Omitting an existing location removes it from the service. Specify `removedLocationSessionsAction` to determine the handling of future sessions scheduled at that location.
 * @public
 * @documentationMaturity preview
 * @requiredField locations
 * @requiredField serviceId
 * @permissionId BOOKINGS.SERVICES_LOCATIONS_SET
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.SetServiceLocations
 */
async function setServiceLocations(serviceId, locations, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        serviceId: serviceId,
        locations: locations,
        removedLocationSessionsAction: options?.removedLocationSessionsAction,
        participantNotification: options?.participantNotification,
    }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [
                { path: 'locations.calculatedAddress' },
                { path: 'locations.business.address' },
                { path: 'locations.custom.address' },
                {
                    path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.calculatedAddress',
                },
                {
                    path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.business.address',
                },
                {
                    path: 'removedLocationSessionsAction.moveToLocationOptions.newLocation.custom.address',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixBookingsServicesV2Service.setServiceLocations(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                serviceId: '$[0]',
                locations: '$[1]',
                removedLocationSessionsAction: '$[2].removedLocationSessionsAction',
                participantNotification: '$[2].participantNotification',
            },
            singleArgumentUnchanged: false,
        }, ['serviceId', 'locations', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.setServiceLocations = setServiceLocations;
/**
 * Adds a list of *pricing plan IDs*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/introduction) | [REST](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/plan-object))
 * to a service's `payment.pricingPlanIds` array.
 *
 *
 * The call doesn't validate whether the service's `payment.options.pricingPlan`
 * is set to `true`. If it's set to `false`, customers aren't able to pay
 * for their bookings using pricing plans. You can call *Update Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/update-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/update-service))
 * to change a service's supported payment methods.
 * @param serviceId - ID of the service to update.
 * @param pricingPlanIds - IDs of the *pricing plans*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/introduction) | [REST](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/plan-object))
 * to add to the service's `payment.pricingPlanIds` array.
 * @public
 * @requiredField pricingPlanIds
 * @requiredField serviceId
 * @permissionId BOOKINGS.SERVICES_PRICING_PLANS_ADD
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.EnablePricingPlansForService
 */
async function enablePricingPlansForService(serviceId, pricingPlanIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        serviceId: serviceId,
        pricingPlanIds: pricingPlanIds,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.enablePricingPlansForService(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { serviceId: '$[0]', pricingPlanIds: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['serviceId', 'pricingPlanIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.enablePricingPlansForService = enablePricingPlansForService;
/**
 * Removes a list of *pricing plan IDs*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/introduction) | [REST](https://dev.wix.com/api/rest/wix-pricing-plans/pricing-plans/plans/plan-object))
 * from a service's `payment.pricingPlanIds` array.
 *
 *
 * If you remove all pricing plan IDs from `payment.pricingPlanIds` and the
 * service supports only payments by pricing plan, customers will no longer be
 * able to book the service, as they will have no payment options available.
 * @param serviceId - ID of the service to update.
 * @public
 * @requiredField serviceId
 * @permissionId BOOKINGS.SERVICES_PRICING_PLANS_REMOVE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.DisablePricingPlansForService
 */
async function disablePricingPlansForService(serviceId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        serviceId: serviceId,
        pricingPlanIds: options?.pricingPlanIds,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.disablePricingPlansForService(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                serviceId: '$[0]',
                pricingPlanIds: '$[1].pricingPlanIds',
            },
            singleArgumentUnchanged: false,
        }, ['serviceId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.disablePricingPlansForService = disablePricingPlansForService;
/**
 * Sets a new active slug for the service.
 *
 *
 * The call fails if at least one of these conditions is met:
 * - The slug doesn't adheres to the supported format.
 * - Another service is currently using the slug.
 * - Another service has used the slug in the past.
 * @param serviceId - ID of the service for which to update the active slug.
 * @public
 * @requiredField serviceId
 * @permissionId BOOKINGS.SERVICES_CUSTOM_SLUGS_SET
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.SetCustomSlug
 */
async function setCustomSlug(serviceId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        serviceId: serviceId,
        slug: options?.slug,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.setCustomSlug(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { serviceId: '$[0]', slug: '$[1].slug' },
            singleArgumentUnchanged: false,
        }, ['serviceId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.setCustomSlug = setCustomSlug;
/**
 * Checks whether a custom slug is validate for the service.
 *
 *
 * The checks include:
 * - The slug adheres to the supported format.
 * - No other service is currently using the slug.
 * - No other service has used the slug in the past.
 *
 * The call fails if at least one of the checks fails.
 * @param serviceId - IO of the service to check custom slug validity for.
 * @public
 * @requiredField serviceId
 * @permissionId BOOKINGS.SERVICES_CUSTOM_SLUGS_SET
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.ValidateSlug
 */
async function validateSlug(serviceId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        serviceId: serviceId,
        slug: options?.slug,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.validateSlug(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { serviceId: '$[0]', slug: '$[1].slug' },
            singleArgumentUnchanged: false,
        }, ['serviceId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.validateSlug = validateSlug;
/**
 * Clones a service.
 *
 *
 * ## Connected entities
 *
 * By default, not all entities connected to the service are cloned.
 *
 * ### Schedule
 *
 * Wix Bookings automatically creates a new active *schedule*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
 * for the cloned service. If Wix Bookings can't create this schedule, the
 * Clone Service* call fails.
 *
 * - __For appointment-based services__: Future appointments aren't added to the
 * cloned service's schedule. Use the *Events API*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
 * to add them as needed.
 * - __For classes and courses__: Future one-time events aren't added to the
 * cloned service's schedule, while future recurring events are added
 * asynchronously. The *Clone Service* call always succeeds, whether or not
 * recurring events are added.
 * If the response includes `RECURRING_EVENTS` in the `errors` array, it means the
 * cloned service doesn't have future recurring events, even though the original
 * service does. You can either delete the cloned service and try again or use
 * the *Events API*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
 * to add missing events to the schedule.
 *
 * Wix Bookings never adds past events to the cloned service's schedule.
 *
 * ### Service options and variants
 *
 * If the original service has *variants*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)),
 * they're cloned asynchronously. The *Clone Service* call always succeeds,
 * regardless of whether variants were cloned.
 *
 * If the response includes `OPTIONS_AND_VARIANTS` in the `errors` array, the cloned
 * service doesn't have variants, even though the original service does. You can
 * delete the cloned service and call *Clone Service* again, or use the
 * _Service Options And Variants API_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction))
 * to add variants.
 *
 * ### Booking form
 *
 * The original service's booking form isn't cloned, whether it's
 * the default or a custom booking form.
 *
 * ### Pricing plans
 *
 * If the original service's accepts payments via *pricing plans*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/pricing-plans/plans/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/pricing-plans/pricing-plans/plans/introduction)),
 * the cloned service's `payment.options.pricingPlan` is also set to `true`. To
 * accept specific pricing plans, call *Enable Pricing Plans For Service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/enable-pricing-plans-for-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/enable-pricing-plans-for-service)),
 * after cloning the service. If the original service accepts only
 * pricing plan payments and you don't call *Enable Pricing Plans For Service*
 * after cloning the service, customers will be unable to book the service.
 * @param sourceServiceId - ID of the service to clone.
 * @public
 * @requiredField sourceServiceId
 * @permissionId BOOKINGS.SERVICES_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.services.v2.ServicesService.CloneService
 */
async function cloneService(sourceServiceId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        sourceServiceId: sourceServiceId,
    });
    const reqOpts = ambassadorWixBookingsServicesV2Service.cloneService(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'service.media.items.image' },
                    { path: 'service.media.mainMedia.image' },
                    { path: 'service.media.coverMedia.image' },
                    { path: 'service.staffMembers.mainMedia.image' },
                    { path: 'service.staffMemberDetails.staffMembers.mainMedia.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'service.locations.calculatedAddress' },
                    { path: 'service.locations.business.address' },
                    { path: 'service.locations.custom.address' },
                ],
            },
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [
                    { path: 'service.urls.servicePage' },
                    { path: 'service.urls.bookingPage' },
                    { path: 'service.urls.calendarPage' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { sourceServiceId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['sourceServiceId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.cloneService = cloneService;
//# sourceMappingURL=bookings-services-v2-service-services.universal.js.map