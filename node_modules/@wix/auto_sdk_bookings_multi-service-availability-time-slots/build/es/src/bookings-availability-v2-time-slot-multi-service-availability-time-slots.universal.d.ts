/**
 * The `TimeSlot` object represents the availability information
 * for an `Appointment` service's specific slot, including:
 *
 * 1. Whether the slot is bookable for the given service?
 *
 * 2. In what location the service is available for this slot?
 *
 * 3. Which available resources can provide the service for this slot?
 *
 * 4. Does booking the slot for the service violates any of the service booking policies?
 *
 * 5. What is the total capacity and remaining capacity of the service at the time of the calculation of the `TimeSlot`?
 *
 * > __Note:__
 * > When the `TimeSlot` has a non empty `NestedTimeSlots`, it represents the availability information
 * > for a given list of `Appointment` services within a specific time slot.
 */
export interface TimeSlot {
    /**
     * Service ID.
     *
     * > Not returned from `MultiServiceAvailabilityTimeSlots` API calls.
     * > Instead, each nested time slot has its own serviceId.
     * @format GUID
     */
    serviceId?: string | null;
    /**
     * Local start date of the time slot in ISO-8601 format.
     * For example, "2024-01-30T13:30:00".
     * @format LOCAL_DATE_TIME
     */
    localStartDate?: string | null;
    /**
     * Local end date of the time slot in ISO-8601 format.
     * For example, "2024-01-30T14:30:00".
     * @format LOCAL_DATE_TIME
     */
    localEndDate?: string | null;
    /**
     * Whether the slot is bookable according to the service's booking policies.
     *
     * If booking this time slot does not violates any of the service's booking policies,
     * the returned value is `true`. Otherwise, returns `false`.
     */
    bookable?: boolean | null;
    /** The geographic location of the slot. */
    location?: Location;
    /** The event information if the time slot is an event based slot. */
    eventInfo?: EventInfo;
    /**
     * Total number of spots for the slot.
     * @min 1
     * @max 1000
     */
    totalCapacity?: number | null;
    /**
     * Remaining number of spots for the slot.
     * For example, for an appointment service with total capacity of 1 spot and one booked spot, the remaining capacity will be 0.
     * @max 1000
     */
    remainingCapacity?: number | null;
    /**
     * Number of spots in the slot that are available for booking.
     * This is calculated as the remaining capacity minus the spots reserved for the waiting list.
     */
    bookableCapacity?: number | null;
    /**
     * Indicators for booking policy violations for the slot.
     *
     * Each nested field is checked on its own. i.e. if `tooEarlyToBook` is defined and `bookOnlineDisabled` is not defined
     * we will return also slots for which `tooEarlyToBook` is same as on the request, regardless of `bookOnlineDisabled`.
     */
    bookingPolicyViolations?: BookingPolicyViolations;
    /**
     * List of `AvailableResources` for the time slot.
     * Each `AvailableResources` contains information about available resources of the same type.
     *
     * > Not returned from `MultiServiceAvailabilityTimeSlots` API calls.
     * > Instead, each nested time slot has its own available resources.
     */
    availableResources?: AvailableResources[];
    /**
     * > Nested time slots.
     * > Returned only from `MultiServiceAvailabilityTimeSlots` API calls.
     * @maxSize 8
     */
    nestedTimeSlots?: NestedTimeSlot[];
    /** Reasons why the time slot is not available for booking. */
    nonBookableReasons?: NonBookableReasons;
}
export interface Location {
    /**
     * Business Location ID. Present only if the location is a business location.
     * @format GUID
     */
    _id?: string | null;
    /** The location name. */
    name?: string | null;
    /** A string representation for the full address of the location. */
    formattedAddress?: string | null;
    /**
     * The type of location:
     * - `CUSTOM`: The location is specific to this service, and is not derived from the business location.
     * - `BUSINESS`: A business location, either the default business address, or locations defined for the business by the Business Info.
     * - `CUSTOMER`: The location is determined by the customer and is not set up beforehand.
     */
    locationType?: LocationType;
}
export declare enum LocationType {
    UNKNOWN_LOCATION_TYPE = "UNKNOWN_LOCATION_TYPE",
    /** A business location, either the default business address, or locations defined for the business by the Business Info. */
    BUSINESS = "BUSINESS",
    /** The location is unique to this service and isn't defined as one of the business locations. */
    CUSTOM = "CUSTOM",
    /** The location can be determined by the customer and is not set up beforehand. */
    CUSTOMER = "CUSTOMER"
}
/** relevant for event based slots, and not for availability based slots */
export interface EventInfo {
    /**
     * The event ID.
     * @minLength 36
     * @maxLength 250
     */
    eventId?: string | null;
    /** Waiting list details for the event, if enabled in the service's booking policy. */
    waitingList?: WaitingList;
}
export interface WaitingList {
    /**
     * Total number of spots in the waiting list.
     * @min 1
     */
    totalCapacity?: number | null;
    /**
     * Number of remaining spots in the waiting list.
     * For example, a yoga event with a capacity of `10` and `3` registrants will have a `remainingCapacity` of `7`.
     */
    remainingCapacity?: number | null;
}
export interface BookingPolicyViolations {
    /** Bookings policy violation. Too early to book this slot. */
    tooEarlyToBook?: boolean | null;
    /** The earliest time at which booking for this slot is allowed, in UTC format (`YYYY-MM-DDThh:mm:ss.sssZ`). */
    earliestBookingDate?: Date | null;
    /** Bookings policy violation. Too late to book this slot. */
    tooLateToBook?: boolean | null;
    /** Bookings policy violation. Online booking is disabled for the `TimeSlot` service. */
    bookOnlineDisabled?: boolean | null;
}
export interface AvailableResources {
    /**
     * Resource type ID.
     * @format GUID
     */
    resourceTypeId?: string | null;
    /**
     * Available resources for the time slot.
     *
     * + When returned from `ListAvailabilityTimeSlots`, empty by default.
     * + + If you provided `includeResourceTypeIds` or  `resourceIds` in request,
     * contains __up__ to 10 available resources out of those provided.
     *
     * + When returned from `GetAvailabilityTimeSlots`, contains all available resources by default.
     * + + If you provided `includeResourceTypeIds` or  `resourceIds` in request,
     * contains all of the available resources out of those provided.
     *
     *
     * > + When returned from `ListMultiServiceAvailabilityTimeSlots`, empty by default.
     * > + + If you provided `includeResourceTypeIds` or  `resourceIds` in request,
     * > contains __up__ to 10 available resources out of those provided.
     *
     * > + When returned from `GetMultiServiceAvailabilityTimeSlots`, contains all available resources by default.
     * > + + If you provided `includeResourceTypeIds` or  `resourceIds` in request,
     * > contains all of the available resources out of those provided.
     */
    resources?: Resource[];
    /**
     * Whether there are more available resources for the slot that are not listed in `resources` due to size limitations.
     * @readonly
     */
    hasMoreAvailableResources?: boolean | null;
}
export interface Resource {
    /**
     * Resource ID.
     * @format GUID
     */
    _id?: string;
    /**
     * Resource name.
     * @minLength 1
     */
    name?: string | null;
}
export interface NestedTimeSlot {
    /**
     * Service ID of the nested time slot.
     * @format GUID
     */
    serviceId?: string;
    /**
     * Local start date of the nested time slot in ISO-8601 format.
     * For example, "2024-01-30T13:30:00".
     * @format LOCAL_DATE_TIME
     */
    localStartDate?: string;
    /**
     * Local end date of the nested time slot in ISO-8601 format.
     * For example, "2024-01-30T14:30:00".
     * @format LOCAL_DATE_TIME
     */
    localEndDate?: string;
    /**
     * List of `AvailableResources` for the nested time slot.
     * Each `AvailableResources` contains information about available resources of the same type.
     * @maxSize 10
     */
    availableResources?: AvailableResources[];
}
export interface NonBookableReasons {
    /** The slot is fully booked with no remaining capacity. */
    noRemainingCapacity?: boolean | null;
    /** Booking this slot would violate the service's booking policy. */
    violatesBookingPolicy?: boolean | null;
    /** The slot is reserved for the waiting list and not available for direct booking. */
    reservedForWaitingList?: boolean | null;
}
export interface ListMultiServiceAvailabilityTimeSlotsRequest {
    /**
     * Services for which the multiService time slots are being returned for.
     * Each service contains its own resources filters within.
     *
     * MinSize: `2`.
     * MaxSize: `8`.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @maxSize 8
     */
    services?: Service[];
    /**
     * Lower boundary for `localStartDate` to include in response, in ISO-8601 format.
     * For example, "2024-01-30T13:30:00".
     *
     * Each returned `TimeSlot` in response has a `localStartDate`
     * within the provided `fromLocalDate` and `toLocalDate` exclusive.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @format LOCAL_DATE_TIME
     */
    fromLocalDate?: string | null;
    /**
     * Upper boundary for `localStartDate` to include in response, in ISO-8601 format.
     * For example, "2024-01-30T14:30:00".
     *
     * Each returned `TimeSlot` in response has a `localStartDate`
     * within the provided `fromLocalDate` and `toLocalDate` exclusive.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @format LOCAL_DATE_TIME
     */
    toLocalDate?: string | null;
    /**
     * Time zone, in IANA time zone format.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
    /**
     * Location for which the multiService TimeSlots are being returned for.
     *
     * You can specify location or location type for which the TimeSlots will be returned for.
     * If locationType is `BUSINESS`, you __must__ provide a locationId.
     *
     * <blockquote class="warning">
     * <p><strong>warning:</strong><br/>
     * Supports filtering by location type, or by location ID. </br>
     * Other fields like <code class="grey-background">name</code> are ignored.</p>
     * </blockquote>
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     */
    location?: Location;
    /**
     * Whether the `TimeSlot` is bookable according to all of the services booking policies.
     *
     * If booking any of the `TimeSlot`.`NestedTimeSlot`s violates any of its services bookings policies,
     * returns as `false`. Otherwise, returns as `true`.
     *
     * > __Note:__
     * > A `TimeSlot` with a `NestedTimeSlot` that doesn't meet its service's bookings policies will be returned with `bookable` = false,
     * > while a `TimeSlot` with no available resources will not be returned at all.
     */
    bookable?: boolean | null;
    /**
     * Indicators for service's booking policy violations for booking the `TimeSlot`.
     *
     * A bookable time slot must not violate any policy,
     * therefor, this filter is only relevant when `bookable` filter is false.
     *
     * Each nested field is checked on all `NestedTimeSlot`s. For example, if only one of the `NestedTimeSlot`'s
     * has a service with `tooEarlyToBook` same as in the request, we return the `TimeSlot` regardless of whether
     * the other `NestedTimeSlots` has the same `tooEarlyToBook` as in request.
     *
     * Each nested field is checked on its own. For example, if `tooEarlyToBook` is defined and `bookOnlineDisabled` is not defined
     * we return slots for which `tooEarlyToBook` is same as on the request, regardless of `bookOnlineDisabled`.
     */
    bookingPolicyViolations?: BookingPolicyViolations;
    /**
     * Maximum number of slots to load for each day. For example, if `timeSlotsPerDay` is set to `3`,
     * we return at most 3 available TimeSlots for each day within the date range specified in request.
     *
     * By default,
     * if `bookable` filter was not specified,
     * and a day has both `bookable` and `un-bookable` slots, `bookable` slots are returned first.
     *
     * If the number of `bookable` slots is less than the requested `timeSlotsPerDay`,
     * `un-bookable` slots will be returned according to the specified filters.
     */
    timeSlotsPerDay?: number | null;
    /**
     * CursorPaging.
     *
     * Enables you to fetch TimeSlots in smaller, more manageable chunks
     * by setting a limit on the number of results returned in response.
     * This is useful in order to enhance efficiency of data retrieval and reduce load on both the client and server.
     *
     * If there are more results than the specified limit, the response will contain a `cursorPagingMetaData`
     * with a cursor pointing to next page of results. In order to fetch the next page of results, you should pass the
     * returned cursor to the next call as `cursorPaging`.`cursor`.
     *
     * For the first call, you should only specify the `limit` for the results page.
     * For each following call, you should only pass the previous returned cursor as `cursorPaging`.`cursor`
     * the `cursorPaging`.`limit`. You may pass a different `limit`.
     * No need to specify any additional parameters.
     *
     * <blockquote class="important">
     * <p><strong>Important:</strong><br/>
     * If you only provide a <code class="grey-background">cursorPaging</code>. <code class="grey-background">cursor</code>,
     * the response will contain the default size of results which is `1000`.
     * </p>
     * </blockquote>
     */
    cursorPaging?: CursorPaging;
}
export interface Service {
    /**
     * Service ID.
     * @format GUID
     */
    serviceId?: string;
    /**
     * Resources to include in response.
     * @format GUID
     * @maxSize 135
     */
    resourceIds?: string[];
    /**
     * The resource type ID's to include in returned time slots.
     * This is in addition to the specifically requested resources.
     *
     * <blockquote class="important">
     * Currently supported only for Staff Member resource type.
     * Staff Member type ID: 1cd44cf8-756f-41c3-bd90-3e2ffcaf1155
     * </blockquote>
     * @format GUID
     * @maxSize 100
     */
    includeResourceTypeIds?: string[];
    /**
     * Selected customer choices.
     * If specified, the selected choices will be used to calculate service configuration.
     * If not specified, the service default configuration will be used.
     * Enforcing this field is the responsibility of the SPI implementer, and not by the Availability API.
     */
    customerChoices?: V2CustomerChoices;
}
/**
 * Selected customer choices.
 * These choices are selected by the customer during the booking flow and can be utilized to calculate the corresponding service's configuration properties.
 */
export interface V2CustomerChoices {
    /**
     * The selected customer duration in minutes.
     * Min: `1 minute`
     * Max: `44639 minutes` (30 days, 23 hours, and 59 minutes)
     * @min 1
     * @max 44639
     */
    durationInMinutes?: number | null;
}
export interface CursorPaging {
    /**
     * Number of results to load.
     *
     * Default: `1000`.
     * Max: `1000`.
     * @max 1000
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface ListMultiServiceAvailabilityTimeSlotsResponse {
    /**
     * Time slots.
     * @maxSize 1000
     */
    timeSlots?: TimeSlot[];
    /**
     * Time zone, in IANA time zone format.
     * Shared for all TimeSlots in response.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
    /**
     * CursorPagingMetaData.
     * Contains information about the next page of results.
     *
     * By default,
     * if there are more than 1000 results,
     * the response will contain a `cursorPagingMetaData` with a cursor to the next page of results.
     *
     * <blockquote class="important">
     * <p><strong>Important:</strong><br/>
     * <code class="grey-background">count</code> is not supported.</p>
     * </blockquote>
     */
    cursorPagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
export interface GetMultiServiceAvailabilityTimeSlotRequest {
    /**
     * Services for which the multiService TimeSlots are being returned for.
     * Each service contains its own resources filters within.
     *
     * MinSize: 2.
     * MaxSize: 8.
     * @minSize 2
     * @maxSize 8
     */
    services: Service[];
    /**
     * Local start date of the time slot, in ISO-8601 format.
     * For example, "2024-01-30T13:30:00".
     * @format LOCAL_DATE_TIME
     */
    localStartDate: string;
    /**
     * Local end date of the time slot, in ISO-8601 format.
     * For example, "2024-01-30T14:30:00".
     * @format LOCAL_DATE_TIME
     */
    localEndDate: string;
    /**
     * Time zone, in IANA time zone format.
     * @minLength 1
     * @maxLength 150
     */
    timeZone: string | null;
    /**
     * The location of the time slot.
     *
     * You must provide a specific `locationType`.
     * If locationType is `BUSINESS`, you __must__ also provide a `locationId`.
     *
     * <blockquote class="warning">
     * <p>Supports filtering by location type, or by location ID.
     * Other fields like <code class="grey-background">name</code> are ignored.</p>
     * </blockquote>
     */
    location: Location;
}
export interface GetMultiServiceAvailabilityTimeSlotResponse {
    /** Time slot. */
    timeSlot?: TimeSlot;
    /**
     * The time zone, in IANA time zone format.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
}
export interface ListAvailabilityTimeSlotsRequest {
    /**
     * Service ID for which the time slots are being returned for.
     * Currently supported only for services of type `APPOINTMENT`.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @format GUID
     */
    serviceId?: string | null;
    /**
     * Lower boundary for `localStartDate` to include in response, in ISO-8601 format.
     * For example, "2024-01-30T13:30:00".
     *
     * Each returned `TimeSlot` in response has a `localStartDate`
     * within the provided `fromLocalDate` and `toLocalDate` exclusive.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @format LOCAL_DATE_TIME
     */
    fromLocalDate?: string | null;
    /**
     * Upper boundary for `localStartDate` to include in response, in ISO-8601 format.
     * For example, "2024-01-30T14:30:00".
     *
     * Each returned `TimeSlot` in response has a `localStartDate`
     * within the provided `fromLocalDate` and `toLocalDate` exclusive.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @format LOCAL_DATE_TIME
     */
    toLocalDate?: string | null;
    /**
     * Time zone, in IANA time zone format.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
    /**
     * Locations to include in response.
     *
     * By default,
     * if no locations are provided,
     * the response contains TimeSlots for all locations where the service is available.
     *
     * You can specify locations or location types for which the time slots will be returned for.
     * If locationType is `BUSINESS`, you __must__ provide a locationId.
     *
     * <blockquote class="warning">
     * <p><strong>warning:</strong><br/>
     * Supports filtering by location type, or by location ID. </br>
     * Other fields like <code class="grey-background">name</code> are ignored.</p>
     * </blockquote>
     * @maxSize 5
     */
    locations?: Location[];
    /**
     * Resources to include in response.
     *
     * If specified,
     * the returned TimeSlots will contain __up__ to 10 available resources out of the provided list.
     * Otherwise, the returned TimeSlots returns with an empty `AvailableResources`.
     * @format GUID
     * @maxSize 135
     * @deprecated
     */
    resourceIds?: string[];
    /**
     * Resource type ID's to include in response, this is in addition to the requested `resourceIds`.
     *
     * If specified in request, the returned TimeSlots will contain __up__ to 10 `AvailableResources` with `ResourceTypeId`
     * out of those specified, each contains __up__ to 10 available resources of this type.
     * @format GUID
     * @maxSize 100
     */
    includeResourceTypeIds?: string[];
    /**
     * Whether the `TimeSlot` is bookable according to the service's booking policies.
     *
     * If booking this `TimeSlot` does not violates any of the service's booking policies,
     * returns as `true`. Otherwise, returns as `false`.
     *
     * > __Note:__
     * > A time slot that doesn't meet the service's bookings policies will be returned with `bookable` = false,
     * > while a time slot with no available resources will not be returned at all.
     */
    bookable?: boolean | null;
    /**
     * Indicators for service's booking policy violations for booking the `TimeSlot`.
     *
     * A bookable time slot must not violate any policy,
     * therefor, this filter is only relevant when `bookable` filter is false.
     *
     * Each nested field is checked on its own. i.e. if `tooEarlyToBook` is defined and `bookOnlineDisabled` is not defined
     * we return slots for which `tooEarlyToBook` is same as on the request, regardless of `bookOnlineDisabled`.
     */
    bookingPolicyViolations?: BookingPolicyViolations;
    /**
     * Maximum number of slots to load for each day. For example, if `timeSlotsPerDay` is set to `3`,
     * we return at most 3 available TimeSlots for each day within the date range specified in request.
     *
     * By default,
     * if `bookable` filter was not specified,
     * and a day has both `bookable` and `un-bookable` slots, `bookable` slots are returned first.
     *
     * If the number of `bookable` slots is less than the requested `timeSlotsPerDay`,
     * `un-bookable` slots will be returned according to the specified filters.
     */
    timeSlotsPerDay?: number | null;
    /**
     * CursorPaging.
     *
     * Enables you to fetch results in smaller, more manageable chunks
     * by setting a limit on the number of results returned in response.
     * This is useful in order to enhance efficiency of data retrieval and reduce load on both the client and server.
     *
     * If there are more results than the specified limit, the response will contain a `cursorPagingMetaData`
     * with a cursor pointing to next page of results. In order to fetch the next page of results, you should pass the
     * returned cursor to the next call as `cursorPaging`.`cursor`.
     *
     * For the first call, you should only specify the `limit` for the results page.
     * For each following call, you should only pass `cursorPaging`.`cursor` with the returned cursor from previous call, and
     * a `cursorPaging`.`limit`.
     * No need to specify any additional parameters.
     *
     * <blockquote class="important">
     * <p><strong>Important:</strong><br/>
     * If you only provide a <code class="grey-background">cursorPaging</code>. <code class="grey-background">cursor</code>,
     * the response will contain the default size of results which is `1000`.
     * </p>
     * </blockquote>
     */
    cursorPaging?: CursorPaging;
    /**
     * resources filter
     * If specified, only time slots with these resources will be returned.
     * @maxSize 3
     */
    resourceTypes?: ResourceType[];
}
/**
 * Selected customer choices.
 * These choices are selected by the customer during the booking flow and can be utilized to calculate the corresponding service's configuration properties.
 */
export interface CustomerChoices {
    /**
     * The selected customer duration in minutes.
     * Min: `1 minute`
     * Max: `44639 minutes` (30 days, 23 hours, and 59 minutes)
     * @min 1
     * @max 44639
     */
    durationInMinutes?: number | null;
}
export interface ResourceType {
    /**
     * Resource type ID.
     * @format GUID
     */
    resourceTypeId?: string | null;
    /**
     * Resource IDs.
     * The response will contain only slots that have at least one of the specified resources.
     * @format GUID
     * @minSize 1
     * @maxSize 135
     */
    resourceIds?: string[] | null;
}
export interface ListAvailabilityTimeSlotsResponse {
    /**
     * Time slots.
     * @maxSize 1000
     */
    timeSlots?: TimeSlot[];
    /**
     * Time zone, in IANA time zone format.
     * Shared for all TimeSlots in response.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
    /**
     * CursorPagingMetaData.
     * Contains information about the next page of results.
     *
     * By default,
     * if there are more than 1000 results,
     * the response will contain a `cursorPagingMetaData` with a cursor to the next page of results.
     *
     * <blockquote class="important">
     * <p><strong>Important:</strong><br/>
     * <code class="grey-background">count</code> is not supported.</p>
     * </blockquote>
     */
    cursorPagingMetadata?: CursorPagingMetadata;
}
export interface GetAvailabilityTimeSlotRequest {
    /**
     * Service ID of the time slot.
     * Currently supported only for services of type `APPOINTMENT`.
     * @format GUID
     */
    serviceId?: string;
    /**
     * Local start date of the time slot, in ISO-8601 format.
     * For example, "2024-01-30T13:30:00".
     * @format LOCAL_DATE_TIME
     */
    localStartDate?: string;
    /**
     * Local end date of the time slot, in ISO-8601 format.
     * For example, "2024-01-30T14:30:00".
     * @format LOCAL_DATE_TIME
     */
    localEndDate?: string;
    /**
     * Time zone, in IANA time zone format.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
    /**
     * The location of the time slot.
     *
     * You must provide a specific `locationType`.
     * If locationType is `BUSINESS`, you __must__ also provide a `locationId`.
     *
     * <blockquote class="warning">
     * <p>Supports filtering by location type, or by location ID.
     * Other fields like <code class="grey-background">name</code> are ignored.</p>
     * </blockquote>
     */
    location?: Location;
    /**
     * Resources to include in response.
     *
     * If specified,
     * the returned `TimeSlot` contains only the available resources out of provided list.
     * Otherwise, the returned `TimeSlot` returned with all possible `AvailableResources`.
     * @format GUID
     * @maxSize 135
     */
    resourceIds?: string[];
    /**
     * Resource type IDs to include in response, this is in addition to the requested `resourceIds`.
     *
     * If specified in request, the returned `TimeSlot` contains only the `AvailableResources` with `ResourceTypeId`
     * out of those specified, each contains all the available resources of this type.
     * @format GUID
     * @maxSize 100
     */
    includeResourceTypeIds?: string[];
}
export interface GetAvailabilityTimeSlotResponse {
    /** Time slot. */
    timeSlot?: TimeSlot;
    /**
     * Time zone, in IANA time zone format.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
}
export interface ListEventTimeSlotsRequest {
    /**
     * Local start date for which event time slots are returned, in ISO-8601 format.
     * E.g., "2024-01-30T13:30:00".
     * Required, unless `cursorPaging` is provided.
     * @format LOCAL_DATE_TIME
     */
    fromLocalDate?: string | null;
    /**
     * Local end date for which event time slots are returned, in ISO-8601 format.
     * E.g., "2024-01-30T13:30:00".
     * Required, unless `cursorPaging` is provided.
     * @format LOCAL_DATE_TIME
     */
    toLocalDate?: string | null;
    /**
     * Time zone in [IANA tz database format](https://en.wikipedia.org/wiki/Tz_database).
     * For example, `America/New_York`.
     *
     * Default: `timeZone` specified in the business [site properties](https://dev.wix.com/docs/rest/business-management/site-properties/properties/get-site-properties).
     * @maxLength 100
     */
    timeZone?: string | null;
    /**
     * Optional service IDs to filter by.
     * If not provided, time slots for all services are returned.
     * @format GUID
     * @maxSize 100
     */
    serviceIds?: string[] | null;
    /**
     * Whether to filter bookable slots only.
     * A bookable slot is a slot that has remaining capacity and also satisfies the booking policy.
     * Default false: Only bookable slots are returned.
     */
    includeNonBookable?: boolean | null;
    /**
     * Filter event time slots by the minimum bookable capacity.
     * @min 1
     */
    minBookableCapacity?: number | null;
    /**
     * Optional filter to apply to the events. E.g., resource, location, etc.
     * See the Events API [Supported Filters and Sorting](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/supported-filters-and-sorting) for more information.
     */
    eventFilter?: Record<string, any> | null;
    /**
     * The maximum number of time slots to return for each day.
     * For example, if `maxSlotsPerDay` is set to `1`, at most 1 available slot is returned for each day.
     * When a day has both bookable and non-bookable slots, bookable slots are returned first.
     * If `maxSlotsPerDay` is provided, `toLocalDate` must also be provided and must be at most 1 month after `fromLocalDate`.
     * @min 1
     * @max 1
     */
    maxSlotsPerDay?: number | null;
    /** Cursor to retrieve the next page of results. */
    cursorPaging?: CursorPaging;
}
export interface ListEventTimeSlotsResponse {
    /** Retrieved time slots matching the specified filters. */
    timeSlots?: TimeSlot[];
    /**
     * The time slots time zone.
     * Either provided explicitly or default to the business time zone.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface GetEventTimeSlotRequest {
    /**
     * The event ID.
     * @minLength 36
     * @maxLength 250
     */
    eventId?: string | null;
    /**
     * Time zone in [IANA tz database format](https://en.wikipedia.org/wiki/Tz_database).
     * For example, `America/New_York`.
     *
     * Default: `timeZone` specified in the business [site properties](https://dev.wix.com/docs/rest/business-management/site-properties/properties/get-site-properties).
     * @maxLength 100
     */
    timeZone?: string | null;
}
export interface GetEventTimeSlotResponse {
    /** The time slot. */
    timeSlot?: TimeSlot;
    /**
     * The time slot time zone.
     * Either provided explicitly or default to the business time zone.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
}
interface LocationNonNullableFields {
    locationType: LocationType;
}
interface ResourceNonNullableFields {
    _id: string;
}
interface AvailableResourcesNonNullableFields {
    resources: ResourceNonNullableFields[];
}
interface NestedTimeSlotNonNullableFields {
    serviceId: string;
    localStartDate: string;
    localEndDate: string;
    availableResources: AvailableResourcesNonNullableFields[];
}
interface TimeSlotNonNullableFields {
    location?: LocationNonNullableFields;
    availableResources: AvailableResourcesNonNullableFields[];
    nestedTimeSlots: NestedTimeSlotNonNullableFields[];
}
export interface ListMultiServiceAvailabilityTimeSlotsResponseNonNullableFields {
    timeSlots: TimeSlotNonNullableFields[];
}
export interface GetMultiServiceAvailabilityTimeSlotResponseNonNullableFields {
    timeSlot?: TimeSlotNonNullableFields;
}
/**
 * Retrieves a list of multiService `TimeSlot`s that match the provided filters.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong><br/>
 * Currently supported only for services of type <code class="grey-background">APPOINTMENT</code>.</p>
 * </blockquote>
 *
 * The request body __must__ include either:
 * + All of the following filters:  `service`.`serviceId`, `fromLocalDate`, `toLocalDate`, `location`, and `timeZone`. You may add additional filters as you wish.
 * + A `cursorPaging` with a valid `cursor` from previous response.
 *
 *
 * Each [TimeSlot](https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/availability-time-slots/time-slot-object) in response
 * represents the availability of the given sequence of services in a specific order, location, and within a given range of time.
 *
 * Each `TimeSlot`.`NestedTimeSlot` represents a single service from the given list. The order of the `NestedTimeSlots` is the same as the order
 * of the given services in request.
 * The first `NestedTimeSlot` has `localStartDate` within the given `fromLocalDate` and `toLocalDate` exclusive,
 * and each following `NestedTimeSlot` has a `localStartDate` that equals to the previous `NestedTimeSlot`'s `localEndDate`.
 *
 * By default,
 * the response contains at most 1000 results.
 * If there are more than 1000 results, we return a `cursorPagingMetadata` with
 * a cursor for the next page of results, regardless of whether a `cursorPaging`
 * was provided in request.
 *
 * > __Notes:__
 * >  + All nested time slots share the same location.
 * >  + You can pass up to 8 services in request.
 *
 * ### AvailableResources in response:
 * The `TimeSlot`.`NestedTimeSlot`'s `AvailableResources` contains information about the resources that are available to provide the service
 * within the `NestedTimeSlot` range of time. Each `AvailableResources` contains information about available resources of the same type.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong><br/>
 * By default,
 * if you don't specify <code class="grey-background">service</code>.<code class="grey-background">includeResourceTypeIds</code>
 * or  <code class="grey-background">service</code>.<code class="grey-background">resourceIds</code> filters in request,
 * we return TimeSlots with <code class="grey-background">NestedTimeSlot</code>s with an empty <code class="grey-background">AvailableResources</code>.
 * <br/><strong>Note:</strong><br/> Not specifying resources filters can be handy in case you want to avoid large response in flows that only
 * interested of whether the time slots are available. [Finding the next available slot within the next 3 months](https://bo.wix.com/wix-docs/rest/all-apis/service-availability/multi-service-availability-time-slots/sample-flows?localViewerId=inbari#all-apis_service-availability_multi-service-availability-time-slots_sample-flows_find-the-first-date-within-the-next-3-months-that-all-selected-services-are-available-for)
 * is an example for such flow.
 * </p>
 * </blockquote>
 *
 *
 * If you wish to get a list of available resources for a `TimeSlot`.`NestedTimeSlot` you should either:
 * + provide `service`.`resourceIds` in request.
 * + provide `service`.`includeResourceTypeIds` in request.
 *
 * __Notes:__
 * + In both cases the returned `TimeSlot`.`NestedTimeSlot` contains  __up__ to 10 `AvailableResources` that match the provided filters. Each `AvailableResources` contains __up__ to 10 available `resources` of the same type that match the provided filters.
 * + If an `AvailableResources` has more available resources which are not listed within it, we return `AvailableResources`.`hasMoreAvailableResources` as true.
 * + If you wish to get the full available resources list for all `NestedTimeSlot` of a specific `TimeSlot`, you should call [GetMultiServiceAvailabilityTimeSlot](https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/multi-service-availability-time-slots/get-multi-service-availability-time-slot).
 *
 *
 * ### Availability VS Bookability
 * An `available` time slot is not necessarily `bookable`.
 * The `bookable` field of a `TimeSlot` indicates whether the customer can book all of the of the services within the given time slot,
 * at a specific period of time.
 * Read more about [Availability VS Bookability](https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/multi-service-availability-time-slots/introduction#all-apis_wix-service-availability_multi-service-availability-time-slots_introduction_availability-vs-bookability).
 *
 * By default,
 * + The response does not contains `unavailable` TimeSlots.For example, if there are no available resources to provide one of the services from `2024-01-30T14:30:00` to `2024-01-30T15:30:00`, we don't return TimeSlots with `NestedTimeSlot`.`localStartDate` within this range for this service.
 * + The response contains both `bookable` and `un-bookable` TimeSlots.For example, if one of the services has a booking policy which enforces booking the service up to 10 minutes before the session starts, we return TimeSlots with the violating `NestedTimeSlot`.`localStartDate`, with `bookable` as `false`. If you want to list only __bookable__ TimeSlots you should pass `bookable` as `true`.
 * + If booking one of the `NestedTimeSlot`s violates one of the corresponding service's booking policies, the `TimeSlot` returns with `bookable` as false. There is no indication which service's policy was violated.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong>
 * Because of DST, there are edge cases where certain times either do not exist or exist twice for a local time zone.
 * Read more about <a href="https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/multi-service-availability-time-slots/introduction#all-apis_wix-service-availability_multi-service-availability-time-slots_introduction_daylight-saving-time-dst-handling">DST Handling</a></p>
 * </blockquote>
 *
 * ### ListAvailabilityTimeSlots runs with the following defaults:
 * + `localStartDate` is sorted in `ASC` order.
 * + `cursorPaging`.`limit` is `1000`.
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.AVAILABILITY_READ_MULTI_SERVICE_TIME_SLOTS
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Read Bookings Calendar Availability
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.availability.v2.MultiServiceAvailabilityTimeSlots.ListMultiServiceAvailabilityTimeSlots
 */
export declare function listMultiServiceAvailabilityTimeSlots(options?: ListMultiServiceAvailabilityTimeSlotsOptions): Promise<ListMultiServiceAvailabilityTimeSlotsResponse & ListMultiServiceAvailabilityTimeSlotsResponseNonNullableFields>;
export interface ListMultiServiceAvailabilityTimeSlotsOptions {
    /**
     * Services for which the multiService time slots are being returned for.
     * Each service contains its own resources filters within.
     *
     * MinSize: `2`.
     * MaxSize: `8`.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @maxSize 8
     */
    services?: Service[];
    /**
     * Lower boundary for `localStartDate` to include in response, in ISO-8601 format.
     * For example, "2024-01-30T13:30:00".
     *
     * Each returned `TimeSlot` in response has a `localStartDate`
     * within the provided `fromLocalDate` and `toLocalDate` exclusive.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @format LOCAL_DATE_TIME
     */
    fromLocalDate?: string | null;
    /**
     * Upper boundary for `localStartDate` to include in response, in ISO-8601 format.
     * For example, "2024-01-30T14:30:00".
     *
     * Each returned `TimeSlot` in response has a `localStartDate`
     * within the provided `fromLocalDate` and `toLocalDate` exclusive.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @format LOCAL_DATE_TIME
     */
    toLocalDate?: string | null;
    /**
     * Time zone, in IANA time zone format.
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     * @minLength 1
     * @maxLength 150
     */
    timeZone?: string | null;
    /**
     * Location for which the multiService TimeSlots are being returned for.
     *
     * You can specify location or location type for which the TimeSlots will be returned for.
     * If locationType is `BUSINESS`, you __must__ provide a locationId.
     *
     * <blockquote class="warning">
     * <p><strong>warning:</strong><br/>
     * Supports filtering by location type, or by location ID. </br>
     * Other fields like <code class="grey-background">name</code> are ignored.</p>
     * </blockquote>
     *
     * Required, unless `cursorPaging`.`cursor` is provided.
     */
    location?: Location;
    /**
     * Whether the `TimeSlot` is bookable according to all of the services booking policies.
     *
     * If booking any of the `TimeSlot`.`NestedTimeSlot`s violates any of its services bookings policies,
     * returns as `false`. Otherwise, returns as `true`.
     *
     * > __Note:__
     * > A `TimeSlot` with a `NestedTimeSlot` that doesn't meet its service's bookings policies will be returned with `bookable` = false,
     * > while a `TimeSlot` with no available resources will not be returned at all.
     */
    bookable?: boolean | null;
    /**
     * Indicators for service's booking policy violations for booking the `TimeSlot`.
     *
     * A bookable time slot must not violate any policy,
     * therefor, this filter is only relevant when `bookable` filter is false.
     *
     * Each nested field is checked on all `NestedTimeSlot`s. For example, if only one of the `NestedTimeSlot`'s
     * has a service with `tooEarlyToBook` same as in the request, we return the `TimeSlot` regardless of whether
     * the other `NestedTimeSlots` has the same `tooEarlyToBook` as in request.
     *
     * Each nested field is checked on its own. For example, if `tooEarlyToBook` is defined and `bookOnlineDisabled` is not defined
     * we return slots for which `tooEarlyToBook` is same as on the request, regardless of `bookOnlineDisabled`.
     */
    bookingPolicyViolations?: BookingPolicyViolations;
    /**
     * Maximum number of slots to load for each day. For example, if `timeSlotsPerDay` is set to `3`,
     * we return at most 3 available TimeSlots for each day within the date range specified in request.
     *
     * By default,
     * if `bookable` filter was not specified,
     * and a day has both `bookable` and `un-bookable` slots, `bookable` slots are returned first.
     *
     * If the number of `bookable` slots is less than the requested `timeSlotsPerDay`,
     * `un-bookable` slots will be returned according to the specified filters.
     */
    timeSlotsPerDay?: number | null;
    /**
     * CursorPaging.
     *
     * Enables you to fetch TimeSlots in smaller, more manageable chunks
     * by setting a limit on the number of results returned in response.
     * This is useful in order to enhance efficiency of data retrieval and reduce load on both the client and server.
     *
     * If there are more results than the specified limit, the response will contain a `cursorPagingMetaData`
     * with a cursor pointing to next page of results. In order to fetch the next page of results, you should pass the
     * returned cursor to the next call as `cursorPaging`.`cursor`.
     *
     * For the first call, you should only specify the `limit` for the results page.
     * For each following call, you should only pass the previous returned cursor as `cursorPaging`.`cursor`
     * the `cursorPaging`.`limit`. You may pass a different `limit`.
     * No need to specify any additional parameters.
     *
     * <blockquote class="important">
     * <p><strong>Important:</strong><br/>
     * If you only provide a <code class="grey-background">cursorPaging</code>. <code class="grey-background">cursor</code>,
     * the response will contain the default size of results which is `1000`.
     * </p>
     * </blockquote>
     */
    cursorPaging?: CursorPaging;
}
/**
 * Retrieves an available multiService `TimeSlot` that match the provided filters.
 *
 * Throws `SlotNotFound` if there is no such available time slot.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong><br/>
 * Currently supported only for services of type <code class="grey-background">APPOINTMENT</code>.</p>
 * </blockquote>
 *
 * By default,
 * if you don't provide a `service`.`includeResourceTypeIds` or `service`.`resourceIds` in request,
 * we return for each `TimeSlot`.`NestedTimeSlot` all `AvailableResources` with all `AvailableResources`.`resources` which are available to provide
 * the corresponding service within the time slot.
 *
 * If you specify `service`.`includeResourceTypeIds` or `service`.`resourceIds` in request,
 * the returned `TimeSlot`.`NestedTimeSlot` for this service will contain only `AvailableResources` with at least one available resource
 * which match the given resources filters,
 * each contains all available resources out of those requested.
 *
 * + Notes:
 * + All nested time slots share the same location.
 * + You can pass up to 8 services.
 *
 * <blockquote class="tip">
 * <p><strong>Tip:</strong><br/>
 * Use this API in order to get the availability of a specific <code class="grey-background">TimeSlot</code> out of those returned from  <code class="grey-background">ListMultiServiceAvailabilityTimeSlots</code> API.</p>
 * </blockquote>
 * @param services - Services for which the multiService TimeSlots are being returned for.
 * Each service contains its own resources filters within.
 *
 * MinSize: 2.
 * MaxSize: 8.
 * @param localStartDate - Local start date of the time slot, in ISO-8601 format.
 * For example, "2024-01-30T13:30:00".
 * @param localEndDate - Local end date of the time slot, in ISO-8601 format.
 * For example, "2024-01-30T14:30:00".
 * @param timeZone - Time zone, in IANA time zone format.
 * @param location - The location of the time slot.
 *
 * You must provide a specific `locationType`.
 * If locationType is `BUSINESS`, you __must__ also provide a `locationId`.
 *
 * <blockquote class="warning">
 * <p>Supports filtering by location type, or by location ID.
 * Other fields like <code class="grey-background">name</code> are ignored.</p>
 * </blockquote>
 * @public
 * @documentationMaturity preview
 * @requiredField localEndDate
 * @requiredField localStartDate
 * @requiredField location
 * @requiredField location.locationType
 * @requiredField services
 * @requiredField services.serviceId
 * @requiredField timeZone
 * @permissionId BOOKINGS.AVAILABILITY_READ_MULTI_SERVICE_TIME_SLOTS
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Read Bookings Calendar Availability
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.availability.v2.MultiServiceAvailabilityTimeSlots.GetMultiServiceAvailabilityTimeSlot
 */
export declare function getMultiServiceAvailabilityTimeSlot(services: Service[], localStartDate: string, localEndDate: string, timeZone: string | null, location: Location): Promise<GetMultiServiceAvailabilityTimeSlotResponse & GetMultiServiceAvailabilityTimeSlotResponseNonNullableFields>;
export {};
