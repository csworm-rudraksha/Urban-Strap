import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsAvailabilityV2TimeSlot from './bookings-availability-v2-time-slot-multi-service-availability-time-slots.http.js';
export var LocationType;
(function (LocationType) {
    LocationType["UNKNOWN_LOCATION_TYPE"] = "UNKNOWN_LOCATION_TYPE";
    /** A business location, either the default business address, or locations defined for the business by the Business Info. */
    LocationType["BUSINESS"] = "BUSINESS";
    /** The location is unique to this service and isn't defined as one of the business locations. */
    LocationType["CUSTOM"] = "CUSTOM";
    /** The location can be determined by the customer and is not set up beforehand. */
    LocationType["CUSTOMER"] = "CUSTOMER";
})(LocationType || (LocationType = {}));
/**
 * Retrieves a list of multiService `TimeSlot`s that match the provided filters.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong><br/>
 * Currently supported only for services of type <code class="grey-background">APPOINTMENT</code>.</p>
 * </blockquote>
 *
 * The request body __must__ include either:
 * + All of the following filters:  `service`.`serviceId`, `fromLocalDate`, `toLocalDate`, `location`, and `timeZone`. You may add additional filters as you wish.
 * + A `cursorPaging` with a valid `cursor` from previous response.
 *
 *
 * Each [TimeSlot](https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/availability-time-slots/time-slot-object) in response
 * represents the availability of the given sequence of services in a specific order, location, and within a given range of time.
 *
 * Each `TimeSlot`.`NestedTimeSlot` represents a single service from the given list. The order of the `NestedTimeSlots` is the same as the order
 * of the given services in request.
 * The first `NestedTimeSlot` has `localStartDate` within the given `fromLocalDate` and `toLocalDate` exclusive,
 * and each following `NestedTimeSlot` has a `localStartDate` that equals to the previous `NestedTimeSlot`'s `localEndDate`.
 *
 * By default,
 * the response contains at most 1000 results.
 * If there are more than 1000 results, we return a `cursorPagingMetadata` with
 * a cursor for the next page of results, regardless of whether a `cursorPaging`
 * was provided in request.
 *
 * > __Notes:__
 * >  + All nested time slots share the same location.
 * >  + You can pass up to 8 services in request.
 *
 * ### AvailableResources in response:
 * The `TimeSlot`.`NestedTimeSlot`'s `AvailableResources` contains information about the resources that are available to provide the service
 * within the `NestedTimeSlot` range of time. Each `AvailableResources` contains information about available resources of the same type.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong><br/>
 * By default,
 * if you don't specify <code class="grey-background">service</code>.<code class="grey-background">includeResourceTypeIds</code>
 * or  <code class="grey-background">service</code>.<code class="grey-background">resourceIds</code> filters in request,
 * we return TimeSlots with <code class="grey-background">NestedTimeSlot</code>s with an empty <code class="grey-background">AvailableResources</code>.
 * <br/><strong>Note:</strong><br/> Not specifying resources filters can be handy in case you want to avoid large response in flows that only
 * interested of whether the time slots are available. [Finding the next available slot within the next 3 months](https://bo.wix.com/wix-docs/rest/all-apis/service-availability/multi-service-availability-time-slots/sample-flows?localViewerId=inbari#all-apis_service-availability_multi-service-availability-time-slots_sample-flows_find-the-first-date-within-the-next-3-months-that-all-selected-services-are-available-for)
 * is an example for such flow.
 * </p>
 * </blockquote>
 *
 *
 * If you wish to get a list of available resources for a `TimeSlot`.`NestedTimeSlot` you should either:
 * + provide `service`.`resourceIds` in request.
 * + provide `service`.`includeResourceTypeIds` in request.
 *
 * __Notes:__
 * + In both cases the returned `TimeSlot`.`NestedTimeSlot` contains  __up__ to 10 `AvailableResources` that match the provided filters. Each `AvailableResources` contains __up__ to 10 available `resources` of the same type that match the provided filters.
 * + If an `AvailableResources` has more available resources which are not listed within it, we return `AvailableResources`.`hasMoreAvailableResources` as true.
 * + If you wish to get the full available resources list for all `NestedTimeSlot` of a specific `TimeSlot`, you should call [GetMultiServiceAvailabilityTimeSlot](https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/multi-service-availability-time-slots/get-multi-service-availability-time-slot).
 *
 *
 * ### Availability VS Bookability
 * An `available` time slot is not necessarily `bookable`.
 * The `bookable` field of a `TimeSlot` indicates whether the customer can book all of the of the services within the given time slot,
 * at a specific period of time.
 * Read more about [Availability VS Bookability](https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/multi-service-availability-time-slots/introduction#all-apis_wix-service-availability_multi-service-availability-time-slots_introduction_availability-vs-bookability).
 *
 * By default,
 * + The response does not contains `unavailable` TimeSlots.For example, if there are no available resources to provide one of the services from `2024-01-30T14:30:00` to `2024-01-30T15:30:00`, we don't return TimeSlots with `NestedTimeSlot`.`localStartDate` within this range for this service.
 * + The response contains both `bookable` and `un-bookable` TimeSlots.For example, if one of the services has a booking policy which enforces booking the service up to 10 minutes before the session starts, we return TimeSlots with the violating `NestedTimeSlot`.`localStartDate`, with `bookable` as `false`. If you want to list only __bookable__ TimeSlots you should pass `bookable` as `true`.
 * + If booking one of the `NestedTimeSlot`s violates one of the corresponding service's booking policies, the `TimeSlot` returns with `bookable` as false. There is no indication which service's policy was violated.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong>
 * Because of DST, there are edge cases where certain times either do not exist or exist twice for a local time zone.
 * Read more about <a href="https://bo.wix.com/wix-docs/rest/all-apis/wix-service-availability/multi-service-availability-time-slots/introduction#all-apis_wix-service-availability_multi-service-availability-time-slots_introduction_daylight-saving-time-dst-handling">DST Handling</a></p>
 * </blockquote>
 *
 * ### ListAvailabilityTimeSlots runs with the following defaults:
 * + `localStartDate` is sorted in `ASC` order.
 * + `cursorPaging`.`limit` is `1000`.
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.AVAILABILITY_READ_MULTI_SERVICE_TIME_SLOTS
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Read Bookings Calendar Availability
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.availability.v2.MultiServiceAvailabilityTimeSlots.ListMultiServiceAvailabilityTimeSlots
 */
export async function listMultiServiceAvailabilityTimeSlots(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        services: options?.services,
        fromLocalDate: options?.fromLocalDate,
        toLocalDate: options?.toLocalDate,
        timeZone: options?.timeZone,
        location: options?.location,
        bookable: options?.bookable,
        bookingPolicyViolations: options?.bookingPolicyViolations,
        timeSlotsPerDay: options?.timeSlotsPerDay,
        cursorPaging: options?.cursorPaging,
    });
    const reqOpts = ambassadorWixBookingsAvailabilityV2TimeSlot.listMultiServiceAvailabilityTimeSlots(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                services: '$[0].services',
                fromLocalDate: '$[0].fromLocalDate',
                toLocalDate: '$[0].toLocalDate',
                timeZone: '$[0].timeZone',
                location: '$[0].location',
                bookable: '$[0].bookable',
                bookingPolicyViolations: '$[0].bookingPolicyViolations',
                timeSlotsPerDay: '$[0].timeSlotsPerDay',
                cursorPaging: '$[0].cursorPaging',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves an available multiService `TimeSlot` that match the provided filters.
 *
 * Throws `SlotNotFound` if there is no such available time slot.
 *
 * <blockquote class="important">
 * <p><strong>Important:</strong><br/>
 * Currently supported only for services of type <code class="grey-background">APPOINTMENT</code>.</p>
 * </blockquote>
 *
 * By default,
 * if you don't provide a `service`.`includeResourceTypeIds` or `service`.`resourceIds` in request,
 * we return for each `TimeSlot`.`NestedTimeSlot` all `AvailableResources` with all `AvailableResources`.`resources` which are available to provide
 * the corresponding service within the time slot.
 *
 * If you specify `service`.`includeResourceTypeIds` or `service`.`resourceIds` in request,
 * the returned `TimeSlot`.`NestedTimeSlot` for this service will contain only `AvailableResources` with at least one available resource
 * which match the given resources filters,
 * each contains all available resources out of those requested.
 *
 * + Notes:
 * + All nested time slots share the same location.
 * + You can pass up to 8 services.
 *
 * <blockquote class="tip">
 * <p><strong>Tip:</strong><br/>
 * Use this API in order to get the availability of a specific <code class="grey-background">TimeSlot</code> out of those returned from  <code class="grey-background">ListMultiServiceAvailabilityTimeSlots</code> API.</p>
 * </blockquote>
 * @param services - Services for which the multiService TimeSlots are being returned for.
 * Each service contains its own resources filters within.
 *
 * MinSize: 2.
 * MaxSize: 8.
 * @param localStartDate - Local start date of the time slot, in ISO-8601 format.
 * For example, "2024-01-30T13:30:00".
 * @param localEndDate - Local end date of the time slot, in ISO-8601 format.
 * For example, "2024-01-30T14:30:00".
 * @param timeZone - Time zone, in IANA time zone format.
 * @param location - The location of the time slot.
 *
 * You must provide a specific `locationType`.
 * If locationType is `BUSINESS`, you __must__ also provide a `locationId`.
 *
 * <blockquote class="warning">
 * <p>Supports filtering by location type, or by location ID.
 * Other fields like <code class="grey-background">name</code> are ignored.</p>
 * </blockquote>
 * @public
 * @documentationMaturity preview
 * @requiredField localEndDate
 * @requiredField localStartDate
 * @requiredField location
 * @requiredField location.locationType
 * @requiredField services
 * @requiredField services.serviceId
 * @requiredField timeZone
 * @permissionId BOOKINGS.AVAILABILITY_READ_MULTI_SERVICE_TIME_SLOTS
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Read Bookings Calendar Availability
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.availability.v2.MultiServiceAvailabilityTimeSlots.GetMultiServiceAvailabilityTimeSlot
 */
export async function getMultiServiceAvailabilityTimeSlot(services, localStartDate, localEndDate, timeZone, location) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[5];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        services: services,
        localStartDate: localStartDate,
        localEndDate: localEndDate,
        timeZone: timeZone,
        location: location,
    });
    const reqOpts = ambassadorWixBookingsAvailabilityV2TimeSlot.getMultiServiceAvailabilityTimeSlot(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                services: '$[0]',
                localStartDate: '$[1]',
                localEndDate: '$[2]',
                timeZone: '$[3]',
                location: '$[4]',
            },
            singleArgumentUnchanged: false,
        }, ['services', 'localStartDate', 'localEndDate', 'timeZone', 'location']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=bookings-availability-v2-time-slot-multi-service-availability-time-slots.universal.js.map