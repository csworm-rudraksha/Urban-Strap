{"version":3,"sources":["../src/identity-members-v1-member-authentication.universal.ts","../src/identity-members-v1-member-authentication.http.ts","../src/identity-members-v1-member-authentication.public.ts","../src/identity-members-v1-member-authentication.context.ts"],"sourcesContent":["import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixIdentityMembersV1Member from './identity-members-v1-member-authentication.http.js';\nimport { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\n\nexport interface Member {\n  /**\n   * Member ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string;\n  /**\n   * @internal\n   * @internal\n   * @readonly\n   */\n  emailVerified?: boolean;\n  /**\n   * @internal\n   * @internal */\n  role?: Role;\n  /**\n   * Email used by the member to log in to the site.\n   *\n   *\n   * @format EMAIL\n   */\n  loginEmail?: string | null;\n  /**\n   * @internal\n   * @internal */\n  memberName?: string | null;\n  /** Member's first name. */\n  firstName?: string | null;\n  /** Member's last name. */\n  lastName?: string | null;\n  /**\n   * @internal\n   * @internal\n   * @format URI\n   * @deprecated\n   */\n  imageUrl?: string | null;\n  /** Name that identifies the member to other members. Displayed on the member's profile page and interactions in the forum or blog. */\n  nickname?: string | null;\n  /**\n   * Member privacy status.\n   *\n   * One of:\n   * - `\"PUBLIC\"`: Member is visible to everyone.\n   * - `\"PRIVATE\"`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.\n   * - `\"UNKNOWN\"`: Insufficient permissions to get the status.\n   */\n  profilePrivacyStatus?: SiteMemberPrivacyStatus;\n  /** URL segment that determines the member's profile page. */\n  slug?: string | null;\n  /**\n   * @internal\n   * @internal */\n  language?: string | null;\n  /**\n   * Member site access status.\n   *\n   * One of:\n   * - `\"PENDING\"`: Member created and is waiting for approval by site owner.\n   * - `\"APPROVED\"`: Member can log in to the site.\n   * - \"OFFLINE\"`: Member is a guest author for the site blog and cannot log in to the site.\n   * - `\"BLOCKED\"`: Member is blocked and cannot log in to the site.\n   * - `\"UNKNOWN\"`: Insufficient permissions to get the status.\n   */\n  status?: SiteMemberStatus;\n  /**\n   * Date and time when the member was created.\n   * @readonly\n   */\n  creationDate?: Date | null;\n  /**\n   * Date and time when the member was last updated.\n   *\n   *\n   * @readonly\n   */\n  lastUpdateDate?: Date | null;\n  /**\n   * Date and time when the member last logged in to the site.\n   *\n   * @readonly\n   */\n  lastLoginDate?: Date | null;\n  /**\n   * List of email addresses.\n   *\n   *\n   */\n  emails?: string[];\n  /** List of phone numbers.  */\n  phones?: string[];\n  /** List of street addresses. */\n  addresses?: Address[];\n  /**\n   * @internal\n   * @internal */\n  labels?: string[];\n  /**\n   * Custom fields, structured as key:object pairs. Custom field keys are defined in the Contacts Extended Fields API. The paired object contains the `name` and `value` properties, where `name` is the display name and `value` is the value stored for the member.\n   *\n   * Only custom fields added to the member profile in the Dashboard are available through the Members API. Empty fields are not returned.\n   *\n   * When updating a member, `name` is ignored.\n   */\n  customFields?: CustomField[];\n  /** Member's profile picture URL. */\n  picture?: string;\n  /**\n   * @internal\n   * @internal */\n  userId?: string | null;\n  /**\n   * @internal\n   * @internal */\n  groups?: Group[];\n  /**\n   * Member's contact ID.\n   * @readonly\n   */\n  contactId?: string | null;\n}\n\nexport enum Role {\n  UNDEFINED_ROLE = 'UNDEFINED_ROLE',\n  MEMBER = 'MEMBER',\n  OWNER = 'OWNER',\n  CONTRIBUTOR = 'CONTRIBUTOR',\n}\n\nexport enum SiteMemberPrivacyStatus {\n  UNDEFINED = 'UNDEFINED',\n  PUBLIC = 'PUBLIC',\n  PRIVATE = 'PRIVATE',\n  COMMUNITY = 'COMMUNITY',\n}\n\nexport enum SiteMemberStatus {\n  UNDEFINED_STATUS = 'UNDEFINED_STATUS',\n  APPLICANT = 'APPLICANT',\n  ACTIVE = 'ACTIVE',\n  INACTIVE = 'INACTIVE',\n  BLOCKED = 'BLOCKED',\n  OFFLINE_ONLY = 'OFFLINE_ONLY',\n}\n\nexport interface Address {\n  /** Street address. */\n  street?: string | null;\n  /** City name. */\n  city?: string | null;\n  /** Region name. */\n  region?: string | null;\n  /** 2-letter country code in an [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. */\n  country?: string | null;\n  /** Postal code. */\n  postalCode?: string | null;\n}\n\nexport interface CustomField extends CustomFieldValueOneOf {\n  /** String value. */\n  strValue?: string | null;\n  /** Number value. */\n  numValue?: number;\n  /** Date value. */\n  dateValue?: Date | null;\n  /** Display name. */\n  name?: string;\n}\n\n/** @oneof */\nexport interface CustomFieldValueOneOf {\n  strValue?: string | null;\n  numValue?: number;\n  dateValue?: Date | null;\n}\n\nexport interface FocalPoint {\n  /** X-coordinate of the focal point. */\n  x?: number;\n  /** Y-coordinate of the focal point. */\n  y?: number;\n  /** crop by height */\n  height?: number | null;\n  /** crop by width */\n  width?: number | null;\n}\n\nexport interface Group {\n  /** @format GUID */\n  _id?: string;\n  name?: string;\n  type?: string;\n}\n\nexport interface ListMembersRequest {\n  /** for paging - maximum number of records to retrieve */\n  limit?: number;\n  /** for paging - how many records to skip */\n  offset?: number;\n  /** sort order - list of field and direction tuples. e.g. `[\"first_name:asc\", \"last_name:desc\"]` */\n  order?: string[];\n  /** partial response request - list of field names to get back in response */\n  fields?: string[];\n  /** filter members with specific status */\n  status?: SiteMemberStatus;\n  /** whether to include contact details */\n  includeContactDetails?: boolean;\n}\n\nexport interface ListMembersResponse {\n  /** members returned by List request */\n  members?: Member[];\n  /** pagination information */\n  pagination?: PaginationResponse;\n}\n\nexport interface PaginationResponse {\n  /** offset that was applied to the request */\n  offset?: number;\n  /** limit that was applied to the request */\n  limit?: number;\n  /** total rows available */\n  total?: number;\n  /** indication that the total count was too expensive to calculate */\n  tooManyToCount?: boolean;\n}\n\nexport interface SearchRequest {\n  /** paging - offset and limit */\n  paging?: Paging;\n  /** search by field */\n  searchBy?: SearchBy;\n  /** partial response request - list of field names to get back in response */\n  fields?: string[];\n  /** filters */\n  filterBy?: FilterBy;\n  /** ASC or DESC order */\n  sort?: Sorting;\n}\n\nexport interface Paging {\n  /** Number of items to load. */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface SearchBy {\n  /** nick name filter */\n  nickname?: string | null;\n}\n\nexport interface FilterBy {\n  /** filter members with specific status */\n  status?: string | null;\n  /** group Id filter */\n  groupId?: string | null;\n  /** privacy status filter */\n  privacyStatus?: SiteMemberPrivacyStatus;\n  /** roles filter */\n  roles?: Role[];\n}\n\nexport enum Sorting {\n  DESC = 'DESC',\n  ASC = 'ASC',\n}\n\nexport interface SearchResponse {\n  /** members returned by List request */\n  members?: Member[];\n  /** pagination information */\n  pagination?: PaginationResponse;\n}\n\nexport interface GetCurrentMemberRequest {}\n\nexport interface GetMemberResponse {\n  member?: Member;\n}\n\nexport interface GetMemberRequest {\n  /** unique identifier of the requested member(required) */\n  _id?: string;\n  /** whether to include contact details */\n  includeContactDetails?: boolean;\n  /** whether to include groups details */\n  includeGroupsDetails?: boolean;\n}\n\nexport interface GetUserMembershipsRequest {\n  /**\n   * unique identifier of the requested **Wix** user\n   * @format GUID\n   */\n  userId?: string;\n  /** paging - offset and limit ( the max limit for page is 200) */\n  paging?: Paging;\n}\n\nexport interface GetUserMembershipsResponse {\n  /** sequence of member's of the user with there metaSiteId */\n  userMemberships?: UserMembership[];\n}\n\nexport interface UserMembership {\n  /**\n   * member id\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * meta site id whom the member existing on\n   * @format GUID\n   */\n  metasiteId?: string;\n}\n\nexport interface GetMemberRoleRequest {\n  _id?: string;\n}\n\nexport interface GetMemberRoleResponse {\n  /**\n   * member's role:\n   *\n   * `OWNER` - member that belongs to site owner\n   * `CONTRIBUTOR` - member that belongs to a contributor in site\n   * `MEMBER` - other members that registered to site\n   */\n  role?: Role;\n  userId?: string | null;\n  status?: SiteMemberStatus;\n  contactId?: string | null;\n}\n\nexport interface GetMemberRolesRequest {\n  /** user_id and/or contact_id */\n  ids?: string[];\n}\n\nexport interface GetMemberRolesResponse {\n  idsToRoles?: Record<string, MemberRole>;\n}\n\nexport interface MemberRole {\n  /**\n   * member's role:\n   *\n   * `OWNER` - member that belongs to site owner\n   * `CONTRIBUTOR` - member that belongs to a contributor in site\n   * `MEMBER` - other members that registered to site\n   */\n  role?: Role;\n  userId?: string | null;\n  status?: SiteMemberStatus;\n  contactId?: string | null;\n}\n\nexport interface BatchGetMembersRequest {\n  /** unique identifier of the requested member(required) */\n  ids?: string[];\n  /** whether to include contact details */\n  includeContactDetails?: boolean;\n  /** whether to include groups details */\n  includeGroupsDetails?: boolean;\n}\n\nexport interface BatchGetMembersResponse {\n  /** lest of members details */\n  members?: Member[];\n}\n\nexport interface GetAuthorizedPagesRequest {\n  _id?: string;\n  siteId?: string;\n}\n\nexport interface GetAuthorizedPagesResponse {\n  authorizedPages?: Record<string, string>;\n}\n\nexport interface UpdateMemberRequest {\n  /** member id */\n  _id?: string;\n  /** the Member object containing the fields to update */\n  member?: Member;\n  /**\n   * an explicit declaration of contact fields that should be updated by this request.\n   * *Currently only affects contact fields.\n   */\n  fieldMask?: string[];\n}\n\nexport interface UpdateMemberResponse {\n  /** updated member */\n  member?: Member;\n}\n\nexport interface ChangeLoginEmailRequest {\n  /** Member ID. */\n  _id: string;\n  /**\n   * New login email address.\n   * @format EMAIL\n   */\n  newEmail?: string;\n  /**\n   * @internal\n   * @internal */\n  revokeCurrentSessions?: boolean | null;\n}\n\nexport interface ChangeLoginEmailResponse {\n  /** Member with the updated login email address. */\n  member?: Member;\n}\n\nexport interface QueryMembersRequest {\n  /**\n   * query - See https://github.com/wix-private/platformization-guidelines/blob/master/Server/API-Query.md\n   * supported fields: `id`, `login_email`, `status`, `language`, `date_created`, `last_update_date`, `flags`, `name`, `first_name`, `last_name`, `nickname`, `email_verified`, `privacy_status`\n   */\n  query?: string;\n  /** whether to include contact details */\n  includeContactDetails?: boolean;\n  /** whether to include offline members */\n  includeOfflineMembers?: boolean;\n}\n\nexport interface QueryMembersResponse {\n  /** members matching the query criteria */\n  members?: Member[];\n  /** pagination information */\n  pagination?: PaginationResponse;\n}\n\nexport interface DeleteMemberRequest {\n  /** id of member that should be deleted (required) */\n  _id?: string;\n  /** defines if the request is a bulk action */\n  isBulkAction?: boolean;\n}\n\nexport interface DeleteMemberResponse {}\n\nexport interface ApproveMemberRequest\n  extends ApproveMemberRequestMemberIdentifierOneOf {\n  /** ID of the member to approve. */\n  _id?: string;\n  /** Login email address of the member to approve. */\n  email?: string;\n  /** Approval token returned by the [`register()`](#register) function. */\n  token?: string;\n}\n\n/** @oneof */\nexport interface ApproveMemberRequestMemberIdentifierOneOf {\n  /** ID of the member to approve. */\n  _id?: string;\n  /** Login email address of the member to approve. */\n  email?: string;\n  /**\n   * <!--ONLY:VELO\n   * Approval token returned by `register()`.\n   * <!--END:ONLY:VELO-->\n   */\n  token?: string;\n}\n\nexport interface ApproveMemberResponse {\n  /** Approval session token. */\n  session?: Session;\n}\n\nexport interface Session {\n  /** Session token when the current member is logged into the site. */\n  token?: string | null;\n}\n\nexport interface BlockMemberRequest\n  extends BlockMemberRequestMemberIdentifierOneOf {\n  /** ID of the member to block. */\n  _id?: string;\n  /** Login email address of the member to block. */\n  email?: string;\n  /**\n   * @internal\n   * @internal */\n  source?: Source;\n}\n\n/** @oneof */\nexport interface BlockMemberRequestMemberIdentifierOneOf {\n  _id?: string;\n  /** Login email address of the member to block. */\n  email?: string;\n}\n\nexport enum Source {\n  UNKNOWN = 'UNKNOWN',\n  HANDLING_SPAM = 'HANDLING_SPAM',\n}\n\nexport interface BlockMemberResponse {}\n\nexport interface MakeMemberOfflineRequest {\n  /**\n   * unique identifier of the requested member\n   * @format GUID\n   */\n  _id?: string;\n}\n\nexport interface MakeMemberOfflineResponse {}\n\n/** Registration options. */\nexport interface RegisterRequest {\n  /** Login email address for the new site member. */\n  email?: string;\n  /**\n   * Password the new site member will use to log in.\n   *\n   * Must be 4 to 15 ASCII-printable characters.\n   */\n  password?: string;\n  /** Contact information for the registered member. */\n  contactInfo?: MemberContactInfo;\n  /**\n   * @internal\n   * @internal */\n  dialogData?: DialogData;\n  /**\n   * Sets the privacy status of a new member upon registration.\n   *\n   * - `PUBLIC`: Member is visible to everyone.\n   * - `PRIVATE`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.\n   * - `UNKNOWN`: Insufficient permissions to get the status.\n   */\n  profilePrivacyStatus?: SiteMemberPrivacyStatus;\n  /**\n   * @internal\n   * @internal */\n  isOfflineRegistration?: boolean;\n  /**\n   * @internal\n   * @internal */\n  recaptchaToken?: string | null;\n  /**\n   * @internal\n   * @internal */\n  invisibleRecaptchaToken?: string | null;\n  /**\n   * @internal\n   * @internal */\n  emailVerification?: EmailVerification;\n  /**\n   * @internal\n   * @internal */\n  isMobile?: boolean | null;\n}\n\nexport interface MemberContactInfo {\n  /** First name. */\n  firstName?: string | null;\n  /** Last name. */\n  lastName?: string | null;\n  /**\n   * Contact's profile picture.\n   * @format URI\n   */\n  picture?: string | null;\n  /** Contact's email addresses. */\n  emails?: string[];\n  /** Contact's phone numbers. */\n  phones?: string[];\n  /** List of contact's labels. */\n  labels?: string[];\n  /**\n   * @internal\n   * @internal\n   * @format LANGUAGE\n   */\n  locale?: string | null;\n  /**\n   * Any number of custom fields.\n   * [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)\n   * are used to store additional information about your site's contacts.\n   * When setting a custom field, use key:value pairs,\n   * where the key matches the names defined in your site's\n   * [Contact List](https://support.wix.com/en/article/accessing-your-contact-list).\n   * You can only set values for custom fields that already exist in the Contacts application.\n   */\n  customFields?: CustomField[];\n}\n\nexport interface DialogData {\n  visitorId?: string | null;\n  appId?: string | null;\n  initiator?: string | null;\n}\n\nexport interface EmailVerification {\n  /** ID of the verification process. */\n  verificationId?: string;\n  /**\n   * 6-digit code for verification.  Code can be between 100000 and 999999.\n   *\n   * @minLength 6\n   * @maxLength 6\n   */\n  otp?: string;\n}\n\nexport interface RegisterResponse {\n  /** Newly registered member. */\n  member?: Member;\n  /**\n   * in case the site is open for registration, all members are automatically\n   * approved. they will get a temporary token for obtaining a valid session\n   */\n  session?: Session;\n  /**\n   * in case the site requires members approval, the registered member\n   * will be an applicant until he's approved. the token can be used as a member\n   * identifier for approval using the `MembersService.Approve` API\n   */\n  approvalToken?: string | null;\n}\n\nexport interface EmailVerificationRequired {\n  /** ID of the verification process. */\n  verificationId?: string;\n}\n\nexport interface EmailVerificationFailed {\n  /** ID of the failed verification process.  */\n  verificationId?: string;\n  /** Reason for verification failure. */\n  verificationFailureReason?: VerificationFailureReason;\n}\n\nexport enum VerificationFailureReason {\n  /** Default value - means no failure */\n  UNSPECIFIED = 'UNSPECIFIED',\n  /** Bad verification code */\n  BAD_CODE = 'BAD_CODE',\n  /** Verification code was not found */\n  NOT_FOUND = 'NOT_FOUND',\n  /** Error while sending the code to the user */\n  SEND_CODE_ERROR = 'SEND_CODE_ERROR',\n}\n\nexport interface LoginRequest {\n  /** Login email address. */\n  email?: string;\n  /** Member password. */\n  password?: string;\n  /**\n   * @internal\n   * @internal */\n  recaptchaToken?: string;\n  /**\n   * @internal\n   * @internal */\n  invisibleRecaptchaToken?: string;\n  /**\n   * @internal\n   * @internal */\n  emailVerification?: EmailVerification;\n  /**\n   * @internal\n   * @internal */\n  isMobile?: boolean | null;\n}\n\n/** Session token for logging the member in. */\nexport interface LoginResponse {\n  /** Session token. */\n  session?: Session;\n  /** the member's details */\n  member?: Member;\n}\n\nexport interface GetResetPasswordLinkRequest {\n  /** Contact ID of the member whose password will be reset. */\n  contactId?: string;\n}\n\nexport interface GetResetPasswordLinkResponse {\n  /**\n   * Reset password link.\n   * Valid for one use, up to two weeks from when it is created.\n   */\n  resetPasswordLink?: string;\n}\n\nexport interface SendSetPasswordEmailRequest {\n  /** Login email of the member whose password will be set. */\n  email: string;\n  /**\n   * @internal\n   * @internal\n   * @deprecated\n   */\n  requestedByMember?: boolean;\n  /**\n   * Whether to hide the ignore this email message .\n   *\n   * If `true`, the email tells the member\n   * they can safely ignore\n   * if they did not request the password change.\n   *\n   * Default: `false`.\n   */\n  hideIgnoreMessage?: boolean;\n}\n\nexport interface SendSetPasswordEmailResponse {\n  /** Indicates if the request was successfully received. */\n  accepted?: boolean;\n}\n\nexport interface ResetPasswordRequest {\n  /** Contact ID of the member whose password will be reset. */\n  contactId?: string;\n}\n\nexport interface ResetPasswordResponse {\n  /** Indicates if the request was successfully received. */\n  accepted?: boolean;\n}\n\nexport interface SocialLoginRequest extends SocialLoginRequestLoginOneOf {\n  appleLogin?: AppleLogin;\n  googleLogin?: GoogleLogin;\n  facebookLogin?: FacebookLogin;\n  /**\n   * Must either pass explicit msid OR signed instance with visitor\n   * @format GUID\n   */\n  metaSiteId?: string | null;\n}\n\n/** @oneof */\nexport interface SocialLoginRequestLoginOneOf {\n  appleLogin?: AppleLogin;\n  googleLogin?: GoogleLogin;\n  facebookLogin?: FacebookLogin;\n}\n\nexport interface AppleLogin {\n  /** JWT signed by apple, contains target (aud), email etc */\n  token?: string;\n}\n\nexport interface GoogleLogin {\n  /** JWT signed by Google, contains target (aud), email etc */\n  token?: string;\n}\n\nexport interface FacebookLogin {\n  /** AccessToken created by Facebook, used to later fetch details over API */\n  token?: string;\n}\n\ntype MemberNonNullablePaths =\n  | `_id`\n  | `emailVerified`\n  | `role`\n  | `profilePrivacyStatus`\n  | `status`\n  | `emails`\n  | `phones`\n  | `addresses`\n  | `labels`\n  | `customFields`\n  | `customFields.${number}.numValue`\n  | `customFields.${number}.name`\n  | `groups`\n  | `groups.${number}._id`\n  | `groups.${number}.name`\n  | `groups.${number}.type`;\n\n/**\n * Changes a member's login email address.\n *\n * After running this function, the specified member can log in with the new email address. If the member uses social login (for example, Google login) and the member tries to log in with the old email address, they will be re-registered with the old email address.\n *\n * Site collaborators can use `changeLoginEmail()` to change another member's login email. Members who are not site collaborators can use `changeLoginEmail()` to change their own login email only.\n *\n * > **Note:** `changeLoginEmail()` cannot be used to change the login email of a site collaborator. Site collaborators can change their login emails from their Wix [account settings](https://manage.wix.com/account/account-settings).\n * @param _id - Member ID.\n * @param newEmail - New login email address.\n * @public\n * @documentationMaturity preview\n * @requiredField _id\n * @requiredField newEmail\n * @param options - Options for changing a login email address.\n * @fqn wix.members.api.v1.MembersService.ChangeLoginEmail\n */\nexport async function changeLoginEmail(\n  _id: string,\n  newEmail: string,\n  options?: ChangeLoginEmailOptions\n): Promise<\n  NonNullablePaths<\n    ChangeLoginEmailResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    newEmail: newEmail,\n    revokeCurrentSessions: options?.revokeCurrentSessions,\n  });\n\n  const reqOpts =\n    ambassadorWixIdentityMembersV1Member.changeLoginEmail(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'member.picture' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          id: '$[0]',\n          newEmail: '$[1]',\n          revokeCurrentSessions: '$[2].revokeCurrentSessions',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'newEmail', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ChangeLoginEmailOptions {\n  /**\n   * @internal\n   * @internal */\n  revokeCurrentSessions?: boolean | null;\n}\n\n/**\n * Approves a pending member using an ID, email address or approval token.\n *\n * Tokens must be approved within 30 hours of token creation.\n * Use the `approvalToken` parameter returned from the\n * [`register()`](#register) function when approving a member by `token`.\n *\n * > **Note:**\n * > A new member's status is `\"PENDING\"` when the site's membership policy is set to manual approval.\n * > To learn more about setting your site's membership approval policy, see\n * > [Editing Your Member Signup Settings](https://support.wix.com/en/article/editing-your-member-signup-settings-for-the-default-form).\n *\n * Members are typically associated with a contact, each having a distinct member and contact ID. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.\n * @public\n * @documentationMaturity preview\n * @permissionId MEMBERS.MEMBER_APPROVE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn wix.members.api.v1.MembersService.Approve\n */\nexport async function approve(\n  options?: ApproveOptions\n): Promise<ApproveMemberResponse> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: options?._id,\n    email: options?.email,\n    token: options?.token,\n  });\n\n  const reqOpts = ambassadorWixIdentityMembersV1Member.approve(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          id: '$[0]._id',\n          email: '$[0].email',\n          token: '$[0].token',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ApproveOptions extends ApproveOptionsMemberIdentifierOneOf {\n  /** ID of the member to approve. */\n  _id?: string;\n  /** Login email address of the member to approve. */\n  email?: string;\n  /** Approval token returned by the [`register()`](#register) function. */\n  token?: string;\n}\n\n/** @oneof */\nexport interface ApproveOptionsMemberIdentifierOneOf {\n  /** ID of the member to approve. */\n  _id?: string;\n  /** Login email address of the member to approve. */\n  email?: string;\n  /**\n   * <!--ONLY:VELO\n   * Approval token returned by `register()`.\n   * <!--END:ONLY:VELO-->\n   */\n  token?: string;\n}\n\n/**\n * Blocks a member from logging in to the site using an ID or email address.\n *\n * To unblock the member and allow them to log in to the site, use the [`approve()`](#approve) function.\n * @public\n * @documentationMaturity preview\n * @param options - Options for blocking a member from logging in.\n * @fqn wix.members.api.v1.MembersService.Block\n */\nexport async function block(options?: BlockOptions): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: options?._id,\n    email: options?.email,\n    source: options?.source,\n  });\n\n  const reqOpts = ambassadorWixIdentityMembersV1Member.block(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          id: '$[0]._id',\n          email: '$[0].email',\n          source: '$[0].source',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BlockOptions extends BlockOptionsMemberIdentifierOneOf {\n  /** ID of the member to block. */\n  _id?: string;\n  /** Login email address of the member to block. */\n  email?: string;\n  /**\n   * @internal\n   * @internal */\n  source?: Source;\n}\n\n/** @oneof */\nexport interface BlockOptionsMemberIdentifierOneOf {\n  _id?: string;\n  /** Login email address of the member to block. */\n  email?: string;\n}\n\n/**\n * Registers a new site member.\n *\n * The specified `password` must be between 4 and 100 ASCII characters.\n *\n * >**Note:** The `register()` function behaves differently depending on your site's [member signup settings](https://dev.wix.com/docs/develop-websites/articles/wix-apps/wix-members/enabling-custom-site-registration).\n * @param email - Login email address for the new site member.\n * @param password - Password the new site member will use to log in.\n *\n * Must be 4 to 15 ASCII-printable characters.\n * @public\n * @documentationMaturity preview\n * @requiredField email\n * @requiredField password\n * @param options - Options for registering a new member.\n * @fqn wix.members.api.v1.AuthService.Register\n */\nexport async function register(\n  email: string,\n  password: string,\n  options?: RegisterOptions\n): Promise<\n  NonNullablePaths<\n    RegisterResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    email: email,\n    password: password,\n    contactInfo: options?.contactInfo,\n    dialogData: options?.dialogData,\n    profilePrivacyStatus: options?.profilePrivacyStatus,\n    isOfflineRegistration: options?.isOfflineRegistration,\n    recaptchaToken: options?.recaptchaToken,\n    invisibleRecaptchaToken: options?.invisibleRecaptchaToken,\n    emailVerification: options?.emailVerification,\n    isMobile: options?.isMobile,\n  });\n\n  const reqOpts = ambassadorWixIdentityMembersV1Member.register(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'member.picture' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          email: '$[0]',\n          password: '$[1]',\n          contactInfo: '$[2].contactInfo',\n          dialogData: '$[2].dialogData',\n          profilePrivacyStatus: '$[2].profilePrivacyStatus',\n          isOfflineRegistration: '$[2].isOfflineRegistration',\n          recaptchaToken: '$[2].recaptchaToken',\n          invisibleRecaptchaToken: '$[2].invisibleRecaptchaToken',\n          emailVerification: '$[2].emailVerification',\n          isMobile: '$[2].isMobile',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['email', 'password', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface RegisterOptions {\n  /** Contact information for the registered member. */\n  contactInfo?: MemberContactInfo;\n  /** @internal */\n  dialogData?: DialogData;\n  /**\n   * Sets the privacy status of a new member upon registration.\n   *\n   * - `PUBLIC`: Member is visible to everyone.\n   * - `PRIVATE`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.\n   * - `UNKNOWN`: Insufficient permissions to get the status.\n   */\n  profilePrivacyStatus?: SiteMemberPrivacyStatus;\n  /** @internal */\n  isOfflineRegistration?: boolean;\n  /** @internal */\n  recaptchaToken?: string | null;\n  /** @internal */\n  invisibleRecaptchaToken?: string | null;\n  /**\n   * Email verification.\n   * @internal */\n  emailVerification?: EmailVerification;\n  /** @internal */\n  isMobile?: boolean | null;\n}\n\n/**\n * Logs in a registered member with an email and password.\n *\n * The `login()` function only works with existing members. To register a new member use the [`register()`](#register) function.\n *\n * To complete the login, the returned session token must be applied using the `applySessionToken()` function in the wix-members-frontend API.\n * @param email - Login email address.\n * @param password - Member password.\n * @public\n * @documentationMaturity preview\n * @requiredField email\n * @requiredField password\n * @param options - Options for logging in a member.\n * @returns Session token for logging the member in.\n * @fqn wix.members.api.v1.AuthService.Login\n */\nexport async function login(\n  email: string,\n  password: string,\n  options?: LoginOptions\n): Promise<\n  NonNullablePaths<\n    LoginResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[3] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    email: email,\n    password: password,\n    recaptchaToken: options?.recaptchaToken,\n    invisibleRecaptchaToken: options?.invisibleRecaptchaToken,\n    emailVerification: options?.emailVerification,\n    isMobile: options?.isMobile,\n  });\n\n  const reqOpts = ambassadorWixIdentityMembersV1Member.login(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(result.data, [\n        {\n          transformFn: transformRESTImageToSDKImage,\n          paths: [{ path: 'member.picture' }],\n        },\n      ])\n    )!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          email: '$[0]',\n          password: '$[1]',\n          recaptchaToken: '$[2].recaptchaToken',\n          invisibleRecaptchaToken: '$[2].invisibleRecaptchaToken',\n          emailVerification: '$[2].emailVerification',\n          isMobile: '$[2].isMobile',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['email', 'password', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface LoginOptions {\n  /** @internal */\n  recaptchaToken?: string;\n  /** @internal */\n  invisibleRecaptchaToken?: string;\n  /** @internal */\n  emailVerification?: EmailVerification;\n  /** @internal */\n  isMobile?: boolean | null;\n}\n\n/**\n * Sends a site member an email with a link to set their password.\n *\n * The set password link is valid for 3 hours,\n * and it can be used only once.\n * If the link expires, the original password remains.\n * @param email - Login email of the member whose password will be set.\n * @public\n * @documentationMaturity preview\n * @requiredField email\n * @param options - Email display options.\n * @permissionId MEMBERS.SEND_SET_PASSWORD_EMAIL\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn wix.members.api.v1.AuthService.SendSetPasswordEmail\n */\nexport async function sendSetPasswordEmail(\n  email: string,\n  options?: SendSetPasswordEmailOptions\n): Promise<NonNullablePaths<SendSetPasswordEmailResponse, `accepted`>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    email: email,\n    requestedByMember: options?.requestedByMember,\n    hideIgnoreMessage: options?.hideIgnoreMessage,\n  });\n\n  const reqOpts =\n    ambassadorWixIdentityMembersV1Member.sendSetPasswordEmail(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          email: '$[0]',\n          requestedByMember: '$[1].requestedByMember',\n          hideIgnoreMessage: '$[1].hideIgnoreMessage',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['email', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface SendSetPasswordEmailOptions {\n  /**\n   * @internal\n   * @internal\n   * @deprecated\n   */\n  requestedByMember?: boolean;\n  /**\n   * Whether to hide the ignore this email message .\n   *\n   * If `true`, the email tells the member\n   * they can safely ignore\n   * if they did not request the password change.\n   *\n   * Default: `false`.\n   */\n  hideIgnoreMessage?: boolean;\n}\n","import { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveWixMembersApiV1AuthServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/wix-sm/api/v1/auth',\n        destPath: '',\n      },\n      {\n        srcPath: '/members/v1/wix-sm-webapp-proxy/v1/auth',\n        destPath: '/api/v1/auth',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nfunction resolveWixMembersApiV1MembersServiceUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'api._api_base_domain_': [\n      {\n        srcPath: '/wix-sm-members-proxy',\n        destPath: '',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    '*.pub.wix-code.com': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'bo._base_domain_': [\n      {\n        srcPath: '/wow/data-hub/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/wow/bulx/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'wixbo.ai': [\n      {\n        srcPath: '/wow/data-hub/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/wow/bulx/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'wix-bo.com': [\n      {\n        srcPath: '/wow/data-hub/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/wow/bulx/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'dev._base_domain_': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'editor.wixapps.net': [\n      {\n        srcPath: '/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'forums._base_domain_': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'groups.wixapps.net': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/corvid/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'sslusers._base_domain_': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/wix-sm/api/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'users._base_domain_': [\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/wix-sm/api/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/blacklivesmatter/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/corvid/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm-webapp/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/_api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n      {\n        srcPath: '/api/wix-sm/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/api/v1/members',\n        destPath: '/api/v1/members',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_members_authentication';\n\n/**\n * Changes a member's login email address.\n *\n * After running this function, the specified member can log in with the new email address. If the member uses social login (for example, Google login) and the member tries to log in with the old email address, they will be re-registered with the old email address.\n *\n * Site collaborators can use `changeLoginEmail()` to change another member's login email. Members who are not site collaborators can use `changeLoginEmail()` to change their own login email only.\n *\n * > **Note:** `changeLoginEmail()` cannot be used to change the login email of a site collaborator. Site collaborators can change their login emails from their Wix [account settings](https://manage.wix.com/account/account-settings).\n */\nexport function changeLoginEmail(payload: object): RequestOptionsFactory<any> {\n  function __changeLoginEmail({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.identity.members.v1.member',\n      method: 'PATCH' as any,\n      methodFqn: 'wix.members.api.v1.MembersService.ChangeLoginEmail',\n      packageName: PACKAGE_NAME,\n      url: resolveWixMembersApiV1MembersServiceUrl({\n        protoPath: '/api/v1/members/{id}/change-login-email',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.creationDate' },\n              { path: 'member.lastUpdateDate' },\n              { path: 'member.lastLoginDate' },\n              { path: 'member.customFields.dateValue' },\n              { path: 'member.picture.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'member.customFields.numValue' },\n              { path: 'member.picture.focalPoint.x' },\n              { path: 'member.picture.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __changeLoginEmail;\n}\n\n/**\n * Approves a pending member using an ID, email address or approval token.\n *\n * Tokens must be approved within 30 hours of token creation.\n * Use the `approvalToken` parameter returned from the\n * [`register()`](#register) function when approving a member by `token`.\n *\n * > **Note:**\n * > A new member's status is `\"PENDING\"` when the site's membership policy is set to manual approval.\n * > To learn more about setting your site's membership approval policy, see\n * > [Editing Your Member Signup Settings](https://support.wix.com/en/article/editing-your-member-signup-settings-for-the-default-form).\n *\n * Members are typically associated with a contact, each having a distinct member and contact ID. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.\n */\nexport function approve(payload: object): RequestOptionsFactory<any> {\n  function __approve({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.identity.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'wix.members.api.v1.MembersService.Approve',\n      packageName: PACKAGE_NAME,\n      url: resolveWixMembersApiV1MembersServiceUrl({\n        protoPath: '/api/v1/members/approve',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __approve;\n}\n\n/**\n * Blocks a member from logging in to the site using an ID or email address.\n *\n * To unblock the member and allow them to log in to the site, use the [`approve()`](#approve) function.\n */\nexport function block(payload: object): RequestOptionsFactory<any> {\n  function __block({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.identity.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'wix.members.api.v1.MembersService.Block',\n      packageName: PACKAGE_NAME,\n      url: resolveWixMembersApiV1MembersServiceUrl({\n        protoPath: '/api/v1/members/block',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __block;\n}\n\n/**\n * Registers a new site member.\n *\n * The specified `password` must be between 4 and 100 ASCII characters.\n *\n * >**Note:** The `register()` function behaves differently depending on your site's [member signup settings](https://dev.wix.com/docs/develop-websites/articles/wix-apps/wix-members/enabling-custom-site-registration).\n */\nexport function register(payload: object): RequestOptionsFactory<any> {\n  function __register({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKFloatToRESTFloat,\n        paths: [{ path: 'contactInfo.customFields.numValue' }],\n      },\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'contactInfo.customFields.dateValue' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.identity.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'wix.members.api.v1.AuthService.Register',\n      packageName: PACKAGE_NAME,\n      url: resolveWixMembersApiV1AuthServiceUrl({\n        protoPath: '/api/v1/auth/register',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.creationDate' },\n              { path: 'member.lastUpdateDate' },\n              { path: 'member.lastLoginDate' },\n              { path: 'member.customFields.dateValue' },\n              { path: 'member.picture.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'member.customFields.numValue' },\n              { path: 'member.picture.focalPoint.x' },\n              { path: 'member.picture.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __register;\n}\n\n/**\n * Logs in a registered member with an email and password.\n *\n * The `login()` function only works with existing members. To register a new member use the [`register()`](#register) function.\n *\n * To complete the login, the returned session token must be applied using the `applySessionToken()` function in the wix-members-frontend API.\n */\nexport function login(payload: object): RequestOptionsFactory<any> {\n  function __login({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.identity.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'wix.members.api.v1.AuthService.Login',\n      packageName: PACKAGE_NAME,\n      url: resolveWixMembersApiV1AuthServiceUrl({\n        protoPath: '/api/v1/auth/login',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.creationDate' },\n              { path: 'member.lastUpdateDate' },\n              { path: 'member.lastLoginDate' },\n              { path: 'member.customFields.dateValue' },\n              { path: 'member.picture.urlExpirationDate' },\n            ],\n          },\n          {\n            transformFn: transformRESTFloatToSDKFloat,\n            paths: [\n              { path: 'member.customFields.numValue' },\n              { path: 'member.picture.focalPoint.x' },\n              { path: 'member.picture.focalPoint.y' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __login;\n}\n\n/**\n * Sends a site member an email with a link to set their password.\n *\n * The set password link is valid for 3 hours,\n * and it can be used only once.\n * If the link expires, the original password remains.\n */\nexport function sendSetPasswordEmail(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __sendSetPasswordEmail({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.identity.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'wix.members.api.v1.AuthService.SendSetPasswordEmail',\n      packageName: PACKAGE_NAME,\n      url: resolveWixMembersApiV1AuthServiceUrl({\n        protoPath: '/v1/auth/members/send-set-password-email',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __sendSetPasswordEmail;\n}\n","import { HttpClient } from '@wix/sdk-types';\nimport {\n  ApproveMemberResponse,\n  ApproveOptions,\n  BlockOptions,\n  ChangeLoginEmailOptions,\n  ChangeLoginEmailResponse,\n  LoginOptions,\n  LoginResponse,\n  RegisterOptions,\n  RegisterResponse,\n  SendSetPasswordEmailOptions,\n  SendSetPasswordEmailResponse,\n  approve as universalApprove,\n  block as universalBlock,\n  changeLoginEmail as universalChangeLoginEmail,\n  login as universalLogin,\n  register as universalRegister,\n  sendSetPasswordEmail as universalSendSetPasswordEmail,\n} from './identity-members-v1-member-authentication.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/members' };\n\nexport function changeLoginEmail(\n  httpClient: HttpClient\n): ChangeLoginEmailSignature {\n  return (_id: string, newEmail: string, options?: ChangeLoginEmailOptions) =>\n    universalChangeLoginEmail(\n      _id,\n      newEmail,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ChangeLoginEmailSignature {\n  /**\n   * Changes a member's login email address.\n   *\n   * After running this function, the specified member can log in with the new email address. If the member uses social login (for example, Google login) and the member tries to log in with the old email address, they will be re-registered with the old email address.\n   *\n   * Site collaborators can use `changeLoginEmail()` to change another member's login email. Members who are not site collaborators can use `changeLoginEmail()` to change their own login email only.\n   *\n   * > **Note:** `changeLoginEmail()` cannot be used to change the login email of a site collaborator. Site collaborators can change their login emails from their Wix [account settings](https://manage.wix.com/account/account-settings).\n   * @param - Member ID.\n   * @param - New login email address.\n   * @param - Options for changing a login email address.\n   */\n  (\n    _id: string,\n    newEmail: string,\n    options?: ChangeLoginEmailOptions | undefined\n  ): Promise<ChangeLoginEmailResponse>;\n}\n\nexport function approve(httpClient: HttpClient): ApproveSignature {\n  return (options?: ApproveOptions) =>\n    universalApprove(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ApproveSignature {\n  /**\n   * Approves a pending member using an ID, email address or approval token.\n   *\n   * Tokens must be approved within 30 hours of token creation.\n   * Use the `approvalToken` parameter returned from the\n   * [`register()`](#register) function when approving a member by `token`.\n   *\n   * > **Note:**\n   * > A new member's status is `\"PENDING\"` when the site's membership policy is set to manual approval.\n   * > To learn more about setting your site's membership approval policy, see\n   * > [Editing Your Member Signup Settings](https://support.wix.com/en/article/editing-your-member-signup-settings-for-the-default-form).\n   *\n   * Members are typically associated with a contact, each having a distinct member and contact ID. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.\n   */\n  (options?: ApproveOptions | undefined): Promise<ApproveMemberResponse>;\n}\n\nexport function block(httpClient: HttpClient): BlockSignature {\n  return (options?: BlockOptions) =>\n    universalBlock(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BlockSignature {\n  /**\n   * Blocks a member from logging in to the site using an ID or email address.\n   *\n   * To unblock the member and allow them to log in to the site, use the [`approve()`](#approve) function.\n   * @param - Options for blocking a member from logging in.\n   */\n  (options?: BlockOptions | undefined): Promise<void>;\n}\n\nexport function register(httpClient: HttpClient): RegisterSignature {\n  return (email: string, password: string, options?: RegisterOptions) =>\n    universalRegister(\n      email,\n      password,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface RegisterSignature {\n  /**\n   * Registers a new site member.\n   *\n   * The specified `password` must be between 4 and 100 ASCII characters.\n   *\n   * >**Note:** The `register()` function behaves differently depending on your site's [member signup settings](https://dev.wix.com/docs/develop-websites/articles/wix-apps/wix-members/enabling-custom-site-registration).\n   * @param - Login email address for the new site member.\n   * @param - Password the new site member will use to log in.\n   *\n   * Must be 4 to 15 ASCII-printable characters.\n   * @param - Options for registering a new member.\n   */\n  (\n    email: string,\n    password: string,\n    options?: RegisterOptions | undefined\n  ): Promise<RegisterResponse>;\n}\n\nexport function login(httpClient: HttpClient): LoginSignature {\n  return (email: string, password: string, options?: LoginOptions) =>\n    universalLogin(\n      email,\n      password,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface LoginSignature {\n  /**\n   * Logs in a registered member with an email and password.\n   *\n   * The `login()` function only works with existing members. To register a new member use the [`register()`](#register) function.\n   *\n   * To complete the login, the returned session token must be applied using the `applySessionToken()` function in the wix-members-frontend API.\n   * @param - Login email address.\n   * @param - Member password.\n   * @param - Options for logging in a member.\n   * @returns Session token for logging the member in.\n   */\n  (\n    email: string,\n    password: string,\n    options?: LoginOptions | undefined\n  ): Promise<LoginResponse>;\n}\n\nexport function sendSetPasswordEmail(\n  httpClient: HttpClient\n): SendSetPasswordEmailSignature {\n  return (email: string, options?: SendSetPasswordEmailOptions) =>\n    universalSendSetPasswordEmail(\n      email,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface SendSetPasswordEmailSignature {\n  /**\n   * Sends a site member an email with a link to set their password.\n   *\n   * The set password link is valid for 3 hours,\n   * and it can be used only once.\n   * If the link expires, the original password remains.\n   * @param - Login email of the member whose password will be set.\n   * @param - Email display options.\n   */\n  (\n    email: string,\n    options?: SendSetPasswordEmailOptions | undefined\n  ): Promise<SendSetPasswordEmailResponse>;\n}\n\nexport {\n  Address,\n  AppleLogin,\n  ApproveMemberRequest,\n  ApproveMemberRequestMemberIdentifierOneOf,\n  ApproveMemberResponse,\n  ApproveOptions,\n  ApproveOptionsMemberIdentifierOneOf,\n  BatchGetMembersRequest,\n  BatchGetMembersResponse,\n  BlockMemberRequest,\n  BlockMemberRequestMemberIdentifierOneOf,\n  BlockMemberResponse,\n  BlockOptions,\n  BlockOptionsMemberIdentifierOneOf,\n  ChangeLoginEmailOptions,\n  ChangeLoginEmailRequest,\n  ChangeLoginEmailResponse,\n  CustomField,\n  CustomFieldValueOneOf,\n  DeleteMemberRequest,\n  DeleteMemberResponse,\n  DialogData,\n  EmailVerification,\n  EmailVerificationFailed,\n  EmailVerificationRequired,\n  FacebookLogin,\n  FilterBy,\n  FocalPoint,\n  GetAuthorizedPagesRequest,\n  GetAuthorizedPagesResponse,\n  GetCurrentMemberRequest,\n  GetMemberRequest,\n  GetMemberResponse,\n  GetMemberRoleRequest,\n  GetMemberRoleResponse,\n  GetMemberRolesRequest,\n  GetMemberRolesResponse,\n  GetResetPasswordLinkRequest,\n  GetResetPasswordLinkResponse,\n  GetUserMembershipsRequest,\n  GetUserMembershipsResponse,\n  GoogleLogin,\n  Group,\n  ListMembersRequest,\n  ListMembersResponse,\n  LoginOptions,\n  LoginRequest,\n  LoginResponse,\n  MakeMemberOfflineRequest,\n  MakeMemberOfflineResponse,\n  Member,\n  MemberContactInfo,\n  MemberRole,\n  PaginationResponse,\n  Paging,\n  QueryMembersRequest,\n  QueryMembersResponse,\n  RegisterOptions,\n  RegisterRequest,\n  RegisterResponse,\n  ResetPasswordRequest,\n  ResetPasswordResponse,\n  Role,\n  SearchBy,\n  SearchRequest,\n  SearchResponse,\n  SendSetPasswordEmailOptions,\n  SendSetPasswordEmailRequest,\n  SendSetPasswordEmailResponse,\n  Session,\n  SiteMemberPrivacyStatus,\n  SiteMemberStatus,\n  SocialLoginRequest,\n  SocialLoginRequestLoginOneOf,\n  Sorting,\n  Source,\n  UpdateMemberRequest,\n  UpdateMemberResponse,\n  UserMembership,\n  VerificationFailureReason,\n} from './identity-members-v1-member-authentication.universal.js';\n","import {\n  changeLoginEmail as publicChangeLoginEmail,\n  approve as publicApprove,\n  block as publicBlock,\n  register as publicRegister,\n  login as publicLogin,\n  sendSetPasswordEmail as publicSendSetPasswordEmail,\n} from './identity-members-v1-member-authentication.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\n\nexport const changeLoginEmail: MaybeContext<\n  BuildRESTFunction<typeof publicChangeLoginEmail> &\n    typeof publicChangeLoginEmail\n> = /*#__PURE__*/ createRESTModule(publicChangeLoginEmail);\nexport const approve: MaybeContext<\n  BuildRESTFunction<typeof publicApprove> & typeof publicApprove\n> = /*#__PURE__*/ createRESTModule(publicApprove);\nexport const block: MaybeContext<\n  BuildRESTFunction<typeof publicBlock> & typeof publicBlock\n> = /*#__PURE__*/ createRESTModule(publicBlock);\nexport const register: MaybeContext<\n  BuildRESTFunction<typeof publicRegister> & typeof publicRegister\n> = /*#__PURE__*/ createRESTModule(publicRegister);\nexport const login: MaybeContext<\n  BuildRESTFunction<typeof publicLogin> & typeof publicLogin\n> = /*#__PURE__*/ createRESTModule(publicLogin);\nexport const sendSetPasswordEmail: MaybeContext<\n  BuildRESTFunction<typeof publicSendSetPasswordEmail> &\n    typeof publicSendSetPasswordEmail\n> = /*#__PURE__*/ createRESTModule(publicSendSetPasswordEmail);\n\nexport {\n  Role,\n  SiteMemberPrivacyStatus,\n  SiteMemberStatus,\n  Sorting,\n  Source,\n  VerificationFailureReason,\n} from './identity-members-v1-member-authentication.universal.js';\nexport {\n  Member,\n  Address,\n  CustomField,\n  CustomFieldValueOneOf,\n  FocalPoint,\n  Group,\n  ListMembersRequest,\n  ListMembersResponse,\n  PaginationResponse,\n  SearchRequest,\n  Paging,\n  SearchBy,\n  FilterBy,\n  SearchResponse,\n  GetCurrentMemberRequest,\n  GetMemberResponse,\n  GetMemberRequest,\n  GetUserMembershipsRequest,\n  GetUserMembershipsResponse,\n  UserMembership,\n  GetMemberRoleRequest,\n  GetMemberRoleResponse,\n  GetMemberRolesRequest,\n  GetMemberRolesResponse,\n  MemberRole,\n  BatchGetMembersRequest,\n  BatchGetMembersResponse,\n  GetAuthorizedPagesRequest,\n  GetAuthorizedPagesResponse,\n  UpdateMemberRequest,\n  UpdateMemberResponse,\n  ChangeLoginEmailRequest,\n  ChangeLoginEmailResponse,\n  QueryMembersRequest,\n  QueryMembersResponse,\n  DeleteMemberRequest,\n  DeleteMemberResponse,\n  ApproveMemberRequest,\n  ApproveMemberRequestMemberIdentifierOneOf,\n  ApproveMemberResponse,\n  Session,\n  BlockMemberRequest,\n  BlockMemberRequestMemberIdentifierOneOf,\n  BlockMemberResponse,\n  MakeMemberOfflineRequest,\n  MakeMemberOfflineResponse,\n  RegisterRequest,\n  MemberContactInfo,\n  DialogData,\n  EmailVerification,\n  RegisterResponse,\n  EmailVerificationRequired,\n  EmailVerificationFailed,\n  LoginRequest,\n  LoginResponse,\n  GetResetPasswordLinkRequest,\n  GetResetPasswordLinkResponse,\n  SendSetPasswordEmailRequest,\n  SendSetPasswordEmailResponse,\n  ResetPasswordRequest,\n  ResetPasswordResponse,\n  SocialLoginRequest,\n  SocialLoginRequestLoginOneOf,\n  AppleLogin,\n  GoogleLogin,\n  FacebookLogin,\n  ChangeLoginEmailOptions,\n  ApproveOptions,\n  ApproveOptionsMemberIdentifierOneOf,\n  BlockOptions,\n  BlockOptionsMemberIdentifierOneOf,\n  RegisterOptions,\n  LoginOptions,\n  SendSetPasswordEmailOptions,\n} from './identity-members-v1-member-authentication.universal.js';\n"],"mappings":"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","names":["payload","transformPaths","Role","SiteMemberPrivacyStatus","SiteMemberStatus","Sorting","Source","VerificationFailureReason","changeLoginEmail","approve","block","register","login","sendSetPasswordEmail","changeLoginEmail","approve","block","register","login","sendSetPasswordEmail","changeLoginEmail","approve","block","register","login","sendSetPasswordEmail"]}