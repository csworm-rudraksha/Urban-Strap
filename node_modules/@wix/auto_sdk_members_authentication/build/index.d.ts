import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { C as ChangeLoginEmailOptions, a as ChangeLoginEmailResponse, A as ApproveOptions, b as ApproveMemberResponse, B as BlockOptions, R as RegisterOptions, c as RegisterResponse, L as LoginOptions, d as LoginResponse, S as SendSetPasswordEmailOptions, e as SendSetPasswordEmailResponse } from './identity-members-v1-member-authentication.universal-4rGjuChc.js';
export { k as Address, al as AppleLogin, $ as ApproveMemberRequest, a0 as ApproveMemberRequestMemberIdentifierOneOf, ao as ApproveOptionsMemberIdentifierOneOf, J as BatchGetMembersRequest, K as BatchGetMembersResponse, a2 as BlockMemberRequest, a3 as BlockMemberRequestMemberIdentifierOneOf, a4 as BlockMemberResponse, ap as BlockOptionsMemberIdentifierOneOf, W as ChangeLoginEmailRequest, l as CustomField, m as CustomFieldValueOneOf, Z as DeleteMemberRequest, _ as DeleteMemberResponse, a9 as DialogData, aa as EmailVerification, ac as EmailVerificationFailed, ab as EmailVerificationRequired, an as FacebookLogin, s as FilterBy, F as FocalPoint, N as GetAuthorizedPagesRequest, O as GetAuthorizedPagesResponse, u as GetCurrentMemberRequest, w as GetMemberRequest, v as GetMemberResponse, z as GetMemberRoleRequest, D as GetMemberRoleResponse, E as GetMemberRolesRequest, H as GetMemberRolesResponse, ae as GetResetPasswordLinkRequest, af as GetResetPasswordLinkResponse, x as GetUserMembershipsRequest, y as GetUserMembershipsResponse, am as GoogleLogin, G as Group, n as ListMembersRequest, o as ListMembersResponse, ad as LoginRequest, a5 as MakeMemberOfflineRequest, a6 as MakeMemberOfflineResponse, M as Member, a8 as MemberContactInfo, I as MemberRole, P as PaginationResponse, q as Paging, X as QueryMembersRequest, Y as QueryMembersResponse, a7 as RegisterRequest, ah as ResetPasswordRequest, ai as ResetPasswordResponse, f as Role, r as SearchBy, p as SearchRequest, t as SearchResponse, ag as SendSetPasswordEmailRequest, a1 as Session, g as SiteMemberPrivacyStatus, h as SiteMemberStatus, aj as SocialLoginRequest, ak as SocialLoginRequestLoginOneOf, i as Sorting, j as Source, Q as UpdateMemberRequest, T as UpdateMemberResponse, U as UserMembership, V as VerificationFailureReason } from './identity-members-v1-member-authentication.universal-4rGjuChc.js';

declare function changeLoginEmail$1(httpClient: HttpClient): ChangeLoginEmailSignature;
interface ChangeLoginEmailSignature {
    /**
     * Changes a member's login email address.
     *
     * After running this function, the specified member can log in with the new email address. If the member uses social login (for example, Google login) and the member tries to log in with the old email address, they will be re-registered with the old email address.
     *
     * Site collaborators can use `changeLoginEmail()` to change another member's login email. Members who are not site collaborators can use `changeLoginEmail()` to change their own login email only.
     *
     * > **Note:** `changeLoginEmail()` cannot be used to change the login email of a site collaborator. Site collaborators can change their login emails from their Wix [account settings](https://manage.wix.com/account/account-settings).
     * @param - Member ID.
     * @param - New login email address.
     * @param - Options for changing a login email address.
     */
    (_id: string, newEmail: string, options?: ChangeLoginEmailOptions | undefined): Promise<ChangeLoginEmailResponse>;
}
declare function approve$1(httpClient: HttpClient): ApproveSignature;
interface ApproveSignature {
    /**
     * Approves a pending member using an ID, email address or approval token.
     *
     * Tokens must be approved within 30 hours of token creation.
     * Use the `approvalToken` parameter returned from the
     * [`register()`](#register) function when approving a member by `token`.
     *
     * > **Note:**
     * > A new member's status is `"PENDING"` when the site's membership policy is set to manual approval.
     * > To learn more about setting your site's membership approval policy, see
     * > [Editing Your Member Signup Settings](https://support.wix.com/en/article/editing-your-member-signup-settings-for-the-default-form).
     *
     * Members are typically associated with a contact, each having a distinct member and contact ID. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.
     */
    (options?: ApproveOptions | undefined): Promise<ApproveMemberResponse>;
}
declare function block$1(httpClient: HttpClient): BlockSignature;
interface BlockSignature {
    /**
     * Blocks a member from logging in to the site using an ID or email address.
     *
     * To unblock the member and allow them to log in to the site, use the [`approve()`](#approve) function.
     * @param - Options for blocking a member from logging in.
     */
    (options?: BlockOptions | undefined): Promise<void>;
}
declare function register$1(httpClient: HttpClient): RegisterSignature;
interface RegisterSignature {
    /**
     * Registers a new site member.
     *
     * The specified `password` must be between 4 and 100 ASCII characters.
     *
     * >**Note:** The `register()` function behaves differently depending on your site's [member signup settings](https://dev.wix.com/docs/develop-websites/articles/wix-apps/wix-members/enabling-custom-site-registration).
     * @param - Login email address for the new site member.
     * @param - Password the new site member will use to log in.
     *
     * Must be 4 to 15 ASCII-printable characters.
     * @param - Options for registering a new member.
     */
    (email: string, password: string, options?: RegisterOptions | undefined): Promise<RegisterResponse>;
}
declare function login$1(httpClient: HttpClient): LoginSignature;
interface LoginSignature {
    /**
     * Logs in a registered member with an email and password.
     *
     * The `login()` function only works with existing members. To register a new member use the [`register()`](#register) function.
     *
     * To complete the login, the returned session token must be applied using the `applySessionToken()` function in the wix-members-frontend API.
     * @param - Login email address.
     * @param - Member password.
     * @param - Options for logging in a member.
     * @returns Session token for logging the member in.
     */
    (email: string, password: string, options?: LoginOptions | undefined): Promise<LoginResponse>;
}
declare function sendSetPasswordEmail$1(httpClient: HttpClient): SendSetPasswordEmailSignature;
interface SendSetPasswordEmailSignature {
    /**
     * Sends a site member an email with a link to set their password.
     *
     * The set password link is valid for 3 hours,
     * and it can be used only once.
     * If the link expires, the original password remains.
     * @param - Login email of the member whose password will be set.
     * @param - Email display options.
     */
    (email: string, options?: SendSetPasswordEmailOptions | undefined): Promise<SendSetPasswordEmailResponse>;
}

declare const changeLoginEmail: MaybeContext<BuildRESTFunction<typeof changeLoginEmail$1> & typeof changeLoginEmail$1>;
declare const approve: MaybeContext<BuildRESTFunction<typeof approve$1> & typeof approve$1>;
declare const block: MaybeContext<BuildRESTFunction<typeof block$1> & typeof block$1>;
declare const register: MaybeContext<BuildRESTFunction<typeof register$1> & typeof register$1>;
declare const login: MaybeContext<BuildRESTFunction<typeof login$1> & typeof login$1>;
declare const sendSetPasswordEmail: MaybeContext<BuildRESTFunction<typeof sendSetPasswordEmail$1> & typeof sendSetPasswordEmail$1>;

export { ApproveMemberResponse, ApproveOptions, BlockOptions, ChangeLoginEmailOptions, ChangeLoginEmailResponse, LoginOptions, LoginResponse, RegisterOptions, RegisterResponse, SendSetPasswordEmailOptions, SendSetPasswordEmailResponse, approve, block, changeLoginEmail, login, register, sendSetPasswordEmail };
