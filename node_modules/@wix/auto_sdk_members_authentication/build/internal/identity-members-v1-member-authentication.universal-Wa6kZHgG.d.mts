interface Member {
    /**
     * Member ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * @internal
     * @internal
     * @readonly
     */
    emailVerified?: boolean;
    /**
     * @internal
     * @internal */
    role?: Role;
    /**
     * Email used by the member to log in to the site.
     *
     *
     * @format EMAIL
     */
    loginEmail?: string | null;
    /**
     * @internal
     * @internal */
    memberName?: string | null;
    /** Member's first name. */
    firstName?: string | null;
    /** Member's last name. */
    lastName?: string | null;
    /**
     * @internal
     * @internal
     * @format URI
     * @deprecated
     */
    imageUrl?: string | null;
    /** Name that identifies the member to other members. Displayed on the member's profile page and interactions in the forum or blog. */
    nickname?: string | null;
    /**
     * Member privacy status.
     *
     * One of:
     * - `"PUBLIC"`: Member is visible to everyone.
     * - `"PRIVATE"`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.
     * - `"UNKNOWN"`: Insufficient permissions to get the status.
     */
    profilePrivacyStatus?: SiteMemberPrivacyStatus;
    /** URL segment that determines the member's profile page. */
    slug?: string | null;
    /**
     * @internal
     * @internal */
    language?: string | null;
    /**
     * Member site access status.
     *
     * One of:
     * - `"PENDING"`: Member created and is waiting for approval by site owner.
     * - `"APPROVED"`: Member can log in to the site.
     * - "OFFLINE"`: Member is a guest author for the site blog and cannot log in to the site.
     * - `"BLOCKED"`: Member is blocked and cannot log in to the site.
     * - `"UNKNOWN"`: Insufficient permissions to get the status.
     */
    status?: SiteMemberStatus;
    /**
     * Date and time when the member was created.
     * @readonly
     */
    creationDate?: Date | null;
    /**
     * Date and time when the member was last updated.
     *
     *
     * @readonly
     */
    lastUpdateDate?: Date | null;
    /**
     * Date and time when the member last logged in to the site.
     *
     * @readonly
     */
    lastLoginDate?: Date | null;
    /**
     * List of email addresses.
     *
     *
     */
    emails?: string[];
    /** List of phone numbers.  */
    phones?: string[];
    /** List of street addresses. */
    addresses?: Address[];
    /**
     * @internal
     * @internal */
    labels?: string[];
    /**
     * Custom fields, structured as key:object pairs. Custom field keys are defined in the Contacts Extended Fields API. The paired object contains the `name` and `value` properties, where `name` is the display name and `value` is the value stored for the member.
     *
     * Only custom fields added to the member profile in the Dashboard are available through the Members API. Empty fields are not returned.
     *
     * When updating a member, `name` is ignored.
     */
    customFields?: CustomField[];
    /** Member's profile picture URL. */
    picture?: string;
    /**
     * @internal
     * @internal */
    userId?: string | null;
    /**
     * @internal
     * @internal */
    groups?: Group[];
    /**
     * Member's contact ID.
     * @readonly
     */
    contactId?: string | null;
}
declare enum Role {
    UNDEFINED_ROLE = "UNDEFINED_ROLE",
    MEMBER = "MEMBER",
    OWNER = "OWNER",
    CONTRIBUTOR = "CONTRIBUTOR"
}
declare enum SiteMemberPrivacyStatus {
    UNDEFINED = "UNDEFINED",
    PUBLIC = "PUBLIC",
    PRIVATE = "PRIVATE",
    COMMUNITY = "COMMUNITY"
}
declare enum SiteMemberStatus {
    UNDEFINED_STATUS = "UNDEFINED_STATUS",
    APPLICANT = "APPLICANT",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE",
    BLOCKED = "BLOCKED",
    OFFLINE_ONLY = "OFFLINE_ONLY"
}
interface Address {
    /** Street address. */
    street?: string | null;
    /** City name. */
    city?: string | null;
    /** Region name. */
    region?: string | null;
    /** 2-letter country code in an [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. */
    country?: string | null;
    /** Postal code. */
    postalCode?: string | null;
}
interface CustomField extends CustomFieldValueOneOf {
    /** String value. */
    strValue?: string | null;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** Display name. */
    name?: string;
}
/** @oneof */
interface CustomFieldValueOneOf {
    strValue?: string | null;
    numValue?: number;
    dateValue?: Date | null;
}
interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
interface Group {
    /** @format GUID */
    _id?: string;
    name?: string;
    type?: string;
}
interface ListMembersRequest {
    /** for paging - maximum number of records to retrieve */
    limit?: number;
    /** for paging - how many records to skip */
    offset?: number;
    /** sort order - list of field and direction tuples. e.g. `["first_name:asc", "last_name:desc"]` */
    order?: string[];
    /** partial response request - list of field names to get back in response */
    fields?: string[];
    /** filter members with specific status */
    status?: SiteMemberStatus;
    /** whether to include contact details */
    includeContactDetails?: boolean;
}
interface ListMembersResponse {
    /** members returned by List request */
    members?: Member[];
    /** pagination information */
    pagination?: PaginationResponse;
}
interface PaginationResponse {
    /** offset that was applied to the request */
    offset?: number;
    /** limit that was applied to the request */
    limit?: number;
    /** total rows available */
    total?: number;
    /** indication that the total count was too expensive to calculate */
    tooManyToCount?: boolean;
}
interface SearchRequest {
    /** paging - offset and limit */
    paging?: Paging;
    /** search by field */
    searchBy?: SearchBy;
    /** partial response request - list of field names to get back in response */
    fields?: string[];
    /** filters */
    filterBy?: FilterBy;
    /** ASC or DESC order */
    sort?: Sorting;
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface SearchBy {
    /** nick name filter */
    nickname?: string | null;
}
interface FilterBy {
    /** filter members with specific status */
    status?: string | null;
    /** group Id filter */
    groupId?: string | null;
    /** privacy status filter */
    privacyStatus?: SiteMemberPrivacyStatus;
    /** roles filter */
    roles?: Role[];
}
declare enum Sorting {
    DESC = "DESC",
    ASC = "ASC"
}
interface SearchResponse {
    /** members returned by List request */
    members?: Member[];
    /** pagination information */
    pagination?: PaginationResponse;
}
interface GetCurrentMemberRequest {
}
interface GetMemberResponse {
    member?: Member;
}
interface GetMemberRequest {
    /** unique identifier of the requested member(required) */
    _id?: string;
    /** whether to include contact details */
    includeContactDetails?: boolean;
    /** whether to include groups details */
    includeGroupsDetails?: boolean;
}
interface GetUserMembershipsRequest {
    /**
     * unique identifier of the requested **Wix** user
     * @format GUID
     */
    userId?: string;
    /** paging - offset and limit ( the max limit for page is 200) */
    paging?: Paging;
}
interface GetUserMembershipsResponse {
    /** sequence of member's of the user with there metaSiteId */
    userMemberships?: UserMembership[];
}
interface UserMembership {
    /**
     * member id
     * @format GUID
     */
    memberId?: string;
    /**
     * meta site id whom the member existing on
     * @format GUID
     */
    metasiteId?: string;
}
interface GetMemberRoleRequest {
    _id?: string;
}
interface GetMemberRoleResponse {
    /**
     * member's role:
     *
     * `OWNER` - member that belongs to site owner
     * `CONTRIBUTOR` - member that belongs to a contributor in site
     * `MEMBER` - other members that registered to site
     */
    role?: Role;
    userId?: string | null;
    status?: SiteMemberStatus;
    contactId?: string | null;
}
interface GetMemberRolesRequest {
    /** user_id and/or contact_id */
    ids?: string[];
}
interface GetMemberRolesResponse {
    idsToRoles?: Record<string, MemberRole>;
}
interface MemberRole {
    /**
     * member's role:
     *
     * `OWNER` - member that belongs to site owner
     * `CONTRIBUTOR` - member that belongs to a contributor in site
     * `MEMBER` - other members that registered to site
     */
    role?: Role;
    userId?: string | null;
    status?: SiteMemberStatus;
    contactId?: string | null;
}
interface BatchGetMembersRequest {
    /** unique identifier of the requested member(required) */
    ids?: string[];
    /** whether to include contact details */
    includeContactDetails?: boolean;
    /** whether to include groups details */
    includeGroupsDetails?: boolean;
}
interface BatchGetMembersResponse {
    /** lest of members details */
    members?: Member[];
}
interface GetAuthorizedPagesRequest {
    _id?: string;
    siteId?: string;
}
interface GetAuthorizedPagesResponse {
    authorizedPages?: Record<string, string>;
}
interface UpdateMemberRequest {
    /** member id */
    _id?: string;
    /** the Member object containing the fields to update */
    member?: Member;
    /**
     * an explicit declaration of contact fields that should be updated by this request.
     * *Currently only affects contact fields.
     */
    fieldMask?: string[];
}
interface UpdateMemberResponse {
    /** updated member */
    member?: Member;
}
interface ChangeLoginEmailRequest {
    /** Member ID. */
    _id: string;
    /**
     * New login email address.
     * @format EMAIL
     */
    newEmail?: string;
    /**
     * @internal
     * @internal */
    revokeCurrentSessions?: boolean | null;
}
interface ChangeLoginEmailResponse {
    /** Member with the updated login email address. */
    member?: Member;
}
interface QueryMembersRequest {
    /**
     * query - See https://github.com/wix-private/platformization-guidelines/blob/master/Server/API-Query.md
     * supported fields: `id`, `login_email`, `status`, `language`, `date_created`, `last_update_date`, `flags`, `name`, `first_name`, `last_name`, `nickname`, `email_verified`, `privacy_status`
     */
    query?: string;
    /** whether to include contact details */
    includeContactDetails?: boolean;
    /** whether to include offline members */
    includeOfflineMembers?: boolean;
}
interface QueryMembersResponse {
    /** members matching the query criteria */
    members?: Member[];
    /** pagination information */
    pagination?: PaginationResponse;
}
interface DeleteMemberRequest {
    /** id of member that should be deleted (required) */
    _id?: string;
    /** defines if the request is a bulk action */
    isBulkAction?: boolean;
}
interface DeleteMemberResponse {
}
interface ApproveMemberRequest extends ApproveMemberRequestMemberIdentifierOneOf {
    /** ID of the member to approve. */
    _id?: string;
    /** Login email address of the member to approve. */
    email?: string;
    /** Approval token returned by the [`register()`](#register) function. */
    token?: string;
}
/** @oneof */
interface ApproveMemberRequestMemberIdentifierOneOf {
    /** ID of the member to approve. */
    _id?: string;
    /** Login email address of the member to approve. */
    email?: string;
    /**
     * <!--ONLY:VELO
     * Approval token returned by `register()`.
     * <!--END:ONLY:VELO-->
     */
    token?: string;
}
interface ApproveMemberResponse {
    /** Approval session token. */
    session?: Session;
}
interface Session {
    /** Session token when the current member is logged into the site. */
    token?: string | null;
}
interface BlockMemberRequest extends BlockMemberRequestMemberIdentifierOneOf {
    /** ID of the member to block. */
    _id?: string;
    /** Login email address of the member to block. */
    email?: string;
    /**
     * @internal
     * @internal */
    source?: Source;
}
/** @oneof */
interface BlockMemberRequestMemberIdentifierOneOf {
    _id?: string;
    /** Login email address of the member to block. */
    email?: string;
}
declare enum Source {
    UNKNOWN = "UNKNOWN",
    HANDLING_SPAM = "HANDLING_SPAM"
}
interface BlockMemberResponse {
}
interface MakeMemberOfflineRequest {
    /**
     * unique identifier of the requested member
     * @format GUID
     */
    _id?: string;
}
interface MakeMemberOfflineResponse {
}
/** Registration options. */
interface RegisterRequest {
    /** Login email address for the new site member. */
    email?: string;
    /**
     * Password the new site member will use to log in.
     *
     * Must be 4 to 15 ASCII-printable characters.
     */
    password?: string;
    /** Contact information for the registered member. */
    contactInfo?: MemberContactInfo;
    /**
     * @internal
     * @internal */
    dialogData?: DialogData;
    /**
     * Sets the privacy status of a new member upon registration.
     *
     * - `PUBLIC`: Member is visible to everyone.
     * - `PRIVATE`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.
     * - `UNKNOWN`: Insufficient permissions to get the status.
     */
    profilePrivacyStatus?: SiteMemberPrivacyStatus;
    /**
     * @internal
     * @internal */
    isOfflineRegistration?: boolean;
    /**
     * @internal
     * @internal */
    recaptchaToken?: string | null;
    /**
     * @internal
     * @internal */
    invisibleRecaptchaToken?: string | null;
    /**
     * @internal
     * @internal */
    emailVerification?: EmailVerification;
    /**
     * @internal
     * @internal */
    isMobile?: boolean | null;
}
interface MemberContactInfo {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /**
     * Contact's profile picture.
     * @format URI
     */
    picture?: string | null;
    /** Contact's email addresses. */
    emails?: string[];
    /** Contact's phone numbers. */
    phones?: string[];
    /** List of contact's labels. */
    labels?: string[];
    /**
     * @internal
     * @internal
     * @format LANGUAGE
     */
    locale?: string | null;
    /**
     * Any number of custom fields.
     * [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
     * are used to store additional information about your site's contacts.
     * When setting a custom field, use key:value pairs,
     * where the key matches the names defined in your site's
     * [Contact List](https://support.wix.com/en/article/accessing-your-contact-list).
     * You can only set values for custom fields that already exist in the Contacts application.
     */
    customFields?: CustomField[];
}
interface DialogData {
    visitorId?: string | null;
    appId?: string | null;
    initiator?: string | null;
}
interface EmailVerification {
    /** ID of the verification process. */
    verificationId?: string;
    /**
     * 6-digit code for verification.  Code can be between 100000 and 999999.
     *
     * @minLength 6
     * @maxLength 6
     */
    otp?: string;
}
interface RegisterResponse {
    /** Newly registered member. */
    member?: Member;
    /**
     * in case the site is open for registration, all members are automatically
     * approved. they will get a temporary token for obtaining a valid session
     */
    session?: Session;
    /**
     * in case the site requires members approval, the registered member
     * will be an applicant until he's approved. the token can be used as a member
     * identifier for approval using the `MembersService.Approve` API
     */
    approvalToken?: string | null;
}
interface EmailVerificationRequired {
    /** ID of the verification process. */
    verificationId?: string;
}
interface EmailVerificationFailed {
    /** ID of the failed verification process.  */
    verificationId?: string;
    /** Reason for verification failure. */
    verificationFailureReason?: VerificationFailureReason;
}
declare enum VerificationFailureReason {
    /** Default value - means no failure */
    UNSPECIFIED = "UNSPECIFIED",
    /** Bad verification code */
    BAD_CODE = "BAD_CODE",
    /** Verification code was not found */
    NOT_FOUND = "NOT_FOUND",
    /** Error while sending the code to the user */
    SEND_CODE_ERROR = "SEND_CODE_ERROR"
}
interface LoginRequest {
    /** Login email address. */
    email?: string;
    /** Member password. */
    password?: string;
    /**
     * @internal
     * @internal */
    recaptchaToken?: string;
    /**
     * @internal
     * @internal */
    invisibleRecaptchaToken?: string;
    /**
     * @internal
     * @internal */
    emailVerification?: EmailVerification;
    /**
     * @internal
     * @internal */
    isMobile?: boolean | null;
}
/** Session token for logging the member in. */
interface LoginResponse {
    /** Session token. */
    session?: Session;
    /** the member's details */
    member?: Member;
}
interface GetResetPasswordLinkRequest {
    /** Contact ID of the member whose password will be reset. */
    contactId?: string;
}
interface GetResetPasswordLinkResponse {
    /**
     * Reset password link.
     * Valid for one use, up to two weeks from when it is created.
     */
    resetPasswordLink?: string;
}
interface SendSetPasswordEmailRequest {
    /** Login email of the member whose password will be set. */
    email: string;
    /**
     * @internal
     * @internal
     * @deprecated
     */
    requestedByMember?: boolean;
    /**
     * Whether to hide the ignore this email message .
     *
     * If `true`, the email tells the member
     * they can safely ignore
     * if they did not request the password change.
     *
     * Default: `false`.
     */
    hideIgnoreMessage?: boolean;
}
interface SendSetPasswordEmailResponse {
    /** Indicates if the request was successfully received. */
    accepted?: boolean;
}
interface ResetPasswordRequest {
    /** Contact ID of the member whose password will be reset. */
    contactId?: string;
}
interface ResetPasswordResponse {
    /** Indicates if the request was successfully received. */
    accepted?: boolean;
}
interface SocialLoginRequest extends SocialLoginRequestLoginOneOf {
    appleLogin?: AppleLogin;
    googleLogin?: GoogleLogin;
    facebookLogin?: FacebookLogin;
    /**
     * Must either pass explicit msid OR signed instance with visitor
     * @format GUID
     */
    metaSiteId?: string | null;
}
/** @oneof */
interface SocialLoginRequestLoginOneOf {
    appleLogin?: AppleLogin;
    googleLogin?: GoogleLogin;
    facebookLogin?: FacebookLogin;
}
interface AppleLogin {
    /** JWT signed by apple, contains target (aud), email etc */
    token?: string;
}
interface GoogleLogin {
    /** JWT signed by Google, contains target (aud), email etc */
    token?: string;
}
interface FacebookLogin {
    /** AccessToken created by Facebook, used to later fetch details over API */
    token?: string;
}
interface ChangeLoginEmailOptions {
    /**
     * @internal
     * @internal */
    revokeCurrentSessions?: boolean | null;
}
interface ApproveOptions extends ApproveOptionsMemberIdentifierOneOf {
    /** ID of the member to approve. */
    _id?: string;
    /** Login email address of the member to approve. */
    email?: string;
    /** Approval token returned by the [`register()`](#register) function. */
    token?: string;
}
/** @oneof */
interface ApproveOptionsMemberIdentifierOneOf {
    /** ID of the member to approve. */
    _id?: string;
    /** Login email address of the member to approve. */
    email?: string;
    /**
     * <!--ONLY:VELO
     * Approval token returned by `register()`.
     * <!--END:ONLY:VELO-->
     */
    token?: string;
}
interface BlockOptions extends BlockOptionsMemberIdentifierOneOf {
    /** ID of the member to block. */
    _id?: string;
    /** Login email address of the member to block. */
    email?: string;
    /**
     * @internal
     * @internal */
    source?: Source;
}
/** @oneof */
interface BlockOptionsMemberIdentifierOneOf {
    _id?: string;
    /** Login email address of the member to block. */
    email?: string;
}
interface RegisterOptions {
    /** Contact information for the registered member. */
    contactInfo?: MemberContactInfo;
    /** @internal */
    dialogData?: DialogData;
    /**
     * Sets the privacy status of a new member upon registration.
     *
     * - `PUBLIC`: Member is visible to everyone.
     * - `PRIVATE`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.
     * - `UNKNOWN`: Insufficient permissions to get the status.
     */
    profilePrivacyStatus?: SiteMemberPrivacyStatus;
    /** @internal */
    isOfflineRegistration?: boolean;
    /** @internal */
    recaptchaToken?: string | null;
    /** @internal */
    invisibleRecaptchaToken?: string | null;
    /**
     * Email verification.
     * @internal */
    emailVerification?: EmailVerification;
    /** @internal */
    isMobile?: boolean | null;
}
interface LoginOptions {
    /** @internal */
    recaptchaToken?: string;
    /** @internal */
    invisibleRecaptchaToken?: string;
    /** @internal */
    emailVerification?: EmailVerification;
    /** @internal */
    isMobile?: boolean | null;
}
interface SendSetPasswordEmailOptions {
    /**
     * @internal
     * @internal
     * @deprecated
     */
    requestedByMember?: boolean;
    /**
     * Whether to hide the ignore this email message .
     *
     * If `true`, the email tells the member
     * they can safely ignore
     * if they did not request the password change.
     *
     * Default: `false`.
     */
    hideIgnoreMessage?: boolean;
}

export { type ApproveMemberRequest as $, type ApproveOptions as A, type BlockOptions as B, type ChangeLoginEmailOptions as C, type GetMemberRoleResponse as D, type GetMemberRolesRequest as E, type FocalPoint as F, type Group as G, type GetMemberRolesResponse as H, type MemberRole as I, type BatchGetMembersRequest as J, type BatchGetMembersResponse as K, type LoginOptions as L, type Member as M, type GetAuthorizedPagesRequest as N, type GetAuthorizedPagesResponse as O, type PaginationResponse as P, type UpdateMemberRequest as Q, type RegisterOptions as R, type SendSetPasswordEmailOptions as S, type UpdateMemberResponse as T, type UserMembership as U, VerificationFailureReason as V, type ChangeLoginEmailRequest as W, type QueryMembersRequest as X, type QueryMembersResponse as Y, type DeleteMemberRequest as Z, type DeleteMemberResponse as _, type ChangeLoginEmailResponse as a, type ApproveMemberRequestMemberIdentifierOneOf as a0, type Session as a1, type BlockMemberRequest as a2, type BlockMemberRequestMemberIdentifierOneOf as a3, type BlockMemberResponse as a4, type MakeMemberOfflineRequest as a5, type MakeMemberOfflineResponse as a6, type RegisterRequest as a7, type MemberContactInfo as a8, type DialogData as a9, type EmailVerification as aa, type EmailVerificationRequired as ab, type EmailVerificationFailed as ac, type LoginRequest as ad, type GetResetPasswordLinkRequest as ae, type GetResetPasswordLinkResponse as af, type SendSetPasswordEmailRequest as ag, type ResetPasswordRequest as ah, type ResetPasswordResponse as ai, type SocialLoginRequest as aj, type SocialLoginRequestLoginOneOf as ak, type AppleLogin as al, type GoogleLogin as am, type FacebookLogin as an, type ApproveOptionsMemberIdentifierOneOf as ao, type BlockOptionsMemberIdentifierOneOf as ap, type ApproveMemberResponse as b, type RegisterResponse as c, type LoginResponse as d, type SendSetPasswordEmailResponse as e, Role as f, SiteMemberPrivacyStatus as g, SiteMemberStatus as h, Sorting as i, Source as j, type Address as k, type CustomField as l, type CustomFieldValueOneOf as m, type ListMembersRequest as n, type ListMembersResponse as o, type SearchRequest as p, type Paging as q, type SearchBy as r, type FilterBy as s, type SearchResponse as t, type GetCurrentMemberRequest as u, type GetMemberResponse as v, type GetMemberRequest as w, type GetUserMembershipsRequest as x, type GetUserMembershipsResponse as y, type GetMemberRoleRequest as z };
