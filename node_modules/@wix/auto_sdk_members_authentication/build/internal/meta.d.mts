import { W as ChangeLoginEmailRequest$1, a as ChangeLoginEmailResponse$1, $ as ApproveMemberRequest$1, b as ApproveMemberResponse$1, a2 as BlockMemberRequest$1, a4 as BlockMemberResponse$1, a7 as RegisterRequest$1, c as RegisterResponse$1, ad as LoginRequest$1, d as LoginResponse$1, ag as SendSetPasswordEmailRequest$1, e as SendSetPasswordEmailResponse$1 } from './identity-members-v1-member-authentication.universal-Wa6kZHgG.mjs';

interface Member {
    /**
     * member's id
     * @format GUID
     * @readonly
     */
    id?: string;
    /**
     * `true` if member completed email verification, otherwise `false`
     * @readonly
     */
    emailVerified?: boolean;
    /**
     * member's role:
     *
     * `OWNER` - member that belongs to site owner
     * `CONTRIBUTOR` - member that belongs to a contributor in site
     * `MEMBER` - other members that registered to site
     */
    role?: Role;
    /**
     * email to be used when logging in
     * @format EMAIL
     */
    loginEmail?: string | null;
    /** member's full name */
    memberName?: string | null;
    /** member's first name */
    firstName?: string | null;
    /** member's last name */
    lastName?: string | null;
    /**
     * Deprecated: please use `picture` field instead.
     * URL for member's profile image
     * @format URI
     * @deprecated
     */
    imageUrl?: string | null;
    /** member's nickname (exposed to other members) */
    nickname?: string | null;
    /** `PUBLIC` if other members can view this profile, `PRIVATE` otherwise */
    profilePrivacyStatus?: SiteMemberPrivacyStatus;
    /** url segment for accessing the member's profile */
    slug?: string | null;
    /** member's language */
    language?: string | null;
    /**
     * member's status:
     *
     * `ACTIVE` - when member is approved
     * `APPLICANT` - when pending site owner's approval
     * `BLOCKED` - when member is blocked by the site's owner
     * `INACTIVE` - not used
     */
    status?: SiteMemberStatus;
    /**
     * date the member was created
     * @readonly
     */
    creationDate?: Date | null;
    /**
     * date the member was last updated
     * @readonly
     */
    lastUpdateDate?: Date | null;
    /**
     * date of last login
     * @readonly
     */
    lastLoginDate?: Date | null;
    /**
     * member's email addresses
     * (returned when `include_contact_details` is set to `true`)
     */
    emails?: string[];
    /**
     * member's phone numbers
     * (returned when `include_contact_details` is set to `true`)
     */
    phones?: string[];
    /**
     * member's addresses
     * (returned when `include_contact_details` is set to `true`)
     */
    addresses?: Address[];
    /**
     * labels attached to the member by the owner (in contacts dashboard)
     * (returned when `include_contact_details` is set to `true`)
     */
    labels?: string[];
    /**
     * custom fields set for the member by the owner (in contacts dashboard)
     * (returned when `include_contact_details` is set to `true`)
     */
    customFields?: CustomField[];
    /**
     * member's profile picture
     * supports both media-items and external urls
     */
    picture?: Image;
    /** member's user id */
    userId?: string | null;
    /** Groups the the member is registered to */
    groups?: Group[];
    /**
     * member's contact id
     * @readonly
     */
    contactId?: string | null;
}
declare enum Role {
    UNDEFINED_ROLE = "UNDEFINED_ROLE",
    MEMBER = "MEMBER",
    OWNER = "OWNER",
    CONTRIBUTOR = "CONTRIBUTOR"
}
declare enum SiteMemberPrivacyStatus {
    UNDEFINED = "UNDEFINED",
    PUBLIC = "PUBLIC",
    PRIVATE = "PRIVATE",
    COMMUNITY = "COMMUNITY"
}
declare enum SiteMemberStatus {
    UNDEFINED_STATUS = "UNDEFINED_STATUS",
    APPLICANT = "APPLICANT",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE",
    BLOCKED = "BLOCKED",
    OFFLINE_ONLY = "OFFLINE_ONLY"
}
interface Address {
    /** member's street address */
    street?: string | null;
    /** member's city */
    city?: string | null;
    /** member's region */
    region?: string | null;
    /** member's country */
    country?: string | null;
    /** member's postal code */
    postalCode?: string | null;
}
interface CustomField extends CustomFieldValueOneOf {
    strValue?: string | null;
    numValue?: number;
    dateValue?: Date | null;
    name?: string;
}
/** @oneof */
interface CustomFieldValueOneOf {
    strValue?: string | null;
    numValue?: number;
    dateValue?: Date | null;
}
interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
interface Group {
    /** @format GUID */
    id?: string;
    name?: string;
    type?: string;
}
interface ChangeLoginEmailRequest {
    /** Member ID. */
    id: string;
    /**
     * New login email address.
     * @format EMAIL
     */
    newEmail?: string;
    /** Whether to revoke active sessions immediately after changing the member's login email. */
    revokeCurrentSessions?: boolean | null;
}
interface ChangeLoginEmailResponse {
    /** Member with the updated login email address. */
    member?: Member;
}
interface ApproveMemberRequest extends ApproveMemberRequestMemberIdentifierOneOf {
    /** ID of the member to approve. */
    id?: string;
    /** Login email address of the member to approve. */
    email?: string;
    /**
     * <!--ONLY:VELO
     * Approval token returned by `register()`.
     * <!--END:ONLY:VELO-->
     */
    token?: string;
}
/** @oneof */
interface ApproveMemberRequestMemberIdentifierOneOf {
    /** ID of the member to approve. */
    id?: string;
    /** Login email address of the member to approve. */
    email?: string;
    /**
     * <!--ONLY:VELO
     * Approval token returned by `register()`.
     * <!--END:ONLY:VELO-->
     */
    token?: string;
}
interface ApproveMemberResponse {
    session?: Session;
}
interface Session {
    token?: string | null;
}
interface BlockMemberRequest extends BlockMemberRequestMemberIdentifierOneOf {
    id?: string;
    /** Login email address of the member to block. */
    email?: string;
    /** Indicate the source of the block request */
    source?: Source;
}
/** @oneof */
interface BlockMemberRequestMemberIdentifierOneOf {
    id?: string;
    /** Login email address of the member to block. */
    email?: string;
}
declare enum Source {
    UNKNOWN = "UNKNOWN",
    HANDLING_SPAM = "HANDLING_SPAM"
}
interface BlockMemberResponse {
}
/** Registration options. */
interface RegisterRequest {
    /** Login email address for the new site member. */
    email?: string;
    /**
     * Password the new site member will use to log in.
     *
     * Must be 4 to 15 ASCII-printable characters.
     */
    password?: string;
    /** Contact information for the registered member. */
    contactInfo?: MemberContactInfo;
    /** identification of the app that initiated the register request */
    dialogData?: DialogData;
    /**
     * Sets the privacy status of a new member upon registration.
     *
     * - `PUBLIC`: Member is visible to everyone.
     * - `PRIVATE`: Member is hidden from site visitors and other site members. Member is returned only to site contributors and apps with the appropriate permissions.
     * - `UNKNOWN`: Insufficient permissions to get the status.
     */
    profilePrivacyStatus?: SiteMemberPrivacyStatus;
    /** is registration offline */
    isOfflineRegistration?: boolean;
    recaptchaToken?: string | null;
    invisibleRecaptchaToken?: string | null;
    emailVerification?: EmailVerification;
    /**
     * an indication that the request needs to follow mobile signup flow
     * difference from the regular flow is the OTP email
     */
    isMobile?: boolean | null;
}
interface MemberContactInfo {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /**
     * Contact's profile picture.
     * @format URI
     */
    picture?: string | null;
    /** Contact's email addresses. */
    emails?: string[];
    /** Contact's phone numbers. */
    phones?: string[];
    /** List of contact's labels. */
    labels?: string[];
    /**
     * Contact's locale, formatted as an
     * [IETF BCP 47 language tag](https://tools.ietf.org/html/rfc5646).
     * Typically, this is a lowercase 2-letter language code,
     * followed by a hyphen,
     * followed by an uppercase 2-letter country code.
     *
     * For example, German from Germany is formatted as `"de-DE"`,
     * and U.S. English is formatted as `"en-US"`.
     * @format LANGUAGE
     */
    locale?: string | null;
    /**
     * Any number of custom fields.
     * [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
     * are used to store additional information about your site's contacts.
     * When setting a custom field, use key:value pairs,
     * where the key matches the names defined in your site's
     * [Contact List](https://support.wix.com/en/article/accessing-your-contact-list).
     * You can only set values for custom fields that already exist in the Contacts application.
     */
    customFields?: CustomField[];
}
interface DialogData {
    visitorId?: string | null;
    appId?: string | null;
    initiator?: string | null;
}
interface EmailVerification {
    /** Id of the verification process */
    verificationId?: string;
    /**
     * 6-digit code to verify (between 100000 and 999999)
     * @minLength 6
     * @maxLength 6
     */
    otp?: string;
}
interface RegisterResponse {
    /** Newly registered member. */
    member?: Member;
    /**
     * in case the site is open for registration, all members are automatically
     * approved. they will get a temporary token for obtaining a valid session
     */
    session?: Session;
    /**
     * in case the site requires members approval, the registered member
     * will be an applicant until he's approved. the token can be used as a member
     * identifier for approval using the `MembersService.Approve` API
     */
    approvalToken?: string | null;
}
interface LoginRequest {
    /** Login email address. */
    email?: string;
    /** Member password. */
    password?: string;
    /** Recaptcha token. */
    recaptchaToken?: string;
    /** Invisible recaptcha token. */
    invisibleRecaptchaToken?: string;
    emailVerification?: EmailVerification;
    /**
     * an indication that the request needs to follow mobile login flow
     * difference from the regular flow is the OTP email
     */
    isMobile?: boolean | null;
}
/** Session token for logging the member in. */
interface LoginResponse {
    session?: Session;
    /** the member's details */
    member?: Member;
}
interface SendSetPasswordEmailRequest {
    /** Login email of the member whose password will be set. */
    email: string;
    /**
     * > **Deprecated:**
     * > This field has been replaced with
     * > `hideIgnoreMessage`
     * > and will be removed on June 30, 2022.
     * > If your app uses this field,
     * > we recommend updating your code as soon as possible.
     *
     * Whether the email is being sent by member request.
     *
     * If `true`, the email tells the member
     * they can safely ignore
     * if they did not request the password change.
     *
     * Defaults to `false`.
     * @deprecated
     */
    requestedByMember?: boolean;
    /**
     * Whether to hide the ignore this email message .
     *
     * If `true`, the email tells the member
     * they can safely ignore
     * if they did not request the password change.
     *
     * Default: `false`.
     */
    hideIgnoreMessage?: boolean;
}
interface SendSetPasswordEmailResponse {
    /** Indicates if the request was successfully received. */
    accepted?: boolean;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function changeLoginEmail(): __PublicMethodMetaInfo<'PATCH', {
    id: string;
}, ChangeLoginEmailRequest$1, ChangeLoginEmailRequest, ChangeLoginEmailResponse$1, ChangeLoginEmailResponse>;
declare function approve(): __PublicMethodMetaInfo<'POST', {}, ApproveMemberRequest$1, ApproveMemberRequest, ApproveMemberResponse$1, ApproveMemberResponse>;
declare function block(): __PublicMethodMetaInfo<'POST', {}, BlockMemberRequest$1, BlockMemberRequest, BlockMemberResponse$1, BlockMemberResponse>;
declare function register(): __PublicMethodMetaInfo<'POST', {}, RegisterRequest$1, RegisterRequest, RegisterResponse$1, RegisterResponse>;
declare function login(): __PublicMethodMetaInfo<'POST', {}, LoginRequest$1, LoginRequest, LoginResponse$1, LoginResponse>;
declare function sendSetPasswordEmail(): __PublicMethodMetaInfo<'POST', {}, SendSetPasswordEmailRequest$1, SendSetPasswordEmailRequest, SendSetPasswordEmailResponse$1, SendSetPasswordEmailResponse>;

export { type __PublicMethodMetaInfo, approve, block, changeLoginEmail, login, register, sendSetPasswordEmail };
