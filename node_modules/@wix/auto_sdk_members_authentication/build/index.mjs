// src/identity-members-v1-member-authentication.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/identity-members-v1-member-authentication.http.ts
import { transformSDKFloatToRESTFloat } from "@wix/sdk-runtime/transformations/float";
import { transformRESTFloatToSDKFloat } from "@wix/sdk-runtime/transformations/float";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveWixMembersApiV1AuthServiceUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/wix-sm/api/v1/auth",
        destPath: ""
      },
      {
        srcPath: "/members/v1/wix-sm-webapp-proxy/v1/auth",
        destPath: "/api/v1/auth"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveWixMembersApiV1MembersServiceUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/wix-sm-members-proxy",
        destPath: ""
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "*.pub.wix-code.com": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    _: [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/wow/data-hub/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/wow/bulx/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/wow/data-hub/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/wow/bulx/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/wow/data-hub/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/wow/bulx/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "dev._base_domain_": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "forums._base_domain_": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "groups.wixapps.net": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/corvid/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "sslusers._base_domain_": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/wix-sm/api/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "users._base_domain_": [
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/wix-sm/api/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/blacklivesmatter/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/corvid/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm-webapp/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/_api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      },
      {
        srcPath: "/api/wix-sm/v1/members",
        destPath: "/api/v1/members"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/api/v1/members",
        destPath: "/api/v1/members"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_members_authentication";
function changeLoginEmail(payload) {
  function __changeLoginEmail({ host }) {
    const metadata = {
      entityFqdn: "wix.identity.members.v1.member",
      method: "PATCH",
      methodFqn: "wix.members.api.v1.MembersService.ChangeLoginEmail",
      packageName: PACKAGE_NAME,
      url: resolveWixMembersApiV1MembersServiceUrl({
        protoPath: "/api/v1/members/{id}/change-login-email",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.creationDate" },
            { path: "member.lastUpdateDate" },
            { path: "member.lastLoginDate" },
            { path: "member.customFields.dateValue" },
            { path: "member.picture.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "member.customFields.numValue" },
            { path: "member.picture.focalPoint.x" },
            { path: "member.picture.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __changeLoginEmail;
}
function approve(payload) {
  function __approve({ host }) {
    const metadata = {
      entityFqdn: "wix.identity.members.v1.member",
      method: "POST",
      methodFqn: "wix.members.api.v1.MembersService.Approve",
      packageName: PACKAGE_NAME,
      url: resolveWixMembersApiV1MembersServiceUrl({
        protoPath: "/api/v1/members/approve",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __approve;
}
function block(payload) {
  function __block({ host }) {
    const metadata = {
      entityFqdn: "wix.identity.members.v1.member",
      method: "POST",
      methodFqn: "wix.members.api.v1.MembersService.Block",
      packageName: PACKAGE_NAME,
      url: resolveWixMembersApiV1MembersServiceUrl({
        protoPath: "/api/v1/members/block",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __block;
}
function register(payload) {
  function __register({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKFloatToRESTFloat,
        paths: [{ path: "contactInfo.customFields.numValue" }]
      },
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "contactInfo.customFields.dateValue" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.identity.members.v1.member",
      method: "POST",
      methodFqn: "wix.members.api.v1.AuthService.Register",
      packageName: PACKAGE_NAME,
      url: resolveWixMembersApiV1AuthServiceUrl({
        protoPath: "/api/v1/auth/register",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.creationDate" },
            { path: "member.lastUpdateDate" },
            { path: "member.lastLoginDate" },
            { path: "member.customFields.dateValue" },
            { path: "member.picture.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "member.customFields.numValue" },
            { path: "member.picture.focalPoint.x" },
            { path: "member.picture.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __register;
}
function login(payload) {
  function __login({ host }) {
    const metadata = {
      entityFqdn: "wix.identity.members.v1.member",
      method: "POST",
      methodFqn: "wix.members.api.v1.AuthService.Login",
      packageName: PACKAGE_NAME,
      url: resolveWixMembersApiV1AuthServiceUrl({
        protoPath: "/api/v1/auth/login",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.creationDate" },
            { path: "member.lastUpdateDate" },
            { path: "member.lastLoginDate" },
            { path: "member.customFields.dateValue" },
            { path: "member.picture.urlExpirationDate" }
          ]
        },
        {
          transformFn: transformRESTFloatToSDKFloat,
          paths: [
            { path: "member.customFields.numValue" },
            { path: "member.picture.focalPoint.x" },
            { path: "member.picture.focalPoint.y" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __login;
}
function sendSetPasswordEmail(payload) {
  function __sendSetPasswordEmail({ host }) {
    const metadata = {
      entityFqdn: "wix.identity.members.v1.member",
      method: "POST",
      methodFqn: "wix.members.api.v1.AuthService.SendSetPasswordEmail",
      packageName: PACKAGE_NAME,
      url: resolveWixMembersApiV1AuthServiceUrl({
        protoPath: "/v1/auth/members/send-set-password-email",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __sendSetPasswordEmail;
}

// src/identity-members-v1-member-authentication.universal.ts
import { transformRESTImageToSDKImage } from "@wix/sdk-runtime/transformations/image";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
var Role = /* @__PURE__ */ ((Role2) => {
  Role2["UNDEFINED_ROLE"] = "UNDEFINED_ROLE";
  Role2["MEMBER"] = "MEMBER";
  Role2["OWNER"] = "OWNER";
  Role2["CONTRIBUTOR"] = "CONTRIBUTOR";
  return Role2;
})(Role || {});
var SiteMemberPrivacyStatus = /* @__PURE__ */ ((SiteMemberPrivacyStatus2) => {
  SiteMemberPrivacyStatus2["UNDEFINED"] = "UNDEFINED";
  SiteMemberPrivacyStatus2["PUBLIC"] = "PUBLIC";
  SiteMemberPrivacyStatus2["PRIVATE"] = "PRIVATE";
  SiteMemberPrivacyStatus2["COMMUNITY"] = "COMMUNITY";
  return SiteMemberPrivacyStatus2;
})(SiteMemberPrivacyStatus || {});
var SiteMemberStatus = /* @__PURE__ */ ((SiteMemberStatus2) => {
  SiteMemberStatus2["UNDEFINED_STATUS"] = "UNDEFINED_STATUS";
  SiteMemberStatus2["APPLICANT"] = "APPLICANT";
  SiteMemberStatus2["ACTIVE"] = "ACTIVE";
  SiteMemberStatus2["INACTIVE"] = "INACTIVE";
  SiteMemberStatus2["BLOCKED"] = "BLOCKED";
  SiteMemberStatus2["OFFLINE_ONLY"] = "OFFLINE_ONLY";
  return SiteMemberStatus2;
})(SiteMemberStatus || {});
var Sorting = /* @__PURE__ */ ((Sorting2) => {
  Sorting2["DESC"] = "DESC";
  Sorting2["ASC"] = "ASC";
  return Sorting2;
})(Sorting || {});
var Source = /* @__PURE__ */ ((Source2) => {
  Source2["UNKNOWN"] = "UNKNOWN";
  Source2["HANDLING_SPAM"] = "HANDLING_SPAM";
  return Source2;
})(Source || {});
var VerificationFailureReason = /* @__PURE__ */ ((VerificationFailureReason2) => {
  VerificationFailureReason2["UNSPECIFIED"] = "UNSPECIFIED";
  VerificationFailureReason2["BAD_CODE"] = "BAD_CODE";
  VerificationFailureReason2["NOT_FOUND"] = "NOT_FOUND";
  VerificationFailureReason2["SEND_CODE_ERROR"] = "SEND_CODE_ERROR";
  return VerificationFailureReason2;
})(VerificationFailureReason || {});
async function changeLoginEmail2(_id, newEmail, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    newEmail,
    revokeCurrentSessions: options?.revokeCurrentSessions
  });
  const reqOpts = changeLoginEmail(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "member.picture" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]",
          newEmail: "$[1]",
          revokeCurrentSessions: "$[2].revokeCurrentSessions"
        },
        singleArgumentUnchanged: false
      },
      ["_id", "newEmail", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function approve2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: options?._id,
    email: options?.email,
    token: options?.token
  });
  const reqOpts = approve(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]._id",
          email: "$[0].email",
          token: "$[0].token"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function block2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: options?._id,
    email: options?.email,
    source: options?.source
  });
  const reqOpts = block(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          id: "$[0]._id",
          email: "$[0].email",
          source: "$[0].source"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function register2(email, password, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    email,
    password,
    contactInfo: options?.contactInfo,
    dialogData: options?.dialogData,
    profilePrivacyStatus: options?.profilePrivacyStatus,
    isOfflineRegistration: options?.isOfflineRegistration,
    recaptchaToken: options?.recaptchaToken,
    invisibleRecaptchaToken: options?.invisibleRecaptchaToken,
    emailVerification: options?.emailVerification,
    isMobile: options?.isMobile
  });
  const reqOpts = register(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "member.picture" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          email: "$[0]",
          password: "$[1]",
          contactInfo: "$[2].contactInfo",
          dialogData: "$[2].dialogData",
          profilePrivacyStatus: "$[2].profilePrivacyStatus",
          isOfflineRegistration: "$[2].isOfflineRegistration",
          recaptchaToken: "$[2].recaptchaToken",
          invisibleRecaptchaToken: "$[2].invisibleRecaptchaToken",
          emailVerification: "$[2].emailVerification",
          isMobile: "$[2].isMobile"
        },
        singleArgumentUnchanged: false
      },
      ["email", "password", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function login2(email, password, options) {
  const { httpClient, sideEffects } = arguments[3];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    email,
    password,
    recaptchaToken: options?.recaptchaToken,
    invisibleRecaptchaToken: options?.invisibleRecaptchaToken,
    emailVerification: options?.emailVerification,
    isMobile: options?.isMobile
  });
  const reqOpts = login(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(
      transformPaths2(result.data, [
        {
          transformFn: transformRESTImageToSDKImage,
          paths: [{ path: "member.picture" }]
        }
      ])
    );
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          email: "$[0]",
          password: "$[1]",
          recaptchaToken: "$[2].recaptchaToken",
          invisibleRecaptchaToken: "$[2].invisibleRecaptchaToken",
          emailVerification: "$[2].emailVerification",
          isMobile: "$[2].isMobile"
        },
        singleArgumentUnchanged: false
      },
      ["email", "password", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function sendSetPasswordEmail2(email, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    email,
    requestedByMember: options?.requestedByMember,
    hideIgnoreMessage: options?.hideIgnoreMessage
  });
  const reqOpts = sendSetPasswordEmail(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          email: "$[0]",
          requestedByMember: "$[1].requestedByMember",
          hideIgnoreMessage: "$[1].hideIgnoreMessage"
        },
        singleArgumentUnchanged: false
      },
      ["email", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/identity-members-v1-member-authentication.public.ts
function changeLoginEmail3(httpClient) {
  return (_id, newEmail, options) => changeLoginEmail2(
    _id,
    newEmail,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function approve3(httpClient) {
  return (options) => approve2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function block3(httpClient) {
  return (options) => block2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function register3(httpClient) {
  return (email, password, options) => register2(
    email,
    password,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function login3(httpClient) {
  return (email, password, options) => login2(
    email,
    password,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function sendSetPasswordEmail3(httpClient) {
  return (email, options) => sendSetPasswordEmail2(
    email,
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/identity-members-v1-member-authentication.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var changeLoginEmail4 = /* @__PURE__ */ createRESTModule(changeLoginEmail3);
var approve4 = /* @__PURE__ */ createRESTModule(approve3);
var block4 = /* @__PURE__ */ createRESTModule(block3);
var register4 = /* @__PURE__ */ createRESTModule(register3);
var login4 = /* @__PURE__ */ createRESTModule(login3);
var sendSetPasswordEmail4 = /* @__PURE__ */ createRESTModule(sendSetPasswordEmail3);
export {
  Role,
  SiteMemberPrivacyStatus,
  SiteMemberStatus,
  Sorting,
  Source,
  VerificationFailureReason,
  approve4 as approve,
  block4 as block,
  changeLoginEmail4 as changeLoginEmail,
  login4 as login,
  register4 as register,
  sendSetPasswordEmail4 as sendSetPasswordEmail
};
//# sourceMappingURL=index.mjs.map