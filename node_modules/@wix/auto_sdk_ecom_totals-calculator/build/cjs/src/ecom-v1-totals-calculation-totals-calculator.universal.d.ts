import { NonNullablePaths } from '@wix/sdk-types';
export interface TotalsCalculationEntity {
}
export interface CalculateTotalsRequest extends CalculateTotalsRequestCouponOneOf, CalculateTotalsRequestGiftCardOneOf {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
    /**
     * Gift card ID.
     * @format GUID
     */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * Calculation ID. An identifier of the entity that you are calculating totals for, for example, cart ID or checkout ID.
     * This value will be used in order to optimise calculations by caching.
     * If not passed, calculation might be slower in some cases.
     * @minLength 1
     * @maxLength 100
     */
    calculationId?: string | null;
    /**
     * Line items for calculation.
     * @maxSize 300
     */
    lineItems?: LineItem[];
    /** Shipping address for tax and shipping calculation (if applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** Details about selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /**
     * Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart/checkout.
     * @maxSize 100
     * @deprecated
     */
    merchantDiscounts?: MerchantDiscountInput[];
    /**
     * Buyer email. Used to enforce coupon [single-use per customer](https://support.wix.com/en/article/wix-stores-limiting-coupon-usage). If not passed, single coupon usage per customer will not be enforced.
     * @format EMAIL
     */
    buyerEmail?: string | null;
    /**
     * Member id to use for this calculation
     * When not provided, given that the caller is a member, its member id will be used
     * Providing this require elevated permissions - ECOM.ADMIN_CALCULATE_TOTALS
     */
    memberId?: string | null;
    /**
     * The selected memberships and which line items they apply to
     * When not provided, default selection will be returned
     * You can also set it to empty selection
     */
    selectedMemberships?: SelectedMemberships;
    /** Buyer phone number. Used to get shipping rates. */
    buyerPhone?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     * @maxSize 20
     */
    externalReferences?: ExternalReference[];
}
/** @oneof */
export interface CalculateTotalsRequestCouponOneOf {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
}
/** @oneof */
export interface CalculateTotalsRequestGiftCardOneOf {
    /**
     * Gift card ID.
     * @format GUID
     */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
}
export interface LineItem {
    /**
     * Line item ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * Quantity.
     * @max 100000
     */
    quantity?: number | null;
    /**
     * Optional references to the line item's origin catalog.
     * See [Catalog SPI](https://bo.wix.com/wix-docs/rest/ecommerce/catalog-spi/introduction) for more details.
     * This field may be empty in the case of a custom line item.
     * currently we only use the catalog app id to set tax=0 for specific apps.
     */
    catalogReference?: CatalogReference;
    /**
     * Product/booking/event name.
     * @maxLength 200
     */
    productName?: string | null;
    /**
     * Catalog price.
     * @decimalValue options { gte:0 }
     */
    price?: string;
    /** Physical properties (if applicable). */
    physicalProperties?: PhysicalProperties;
    /** Subscription settings. */
    subscriptionSettings?: SubscriptionSettings;
    /**
     * Type of selected payment option for current item.
     *
     * Default: `FULL_PAYMENT_ONLINE`
     */
    paymentOption?: PaymentOptionType;
    /** Service properties. When relevant, this contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @minLength 1
     * @maxLength 36
     */
    rootCatalogItemId?: string | null;
    /**
     * Optional - partial amount of item's price to be paid now for checkout cases with DEPOSIT_ONLINE payment option
     * If omitted - item's price will not be split and is expected to be paid in single installment
     * @format DECIMAL_VALUE
     */
    depositAmount?: string | null;
    /**
     * full price of the item before all the discounts
     * @format DECIMAL_VALUE
     */
    fullPrice?: string | null;
    /**
     * The Item's Delivery Profile Id
     * @format GUID
     */
    deliveryProfileId?: string | null;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
export interface CatalogReference {
    /**
     * ID of the item within the catalog it belongs to.
     * @minLength 1
     * @maxLength 36
     */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     * @minLength 1
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about eCommerce integration ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)).
     */
    options?: Record<string, any> | null;
}
export interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /**
     * Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku).
     * @maxLength 40
     */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
export interface Scope {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group;
}
export interface Group {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
export interface SubscriptionSettings {
    /** Frequency of recurring payment. Every day/week/month/year. */
    frequency?: SubscriptionFrequency;
}
/** Frequency unit of recurring payment */
export declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
/** Type of selected payment option for catalog item */
export declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
export interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /**
     * The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room.
     * @min 1
     * @max 10000
     */
    numberOfParticipants?: number | null;
}
export interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
export interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
export declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
export interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
/** @oneof */
export interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
export declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
export interface ApiV1AdditionalFee {
    /**
     * Additional fee's unique code or ID.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Additional fee's name.
     *
     * Max: 50 characters
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Total additional fees. This `price` does not include any taxes that may apply to these additional fees.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:2 }
     */
    price?: string;
    /**
     * Tax details.
     *
     * > **Note:** Tax is not calculated in the returned `price` even when `taxDetails.taxable` is `true`.
     */
    taxDetails?: V1TaxDetails;
}
/** Tax details. */
export interface V1TaxDetails {
    /** Whether additional fee is taxable. */
    taxable?: boolean;
    /**
     * Reserved for internal use.
     * @format GUID
     */
    taxGroupId?: string | null;
}
export interface ModifierGroup {
    /**
     * Modifier group id.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string;
    /** Modifier group name. */
    name?: TranslatableString;
    /**
     * List of modifiers in this group.
     * @minSize 1
     * @maxSize 10
     */
    modifiers?: ItemModifier[];
}
export interface TranslatableString {
    /**
     * __Required.__ String in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     * @minLength 1
     * @maxLength 200
     */
    original?: string;
    /**
     * String translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     * @minLength 1
     * @maxLength 400
     */
    translated?: string | null;
}
export interface ItemModifier {
    /**
     * Modifier ID.
     * @minLength 1
     * @maxLength 36
     */
    _id?: string;
    /**
     * The quantity of this modifier.
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
    /** Primary display label for the modifier. */
    label?: TranslatableString;
    /** Optional additional details or clarification for the modifier. */
    details?: TranslatableString;
    /**
     * The price of the modifier.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:3 }
     */
    price?: string | null;
}
/** Physical address */
export interface Address {
    /**
     * Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format.
     * @format COUNTRY
     */
    country?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format.
     * @maxLength 50
     */
    subdivision?: string | null;
    /**
     * City name.
     * @maxLength 50
     */
    city?: string | null;
    /**
     * Postal or zip code.
     * @maxLength 50
     */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /**
     * Main address line (usually street name and number).
     * @maxLength 150
     */
    addressLine1?: string | null;
    /**
     * Free text providing more detailed address info. Usually contains apt, suite, floor.
     * @maxLength 100
     */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
export interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
export interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
export interface SelectedShippingOption {
    /**
     * Carrier ID.
     * @format GUID
     */
    carrierId?: string | null;
    /**
     * Selected shipping option code. For example, "usps_std_overnight".
     * @minLength 1
     * @maxLength 100
     */
    code?: string;
}
export interface MerchantDiscountInput {
    /**
     * Discount amount.
     * @decimalValue options { gte:0 }
     */
    amount?: string;
    /**
     * IDs of line items the discount applies to.
     * @format GUID
     * @maxSize 300
     */
    lineItemIds?: string[];
}
export interface SelectedMemberships {
    /**
     * Selected memberships.
     * @maxSize 300
     */
    memberships?: SelectedMembership[];
}
export interface SelectedMembership {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * ID of the app providing this payment option.
     * @format GUID
     */
    appId?: string;
    /**
     * IDs of the line items this membership applies to.
     * @minSize 1
     * @maxSize 300
     * @minLength 1
     * @maxLength 100
     */
    lineItemIds?: string[];
}
export interface CarrierShippingOption {
    /**
     * This carrier's unique ID
     * @format GUID
     */
    carrierId?: string | null;
    /** Shipping service options offered by this carrier for this request */
    shippingOptions?: ShippingOption;
}
export interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     * @maxLength 100
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @maxLength 250
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Sipping price information. */
    cost?: ShippingPrice;
    /**
     * Delivery solution allocations to different delivery carriers and delivery regions
     * @maxSize 300
     */
    deliveryAllocations?: DeliveryAllocation[];
    /** If the delivery solution is a partial and doesn't apply to all items. */
    partial?: boolean | null;
}
export interface DeliveryLogistics {
    /**
     * Expected delivery time, in free text. For example, "3-5 business days".
     * @maxLength 500
     */
    deliveryTime?: string | null;
    /**
     * Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot".
     * @maxLength 1000
     */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
export interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
export declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
export interface DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
export interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
export interface MultiCurrencyPrice {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
export interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
    /**
     * Description of the additional charge. For example, `"Handling fee of $5 applied for gift wrapping"`.
     * @maxLength 250
     */
    details?: string | null;
}
export declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
export interface DeliveryAllocation {
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    deliveryCarrier?: Carrier;
    /** The delivery region that are relevant for this delivery solution. */
    deliveryRegion?: Region;
    /** Populated if the delivery solution is a partially supplied by this carrier. */
    applicableLineItems?: ApplicableLineItems;
}
export interface Carrier {
    /**
     * The carrier app id
     * @format GUID
     */
    appId?: string | null;
    /**
     * Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`.
     * @maxLength 250
     */
    code?: string;
}
export interface Region {
    /**
     * The delivery region id.
     * @format GUID
     */
    _id?: string | null;
    /**
     * The delivery region name.
     * @maxLength 100
     */
    name?: string | null;
}
export interface ApplicableLineItems {
    /**
     * Line items that the delivery solution is for.
     * @maxSize 300
     * @minLength 1
     * @maxLength 100
     */
    lineItemIds?: string[];
}
export interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of line items the discount applies to.
     * @format GUID
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
export interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
export declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
export interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
export interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /**
     * Discount Percentage. Will be calculated from items price before other discounts.
     * @min 1
     * @max 100
     */
    percentage?: number | null;
}
export interface DiscountRule {
    /**
     * Discount rule ID
     * @format GUID
     */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
export interface DiscountRuleName {
    /**
     * Original discount rule name (in site's default language).
     * @minLength 1
     * @maxLength 256
     */
    original?: string;
    /**
     * Translated discount rule name according to buyer language. Defaults to `original` when not provided.
     * @minLength 1
     * @maxLength 500
     */
    translated?: string | null;
}
export interface LineItemDiscount {
    /**
     * ID of line item the discount applies to.
     * @format GUID
     */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice;
}
export interface AdditionalFee {
    /**
     * Additional fee's unique code (or ID) for future processing
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Translated additional fee's name
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /**
     * Additional fee's price
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    price?: string;
    /**
     * Currency
     * @format CURRENCY
     */
    currency?: string;
    /** Tax details */
    taxDetails?: TaxDetails;
    /**
     * Provider's app id
     * @minLength 1
     * @maxLength 100
     */
    providerAppId?: string | null;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     * @format GUID
     */
    lineItemIds?: string[];
}
/** Tax Details. */
export interface TaxDetails {
    /** Indication if additional fee is taxable or not */
    taxable?: boolean;
    /**
     * Optional tax group ID to use when calculating tax for this additional fee
     * @format GUID
     */
    taxGroupId?: string | null;
}
export declare enum DataFetchType {
    SHIPPING = "SHIPPING",
    DISCOUNT = "DISCOUNT",
    ADDITIONAL_FEES = "ADDITIONAL_FEES",
    ORDER_VALIDATION = "ORDER_VALIDATION"
}
export interface ExternalReference {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     * @format GUID
     * @immutable
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     * @minLength 1
     * @maxLength 100
     * @immutable
     */
    resourceId?: string | null;
}
export interface CalculateTotalsResponse {
    /** Calculate line items. */
    calculatedLineItems?: CalculatedLineItem[];
    /** Price summary. */
    priceSummary?: PriceSummary;
    /** Details of applied gift card. */
    giftCard?: GiftCard;
    /** Tax summary. */
    taxSummary?: TaxSummary;
    /** Shipping information. */
    shippingInfo?: ShippingInformation;
    /**
     * Applied discounts.
     * @maxSize 320
     */
    appliedDiscounts?: AppliedDiscount[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors;
    /** Weight unit. */
    weightUnit?: WeightUnit;
    /**
     * Currency.
     * @format CURRENCY
     */
    currency?: string;
    /**
     * This is the display currency. Converted prices are presented in this currency.
     * @readonly
     * @format CURRENCY
     */
    conversionCurrency?: string;
    /** Whether tax is included in price. */
    taxIncludedInPrice?: boolean;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions;
    /**
     * Additional Fees
     * @maxSize 100
     */
    additionalFees?: V1AdditionalFee[];
    /**
     * The site currency.
     * @readonly
     * @format CURRENCY
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     * @decimalValue options { gt:0, lte:1000000000000000 }
     */
    checkoutConversionRate?: string | null;
    /**
     * The pay now total amount after the gift card is applied.
     * @readonly
     */
    payNowTotalAfterGiftCard?: MultiCurrencyPrice;
    /**
     * The total amount after gift card is applied.
     * @readonly
     */
    totalAfterGiftCard?: MultiCurrencyPrice;
}
export interface CalculatedLineItem {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData;
    /**
     * Type of selected payment option for current item. Supported values:
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item will happen as part of the checkout
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item will happen after the checkout
     * + `"MEMBERSHIP"` - This item cannot be paid via monetary payment options, only via non monetary option such membership. When this option is used, price must be set to 0
     * + `"DEPOSIT_ONLINE"` -  Partial payment of the given item will happen as part of the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
}
export interface LineItemPricesData {
    /** Total price after discounts, tax, and modifiers. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price after discounts and modifiers, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Total discount applied for the line item. */
    totalDiscount?: MultiCurrencyPrice;
    /** Catalog price after catalog-defined discount, automatic discounts, and modifiers. */
    price?: MultiCurrencyPrice;
    /**
     * Item price before automatic discounts, coupons, and global discounts; after catalog-defined discounts and modifiers.
     * Defaults to `price` when not provided.
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /** Total line item price after catalog-defined discounts, automatic discounts, and modifiers. */
    lineItemPrice?: MultiCurrencyPrice;
    /**
     * Item price before all discounts and modifiers.
     * Defaults to `price` when not provided.
     */
    fullPrice?: MultiCurrencyPrice;
    /** Total price of all item modifiers. */
    modifiers?: MultiCurrencyPrice;
}
export interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Tax rate %, as a decimal point between 0 and 1.
     * @decimalValue options { gte:0, lte:1, maxScale:6 }
     */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
export interface TaxRateBreakdown {
    /**
     * Name of tax against which the calculation was performed.
     * @maxLength 100
     */
    name?: string;
    /**
     * Rate at which this tax detail was calculated.
     * @decimalValue options { gte:0, lte:1, maxScale:6 }
     */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
export interface TaxBreakdown {
    /**
     * The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec".
     * @maxLength 200
     */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice;
    /**
     * The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value)
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc.
     * @maxLength 200
     */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     * @maxLength 200
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
export interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
export interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /**
     * App ID of the gift card provider.
     * @format GUID
     */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     * @minLength 1
     * @maxLength 50
     */
    externalId?: string | null;
}
export interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
export interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateType;
}
/** @oneof */
export interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
export declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
export declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
export interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
export declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
export interface AggregatedTaxBreakdown {
    /**
     * The name of the tax against which this tax amount was calculated.
     * @maxLength 200
     */
    taxName?: string;
    /**
     * The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws.
     * @maxLength 200
     */
    taxType?: string;
    /**
     * The name of the jurisdiction in which this tax detail applies.
     * @maxLength 200
     */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType;
    /**
     * The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value)
     * @decimalValue options { gte:0, maxScale:6 }
     */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice;
}
export interface ShippingInformation {
    /** Shipping region. */
    region?: ShippingRegion;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption[];
}
export interface ShippingRegion {
    /**
     * Shipping region ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /**
     * Shipping region name.
     * @maxLength 100
     */
    name?: string;
}
export interface SelectedCarrierServiceOption {
    /**
     * Unique identifier of selected option. For example, "usps_std_overnight".
     * @maxLength 100
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @maxLength 250
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /**
     * Other charges
     * @deprecated Other charges
     * @replacedBy additional_fees
     * @targetRemovalDate 2025-10-01
     */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /**
     * This carrier's unique ID
     * @format GUID
     */
    carrierId?: string | null;
    /**
     * Delivery solution allocations to different delivery carriers and delivery regions
     * @maxSize 300
     */
    deliveryAllocations?: DeliveryAllocation[];
    /** If the delivery solution is a partial and doesn't apply to all items. */
    partial?: boolean | null;
}
export interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
export interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /**
     * Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'.
     * @maxLength 200
     */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
export interface CarrierServiceOption {
    /**
     * Carrier ID.
     * @format GUID
     */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
export interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
export interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
export interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
export interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
export interface ValidationError {
    fieldViolations?: FieldViolation[];
}
export declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT",
    EXACT_LENGTH = "EXACT_LENGTH",
    EXACT_SIZE = "EXACT_SIZE",
    REQUIRED_ONE_OF_FIELD = "REQUIRED_ONE_OF_FIELD"
}
export interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
export interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
export interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
export interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
export declare enum WeightUnit {
    /** Weight unit can't be classified due to an error. */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms. */
    KG = "KG",
    /** Pounds. */
    LB = "LB"
}
export interface MembershipOptions {
    /**
     * List of payment options that can be used.
     * @maxSize 300
     */
    eligibleMemberships?: Membership[];
    /**
     * List of payment options that are owned by the member, but cannot be used due to reason provided.
     * @maxSize 300
     */
    invalidMemberships?: InvalidMembership[];
    /**
     * The selected membership payment options and which line items they apply to.
     * @maxSize 300
     */
    selectedMemberships?: SelectedMembership[];
}
export interface Membership {
    /**
     * Membership ID.
     * @minLength 1
     * @maxLength 100
     */
    _id?: string;
    /**
     * ID of the application providing this payment option.
     * @format GUID
     */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /**
     * Line item IDs which are "paid" for by this membership.
     * @minSize 1
     * @maxSize 300
     * @minLength 1
     * @maxLength 100
     */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
export interface MembershipName {
    /**
     * Membership name.
     * @maxLength 100
     */
    original?: string;
    /**
     * Translated membership name. Defaults to `original` when not provided.
     * @maxLength 100
     */
    translated?: string | null;
}
export interface MembershipPaymentCredits {
    /**
     * Membership's total amount of credits.
     * @min 1
     */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
export interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /**
     * Reason why this membership is invalid and cannot be used.
     * @minLength 1
     * @maxLength 100
     */
    reason?: string;
}
export interface V1AdditionalFee {
    /**
     * Additional fee's unique code (or ID) for future processing.
     * @minLength 1
     * @maxLength 100
     */
    code?: string | null;
    /**
     * Translated additional fee's name.
     * @minLength 1
     * @maxLength 50
     */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Provider's app id.
     * @minLength 1
     * @maxLength 100
     */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     * @format GUID
     */
    lineItemIds?: string[];
    /** the source the additional fee was added from */
    source?: AdditionalFeeSource;
}
export declare enum AdditionalFeeSource {
    UNKNOWN_ADDITIONAL_FEE_SOURCE = "UNKNOWN_ADDITIONAL_FEE_SOURCE",
    /** The additional fee was added by an additional fee service plugin */
    SERVICE_PLUGIN = "SERVICE_PLUGIN",
    /** The additional fee was added on the item either via the catalog or on custom line item */
    ITEM = "ITEM",
    /** The additional fee was added manually on the request */
    MANUAL = "MANUAL",
    /** The additional fee was added by the shipping provider */
    SHIPPING = "SHIPPING"
}
/**
 * Returns a totals calculation for specified line items.
 * @public
 * @documentationMaturity preview
 * @requiredField options.lineItems._id
 * @requiredField options.lineItems.price
 * @requiredField options.lineItems.quantity
 * @requiredField options.merchantDiscounts.amount
 * @requiredField options.selectedMemberships.memberships._id
 * @requiredField options.selectedMemberships.memberships.appId
 * @requiredField options.selectedMemberships.memberships.lineItemIds
 * @requiredField options.selectedShippingOption.code
 * @permissionId ECOM.CALCULATE_TOTALS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.totals_calculator.v1.TotalsCalculator.CalculateTotals
 */
export declare function calculateTotals(options?: NonNullablePaths<CalculateTotalsOptions, `lineItems.${number}._id` | `lineItems.${number}.price` | `lineItems.${number}.quantity` | `merchantDiscounts.${number}.amount` | `selectedMemberships.memberships.${number}._id` | `selectedMemberships.memberships.${number}.appId` | `selectedMemberships.memberships.${number}.lineItemIds` | `selectedShippingOption.code`>): Promise<NonNullablePaths<CalculateTotalsResponse, `calculatedLineItems` | `calculatedLineItems.${number}.lineItemId` | `calculatedLineItems.${number}.pricesBreakdown.totalPriceAfterTax.amount` | `calculatedLineItems.${number}.pricesBreakdown.totalPriceAfterTax.convertedAmount` | `calculatedLineItems.${number}.pricesBreakdown.totalPriceAfterTax.formattedAmount` | `calculatedLineItems.${number}.pricesBreakdown.totalPriceAfterTax.formattedConvertedAmount` | `calculatedLineItems.${number}.pricesBreakdown.taxDetails.taxRate` | `calculatedLineItems.${number}.paymentOption` | `priceSummary.subtotal.amount` | `priceSummary.subtotal.convertedAmount` | `priceSummary.subtotal.formattedAmount` | `priceSummary.subtotal.formattedConvertedAmount` | `giftCard._id` | `giftCard.obfuscatedCode` | `giftCard.amount.amount` | `giftCard.amount.convertedAmount` | `giftCard.amount.formattedAmount` | `giftCard.amount.formattedConvertedAmount` | `giftCard.appId` | `taxSummary.taxableAmount.amount` | `taxSummary.taxableAmount.convertedAmount` | `taxSummary.taxableAmount.formattedAmount` | `taxSummary.taxableAmount.formattedConvertedAmount` | `taxSummary.calculationDetails.manualRateReason` | `taxSummary.calculationDetails.autoTaxFallbackDetails.fallbackReason` | `taxSummary.calculationDetails.autoTaxFallbackDetails.error.code` | `taxSummary.calculationDetails.autoTaxFallbackDetails.error.description` | `taxSummary.calculationDetails.rateType` | `shippingInfo.region._id` | `shippingInfo.region.name` | `shippingInfo.selectedCarrierServiceOption.code` | `shippingInfo.selectedCarrierServiceOption.title` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.streetAddress.number` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.streetAddress.name` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.businessLocation` | `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.pickupMethod` | `shippingInfo.selectedCarrierServiceOption.cost.totalPriceAfterTax.amount` | `shippingInfo.selectedCarrierServiceOption.cost.totalPriceAfterTax.convertedAmount` | `shippingInfo.selectedCarrierServiceOption.cost.totalPriceAfterTax.formattedAmount` | `shippingInfo.selectedCarrierServiceOption.cost.totalPriceAfterTax.formattedConvertedAmount` | `shippingInfo.selectedCarrierServiceOption.cost.taxDetails.taxRate` | `shippingInfo.selectedCarrierServiceOption.cost.taxDetails.rateBreakdown` | `shippingInfo.selectedCarrierServiceOption.cost.taxDetails.rateBreakdown.${number}.name` | `shippingInfo.selectedCarrierServiceOption.cost.taxDetails.rateBreakdown.${number}.rate` | `shippingInfo.selectedCarrierServiceOption.requestedShippingOption` | `shippingInfo.selectedCarrierServiceOption.otherCharges` | `shippingInfo.selectedCarrierServiceOption.otherCharges.${number}.type` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations` | `shippingInfo.selectedCarrierServiceOption.deliveryAllocations.${number}.deliveryCarrier.code` | `shippingInfo.carrierServiceOptions` | `shippingInfo.carrierServiceOptions.${number}.carrierId` | `appliedDiscounts` | `appliedDiscounts.${number}.coupon._id` | `appliedDiscounts.${number}.coupon.code` | `appliedDiscounts.${number}.coupon.amount.amount` | `appliedDiscounts.${number}.coupon.amount.convertedAmount` | `appliedDiscounts.${number}.coupon.amount.formattedAmount` | `appliedDiscounts.${number}.coupon.amount.formattedConvertedAmount` | `appliedDiscounts.${number}.coupon.name` | `appliedDiscounts.${number}.discountRule._id` | `appliedDiscounts.${number}.discountRule.name.original` | `appliedDiscounts.${number}.discountType` | `calculationErrors.generalShippingCalculationError.applicationError.code` | `calculationErrors.generalShippingCalculationError.applicationError.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.field` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.description` | `calculationErrors.generalShippingCalculationError.validationError.fieldViolations.${number}.violatedRule` | `calculationErrors.carrierErrors.errors` | `calculationErrors.carrierErrors.errors.${number}.carrierId` | `calculationErrors.orderValidationErrors` | `weightUnit` | `currency` | `conversionCurrency` | `taxIncludedInPrice` | `payNow.subtotal.amount` | `payNow.subtotal.convertedAmount` | `payNow.subtotal.formattedAmount` | `payNow.subtotal.formattedConvertedAmount` | `payLater.subtotal.amount` | `payLater.subtotal.convertedAmount` | `payLater.subtotal.formattedAmount` | `payLater.subtotal.formattedConvertedAmount` | `membershipOptions.eligibleMemberships` | `membershipOptions.eligibleMemberships.${number}._id` | `membershipOptions.eligibleMemberships.${number}.appId` | `membershipOptions.eligibleMemberships.${number}.name.original` | `membershipOptions.eligibleMemberships.${number}.credits.total` | `membershipOptions.eligibleMemberships.${number}.credits.remaining` | `membershipOptions.invalidMemberships` | `membershipOptions.invalidMemberships.${number}.reason` | `membershipOptions.selectedMemberships` | `membershipOptions.selectedMemberships.${number}._id` | `membershipOptions.selectedMemberships.${number}.appId` | `additionalFees` | `additionalFees.${number}.name` | `additionalFees.${number}.price.amount` | `additionalFees.${number}.price.convertedAmount` | `additionalFees.${number}.price.formattedAmount` | `additionalFees.${number}.price.formattedConvertedAmount` | `additionalFees.${number}.taxDetails.taxRate` | `additionalFees.${number}.source` | `siteCurrency` | `payNowTotalAfterGiftCard.amount` | `payNowTotalAfterGiftCard.convertedAmount` | `payNowTotalAfterGiftCard.formattedAmount` | `payNowTotalAfterGiftCard.formattedConvertedAmount` | `totalAfterGiftCard.amount` | `totalAfterGiftCard.convertedAmount` | `totalAfterGiftCard.formattedAmount` | `totalAfterGiftCard.formattedConvertedAmount`>>;
export interface CalculateTotalsOptions extends CalculateTotalsOptionsCouponOneOf, CalculateTotalsOptionsGiftCardOneOf {
    /**
     * Calculation ID. An identifier of the entity that you are calculating totals for, for example, cart ID or checkout ID.
     * This value will be used in order to optimise calculations by caching.
     * If not passed, calculation might be slower in some cases.
     * @minLength 1
     * @maxLength 100
     */
    calculationId?: string | null;
    /**
     * Line items for calculation.
     * @maxSize 300
     */
    lineItems?: LineItem[];
    /** Shipping address for tax and shipping calculation (if applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** Details about selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
    /**
     * Gift card ID.
     * @format GUID
     */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
    /**
     * Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart/checkout.
     * @maxSize 100
     * @deprecated
     */
    merchantDiscounts?: MerchantDiscountInput[];
    /**
     * Buyer email. Used to enforce coupon [single-use per customer](https://support.wix.com/en/article/wix-stores-limiting-coupon-usage). If not passed, single coupon usage per customer will not be enforced.
     * @format EMAIL
     */
    buyerEmail?: string | null;
    /**
     * Member id to use for this calculation
     * When not provided, given that the caller is a member, its member id will be used
     * Providing this require elevated permissions - ECOM.ADMIN_CALCULATE_TOTALS
     */
    memberId?: string | null;
    /**
     * The selected memberships and which line items they apply to
     * When not provided, default selection will be returned
     * You can also set it to empty selection
     */
    selectedMemberships?: SelectedMemberships;
    /** Buyer phone number. Used to get shipping rates. */
    buyerPhone?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId?: string | null;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     * @maxSize 20
     */
    externalReferences?: ExternalReference[];
}
/** @oneof */
export interface CalculateTotalsOptionsCouponOneOf {
    /** Coupon ID. */
    couponId?: string | null;
    /** Coupon code. */
    couponCode?: string | null;
}
/** @oneof */
export interface CalculateTotalsOptionsGiftCardOneOf {
    /**
     * Gift card ID.
     * @format GUID
     */
    giftCardId?: string | null;
    /** Gift card code. */
    giftCardCode?: string | null;
}
