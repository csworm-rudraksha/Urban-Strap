export interface PriceInfo extends PriceInfoTotalPriceOneOf {
    /**
     * Calculated total price. Available only when the
     * [service](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/get-service)'s
     * price has been set up as a numerical value in the
     * `schedule.rate.labeledPriceOptions` object.
     */
    calculatedPrice?: number;
    /**
     * Description of the total price. __Deprecated.__ Use `priceDescriptionInfo.original` instead.
     * `priceDescription` will be removed on March 31, 2025.
     * @deprecated Description of the total price. Available only when the
     * [service](https://dev.wix.com/api/rest/wix-bookings/services/service/create-service)'s
     * price has been set up as a text value in the
     * [`schedule.rate.priceText`](https://dev.wix.com/api/rest/wix-bookings/schedules-and-sessions/schedule/schedule-object) property.
     * @replacedBy price_description_info.original
     * @targetRemovalDate 2025-01-10
     */
    priceDescription?: string;
    /**
     * Description of the total price. Available only when the [service](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/get-service)'s
     * `payment.rateType` is set to `CUSTOM`.
     */
    priceDescriptionInfo?: PriceDescriptionInfo;
    /**
     * List of line items, including the number of participants and the price per participant.
     * @maxSize 20
     */
    bookingLineItems?: BookingLineItem[];
    /**
     * Total deposit the customer must pay when booking the service.
     *
     * Available when: The service includes a deposit.
     */
    deposit?: number | null;
}
/** @oneof */
export interface PriceInfoTotalPriceOneOf {
    /**
     * Calculated total price. Available only when the
     * [service](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/get-service)'s
     * price has been set up as a numerical value in
     * `schedule.rate.labeledPriceOptions`.
     *
     */
    calculatedPrice?: number;
    /**
     * Description of the total price. __Deprecated.__ Use `priceDescriptionInfo.original` instead.
     * `priceDescription` will be removed on March 31, 2025.
     * @deprecated Description of the total price. Available only when the
     * [service](https://dev.wix.com/api/rest/wix-bookings/services/service/create-service)'s
     * price has been set up as a text value in the
     * [`schedule.rate.priceText`](https://dev.wix.com/api/rest/wix-bookings/schedules-and-sessions/schedule/schedule-object) property.
     * @replacedBy price_description_info.original
     * @targetRemovalDate 2025-01-10
     */
    priceDescription?: string;
    /**
     * Description of the total price. Available only when the [service](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/get-service)'s
     * `payment.rateType` is set to `CUSTOM`.
     */
    priceDescriptionInfo?: PriceDescriptionInfo;
}
export interface BookingLineItem {
    /**
     * Service ID.
     *
     * Required when not using Wix Booking's default pricing logic.
     * @format GUID
     */
    serviceId?: string | null;
    /**
     * Resource ID. Required for services of type appointment or class.
     * @format GUID
     */
    resourceId?: string | null;
    /**
     * Custom choices. Choices are specific values for an option the customer can choose to book.
     * For example, the option `ageGroup` may have these choices: `child`, `student`, `adult`, and `senior`.
     * Each choice may have a different price.
     */
    choices?: ServiceChoice[];
    /**
     * Number of participants for the line item.
     * @min 1
     */
    numberOfParticipants?: number | null;
    /**
     * Price per participant for the line item.
     * @readonly
     */
    pricePerParticipant?: number | null;
}
export interface ServiceChoice extends ServiceChoiceChoiceOneOf {
    /**
     * Value for one of the choices in the `CustomServiceOption.choices` list.
     * Choices are specific values for an option the customer can choose to book. For example,
     * the option `ageGroup` may have these choices: `child`, `student`, `adult`, and `senior`.
     * Each choice may have a different price.
     */
    custom?: string;
    duration?: Duration;
    /**
     * ID of the corresponding option for the choice. For example, the choice `child`
     * could correspond to the option `ageGroup`. In this case, `optionId` is the ID
     * for the `ageGroup` option.
     * @format GUID
     */
    optionId?: string;
}
/** @oneof */
export interface ServiceChoiceChoiceOneOf {
    /**
     * Value for one of the choices in the `CustomServiceOption.choices` list.
     * Choices are specific values for an option the customer can choose to book. For example,
     * the option `ageGroup` may have these choices: `child`, `student`, `adult`, and `senior`.
     * Each choice may have a different price.
     */
    custom?: string;
    duration?: Duration;
}
export interface Duration {
    /**
     * Duration of the service in minutes.
     * Min: 1 minute, Max: 30 days, 23 hours, and 59 minutes
     * @min 1
     * @max 44639
     */
    minutes?: number;
    /**
     * Name of the duration option.
     * Defaults to the formatted duration e.g. "1 hour, 30 minutes".
     * @maxLength 255
     */
    name?: string | null;
}
export interface PriceDescriptionInfo {
    /**
     * Price description in the site's [primary language](https://dev.wix.com/docs/sdk/frontend-modules/window/multilingual/site-languages).
     * @maxLength 50
     */
    original?: string;
    /**
     * Translated price description. Available if the customer booked in a language other than the site's [primary language](https://dev.wix.com/docs/sdk/frontend-modules/window/multilingual/site-languages).
     * @maxLength 50
     */
    translated?: string | null;
}
export interface PreviewPriceRequest {
    /**
     * List of line items to preview the price for.
     * @minSize 1
     * @maxSize 20
     */
    bookingLineItems: BookingLineItem[];
}
export interface PreviewPriceResponse {
    /** Information about each line item's price and the estimated total price based on the line items. */
    priceInfo?: PriceInfo;
}
export interface CalculatePriceRequest {
    /** Booking to calculate the price for. */
    booking: Booking;
}
/** An entity representing a scheduled appointment, class session, or course. */
export interface Booking extends BookingParticipantsInfoOneOf {
    /**
     * Total number of participants. Available only when the relevant service
     * doesn't have _variants and options_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     * @min 1
     */
    totalParticipants?: number;
    /**
     * Information about the booked service choices and participants.
     * Available only when the booking includes multiple _service variants_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     */
    participantsChoices?: ParticipantChoices;
    /**
     * Booking ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * An object describing the *slot*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/availability-calendar/query-availability) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings-and-time-slots/time-slots/availability-calendar/query-availability))
     * or *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
     * that was booked.
     */
    bookedEntity?: BookedEntity;
    /**
     * Contact details of the site visitor or *member*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/members/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/members/introduction))
     * making the booking.
     */
    contactDetails?: ContactDetails;
    /** Additional custom fields submitted with the booking form. */
    additionalFields?: CustomFormField[];
    /**
     * Booking status.
     * One of:
     * - `"CREATED"` - The booking was created.
     * - `"UPDATED"` - The booking was updated.
     * - `"CONFIRMED"` - The booking was confirmed and appears on the bookings calendar. A booking can be manually confirmed using the [`confirmOrDecline()`](https://www.wix.com/velo/reference/wix-bookings-v2/bookings/confirmordeclinebooking) API. A booking can be automatically confirmed when the following requirements are met:
     *     + The service is configured as automatically confirmed.
     *     + The system invoked the eCommerce checkout API and created an order.
     * - `"CANCELED"` - The booking has been canceled and synced to the bookings calendar.
     * The booking can be canceled using [`cancelBooking()`](https://www.wix.com/velo/reference/wix-bookings-v2/bookings/cancelbooking) API.
     * - `"PENDING"` - The booking is waiting to be confirmed or declined by the owner and the booking is synced to the bookings calendar.
     * Bookings can be manually set as `PENDING` using the `setAsPending()` API, by those with Manage Booking Status permissions scopes.
     * Bookings can be automatically set as `PENDING` when the following requirements are met:
     *     + The service is configured as manually confirmed.
     *     + Invoking the eCommerce checkout API and an order has been created.
     * - `"WAITING_LIST"` - The booking is on a waiting list.
     * - `"DECLINED"` - The booking was declined by the owner and synced to the Bookings calendar. Bookings can be manually declined using the [`declineBooking()`](https://www.wix.com/velo/reference/wix-bookings-v2/bookings/declinebooking) API by those with Manage Booking Status permission scopes. Bookings can be automatically declined when one of the following requirements are met:
     *     + Invoking the `eCommerce checkout` API and the order declined event has been sent.
     *     + Invoking the `eCommerce checkout` API and order approved event has been sent, but the booking is offline and the booking causes a double booking.
     */
    status?: BookingStatus;
    /**
     * The payment status of the booking corresponds to the `paymentStatus` of the
     * related *eCommerce order*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/setup)| [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction)),
     * if one exists. All payment statuses are supported for every booking `status`.
     */
    paymentStatus?: PaymentStatus;
    /**
     * Selected payment option.
     *
     * Supported values: `"OFFLINE"`, `"ONLINE"`, `"MEMBERSHIP"`, `"MEMBERSHIP_OFFLINE"`.
     *
     * One of the payment options offered by the service, or another option if `skipSelectedPaymentOptionValidation` is `true`.
     * When undefined, the payment option is resolved by the service configuration on checkout.
     */
    selectedPaymentOption?: SelectedPaymentOption;
    /**
     * Date and time the booking was created in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** External user ID that you can provide. */
    externalUserId?: string | null;
    /** Revision number to be used when updating, rescheduling, or cancelling the booking. Revision number, which increments by 1 each time the booking is updated, rescheduled, or canceled. To prevent conflicting changes,the current revision must be passed when updating the booking. */
    revision?: string | null;
    /**
     * ID of the creator of the booking.
     * If `appId` and another ID are present, the other ID takes precedence.
     * @readonly
     */
    createdBy?: IdentificationData;
    /**
     * The start date of the booking in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * For a slot, this is the start date of the slot. For a schedule, this is the start date of the first session.
     * @readonly
     */
    startDate?: Date | null;
    /**
     * The end date of the booking in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * For a slot, this is the end date of the slot. For a schedule, this is the end date of the last session.
     * @readonly
     */
    endDate?: Date | null;
    /**
     * Date and time the booking was updated in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Custom field data for this object.
     * Extended fields must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Whether this booking overlaps with another confirmed booking. Returned
     * only if set to `true`.
     * @readonly
     */
    doubleBooked?: boolean | null;
}
/** @oneof */
export interface BookingParticipantsInfoOneOf {
    /**
     * Total number of participants. Available only when the relevant service
     * doesn't have _variants and options_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     * @min 1
     */
    totalParticipants?: number;
    /**
     * Information about the booked service choices and participants.
     * Available only when the booking includes multiple _service variants_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     */
    participantsChoices?: ParticipantChoices;
}
/**
 * A multi-service booking is considered available if all individual bookings are available as returned from List Multi Service Availability Time Slots.
 * Currently, `SEPARATE_BOOKINGS` and `PARALLEL_BOOKINGS` are not supported.
 * Multi-service booking is available if each of its bookings is available separately.
 * For `SEQUENTIAL_BOOKINGS`, see `List Multi Service Availability Time Slots` documentation.
 */
export declare enum MultiServiceBookingType {
    SEQUENTIAL_BOOKINGS = "SEQUENTIAL_BOOKINGS",
    SEPARATE_BOOKINGS = "SEPARATE_BOOKINGS",
    PARALLEL_BOOKINGS = "PARALLEL_BOOKINGS"
}
export interface BookedEntity extends BookedEntityItemOneOf {
    /**
     * Booked *slot*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/availability-calendar/query-availability) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings-and-time-slots/time-slots/availability-calendar/query-availability)).
     * Available only for appointment-based services and classes.
     * For appointment-based services, a new session is created, while for classes,
     * the booking is automatically linked to the existing session.
     */
    slot?: BookedSlot;
    /**
     * Booked *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
     * Available only for course bookings.
     */
    schedule?: BookedSchedule;
    /**
     * Session title at the time of booking. If there is no pre-existing session,
     * for example for appointment-based services, `title` is set to the service name.
     * @readonly
     * @maxLength 6000
     */
    title?: string | null;
    /**
     * List of tags for the booking.
     *
     * - "INDIVIDUAL": For bookings of appointment-based services. Including when the appointment is for a group of participants.
     * - "GROUP": For bookings of individual class sessions.
     * - "COURSE": For course bookings.
     */
    tags?: string[] | null;
}
/** @oneof */
export interface BookedEntityItemOneOf {
    /**
     * Booked *slot*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/availability-calendar/query-availability) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings-and-time-slots/time-slots/availability-calendar/query-availability)).
     * Available only for appointment-based services and classes.
     * For appointment-based services, a new session is created, while for classes,
     * the booking is automatically linked to the existing session.
     */
    slot?: BookedSlot;
    /**
     * Booked *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
     * Available only for course bookings.
     */
    schedule?: BookedSchedule;
}
export interface BookedSlot {
    /** Session ID. */
    sessionId?: string | null;
    /** Service ID. */
    serviceId?: string;
    /** Schedule ID. */
    scheduleId?: string;
    /**
     * ID of the corresponding *event*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction)).
     * Available for both appointment and class bookings, not available for course bookings.
     * For appointment-based services, Wix Bookings automatically populates `eventId`
     * when the booking `status` changes to `CONFIRMED`. For class bookings, it's
     * automatically populated upon booking creation.
     * @minLength 36
     * @maxLength 250
     */
    eventId?: string | null;
    /**
     * The start time of this slot in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
     * format.
     */
    startDate?: string | null;
    /**
     * The end time of this slot in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
     * format.
     */
    endDate?: string | null;
    /** The timezone according to which the slot was shown to the user when booking, and should be shown in the future. */
    timezone?: string | null;
    /**
     * Primary *resource*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/introduction))
     * for the booking. For example, the *staff member*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/introduction))
     * providing the
     * service.
     */
    resource?: BookedResource;
    /** Location where the session takes place. */
    location?: Location;
}
export interface BookedResource {
    /**
     * ID of the booking's primary resource.
     * @format GUID
     */
    _id?: string;
    /**
     * Resource's name at the time of booking.
     * @maxLength 40
     */
    name?: string | null;
    /**
     * Resource's email at the time of booking.
     * @maxLength 500
     */
    email?: string | null;
    /**
     * ID of the schedule belonging to the booking's primary resource.
     * @format GUID
     */
    scheduleId?: string | null;
}
export interface Location {
    /**
     * Business location ID. Available only for locations that are business locations,
     * meaning the `location_type` is `"OWNER_BUSINESS"`.
     * @format GUID
     */
    _id?: string | null;
    /** Location name. */
    name?: string | null;
    /** The full address of this location. */
    formattedAddress?: string | null;
    /**
     * The full translated address of this location.
     * @maxLength 512
     */
    formattedAddressTranslated?: string | null;
    /**
     * Location type.
     *
     * - `"OWNER_BUSINESS"`: The business address, as set in the site’s general settings.
     * - `"OWNER_CUSTOM"`: The address as set when creating the service.
     * - `"CUSTOM"`: The address as set for the individual session.
     */
    locationType?: LocationType;
}
export declare enum LocationType {
    UNDEFINED = "UNDEFINED",
    OWNER_BUSINESS = "OWNER_BUSINESS",
    OWNER_CUSTOM = "OWNER_CUSTOM",
    CUSTOM = "CUSTOM"
}
export interface BookedSchedule {
    /**
     * _Schedule ID_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
     */
    scheduleId?: string;
    /**
     * Booked service ID.
     * @format GUID
     */
    serviceId?: string | null;
    /**
     * _Location_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction))
     * where the schedule's sessions take place.
     * @readonly
     */
    location?: Location;
    /**
     * Timezone in which the slot or session was shown to the customer when they booked.
     * Also used whenever the customer reviews the booking's timing in the future.
     */
    timezone?: string | null;
    /**
     * Start time of the first session related to the booking in
     * [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339) format.
     * @readonly
     */
    firstSessionStart?: string | null;
    /**
     * End time of the last session related to the booking in
     * [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339) format.
     * @readonly
     */
    lastSessionEnd?: string | null;
}
export interface ContactDetails {
    /**
     * Contact ID.
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Contact's first name. When populated from a standard booking form, this
     * property corresponds to the `name` field.
     */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /**
     * Contact's email, used to create a new contact or get existing one from the [Contacts API](https://www.wix.com/velo/reference/wix-crm/contacts). Used to validate coupon usage limitations per contact. If not passed, the coupon usage limitation will not be enforced. (Coupon usage limitation validation is not supported yet).
     * @format EMAIL
     */
    email?: string | null;
    /** Contact's phone number. */
    phone?: string | null;
    /** Contact's full address. */
    fullAddress?: Address;
    /**
     * Contact's time zone.
     * @deprecated
     */
    timeZone?: string | null;
    /**
     * Contact's country in [ISO 3166-1 alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * format.
     * @format COUNTRY
     */
    countryCode?: string | null;
}
/** Physical address */
export interface Address extends AddressStreetOneOf {
    /** Street name, number and apartment number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number, as free text. */
    addressLine?: string | null;
    /**
     * Country code.
     * @format COUNTRY
     */
    country?: string | null;
    /** Subdivision. Usually state, region, prefecture or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
    /** A string containing the full address of this location. */
    formattedAddress?: string | null;
    /** Free text to help find the address. */
    hint?: string | null;
    /** Coordinates of the physical address. */
    geocode?: AddressLocation;
    /** Country full name. */
    countryFullname?: string | null;
    /** Multi-level subdivisions from top to bottom. */
    subdivisions?: Subdivision[];
}
/** @oneof */
export interface AddressStreetOneOf {
    /** Street name, number and apartment number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number, as free text. */
    addressLine?: string | null;
}
export interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
    /** Apartment number. */
    apt?: string;
}
export interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
export interface Subdivision {
    /** Subdivision code. Usually state, region, prefecture or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    code?: string;
    /** Subdivision full name. */
    name?: string;
}
export interface CustomFormField {
    /**
     * ID of the form field as defined in the form.
     * @format GUID
     */
    _id?: string;
    /** Value that was submitted for this field. */
    value?: string | null;
    /**
     * Form field's label at the time of submission.
     * @readonly
     */
    label?: string | null;
    /**
     * Form field value's type at the time of submission.
     *
     * Supported values: `"SHORT_TEXT"`, `"LONG_TEXT"`, `"CHECK_BOX"`
     */
    valueType?: ValueType;
}
export declare enum ValueType {
    /** Short text. This is the default value type. */
    SHORT_TEXT = "SHORT_TEXT",
    /** Long text. */
    LONG_TEXT = "LONG_TEXT",
    /** A text that represents the check box value. If selected the value is `true`, otherwise `false`. */
    CHECK_BOX = "CHECK_BOX"
}
/** Booking status. */
export declare enum BookingStatus {
    /**
     * The booking was created, but the customer hasn't completed the related
     * eCommerce order yet.
     */
    CREATED = "CREATED",
    /**
     * The merchant has confirmed the booking and it appears in the
     * business calendar. Merchants can set up their *services*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction))
     * to automatically confirm all `PENDING` bookings.
     */
    CONFIRMED = "CONFIRMED",
    /**
     * The customer has canceled the booking. Depending on the relevant service's
     * _policy snapshot_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policy-snapshots/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policy-snapshots/introduction))
     * they may have to pay a _cancellation fee_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-fees/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/pricing/booking-fees/introduction)).
     */
    CANCELED = "CANCELED",
    /**
     * The merchant must manually confirm the booking before it appears
     * in the business calendar.
     */
    PENDING = "PENDING",
    /** The merchant has declined the booking before the customer was charged. */
    DECLINED = "DECLINED",
    /**
     * The booking is on a waitlist.
     * Currently, you can't call Register to Waitlist
     * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings/waitlist/register-to-waitlist))
     * for course or appointment bookings, even though this is supported in live sites.
     * You can call Register to Waitlist only for class session bookings.
     */
    WAITING_LIST = "WAITING_LIST"
}
/**
 * Payment status.
 * Automatically updated when using eCommerce checkout APIs.
 */
export declare enum PaymentStatus {
    /** Undefined payment status. */
    UNDEFINED = "UNDEFINED",
    /** The booking isn't paid. */
    NOT_PAID = "NOT_PAID",
    /** The booking is fully paid. */
    PAID = "PAID",
    /** The booking is partially paid. */
    PARTIALLY_PAID = "PARTIALLY_PAID",
    /** The booking is refunded. */
    REFUNDED = "REFUNDED",
    /** The booking is free of charge. */
    EXEMPT = "EXEMPT"
}
/**
 * Selected payment option.
 *
 * One of the payment options offered by the service.
 * This field is set when the user selects an option during booking.
 * If left undefined, the payment option is resolved by the service configuration on checkout.
 */
export declare enum SelectedPaymentOption {
    /** Undefined payment option. */
    UNDEFINED = "UNDEFINED",
    /** Offline payment. */
    OFFLINE = "OFFLINE",
    /** Online payment. */
    ONLINE = "ONLINE",
    /** Payment using a Wix Pricing Plan. */
    MEMBERSHIP = "MEMBERSHIP",
    /**
     * Customers can pay only in person with a Wix Pricing Plan, while the Wix user
     * must manually redeem the pricing plan in the dashboard.
     */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
export interface BookingSource {
    /** Platform from which a booking was created. */
    platform?: Platform;
    /** Actor that created this booking. */
    actor?: Actor;
    /**
     * Wix site ID of the application that created the booking.
     * @format GUID
     * @readonly
     */
    appDefId?: string | null;
    /**
     * Name of the application that created the booking, as saved in Wix Developers Center at the time of booking.
     * @readonly
     */
    appName?: string | null;
}
export declare enum Platform {
    UNDEFINED_PLATFORM = "UNDEFINED_PLATFORM",
    WEB = "WEB",
    MOBILE_APP = "MOBILE_APP"
}
export declare enum Actor {
    UNDEFINED_ACTOR = "UNDEFINED_ACTOR",
    BUSINESS = "BUSINESS",
    CUSTOMER = "CUSTOMER"
}
export interface ParticipantNotification {
    /**
     * Whether to send the message about the changes to the customer.
     *
     * Default: `false`
     */
    notifyParticipants?: boolean;
    /** Custom message to send to the participants about the changes to the booking. */
    message?: string | null;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /**
     * ID of of a contact in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     * @format GUID
     */
    contactId?: string | null;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface FlowControlSettings {
    /** Whether availability is checked when creating or confirming the booking. */
    skipAvailabilityValidation?: boolean;
    /**
     * Whether the booking's `status` is automatically updated to `CONFIRMED` when
     * the customer completes the *eCommerce checkout*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)),
     * regardless of whether the relevant service requires manual business confirmation.
     */
    skipBusinessConfirmation?: boolean;
    /**
     * Whether the customer is allowed to pay with a payment method that isn't
     * supported for the relevant service.
     */
    skipSelectedPaymentOptionValidation?: boolean;
    /**
     * Whether the customer receives an automatic refund if there's a double booking
     * conflict. Only available if the customer has paid with a
     * pricing plan.
     */
    withRefund?: boolean | null;
}
export interface ExtendedFields {
    /**
     * Data Extensions extended fields expressed as a set of key-value pairs:
     *
     * `key:value`
     *
     * + `key` is the namespace, type `string`.
     * + `value` is the data of the extended fields data, type `struct`.
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface ParticipantChoices {
    /**
     * Information about the booked service choices. Includes the number of participants.
     * @minSize 1
     * @maxSize 20
     */
    serviceChoices?: ServiceChoices[];
}
export interface ServiceChoices {
    /**
     * Number of participants for this _variant_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     * @min 1
     */
    numberOfParticipants?: number | null;
    /**
     * Service choices for these participants.
     * @maxSize 5
     */
    choices?: ServiceChoice[];
}
export interface MultiServiceBookingInfo {
    /**
     * Multi-service booking ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /** Type of the multi-service booking. */
    type?: MultiServiceBookingType;
}
export interface CalculatePriceResponse {
    /** Information about each line item's price and the actual total base price. */
    priceInfo?: PriceInfo;
}
interface PriceDescriptionInfoNonNullableFields {
    original: string;
}
interface DurationNonNullableFields {
    minutes: number;
}
interface ServiceChoiceNonNullableFields {
    custom: string;
    duration?: DurationNonNullableFields;
    optionId: string;
}
interface BookingLineItemNonNullableFields {
    choices: ServiceChoiceNonNullableFields[];
}
interface PriceInfoNonNullableFields {
    calculatedPrice: number;
    priceDescription: string;
    priceDescriptionInfo?: PriceDescriptionInfoNonNullableFields;
    bookingLineItems: BookingLineItemNonNullableFields[];
}
export interface PreviewPriceResponseNonNullableFields {
    priceInfo?: PriceInfoNonNullableFields;
}
export interface CalculatePriceResponseNonNullableFields {
    priceInfo?: PriceInfoNonNullableFields;
}
/**
 * Previews the base price for a set of line items belonging to the same service
 * before a potential booking is actually created.
 *
 *
 *
 * The returned price preview information about each line
 * item's price and sums up each line item's price.
 *
 * The previewed price is not the actual price that will be used to charge the customer.
 * `Preview Price` only estimates the base price by adding up the price
 * of each line item before
 * the booking is actually created.
 *
 * Use [`Calculate Price`](https://www.wix.com/velo/reference/wix-bookings-v2/pricing/calculateprice) to get the base price
 * after the booking is created.
 *
 * Passing line items that belong to different services results in an error.
 *
 * ## Calculating the previewed price
 *
 * Wix Bookings has its own default pricing logic for previewing the price. You must
 * pass the `serviceId` in the `slot`
 * or `schedule` object to `previewPrice()`.
 *
 * You cannot call `previewPrice()` if you have customized Bookings pricing logic using the
 * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin. Calling `previewPrice` if custom pricing
 * logic has been implemented for the site results in an error.
 * @param bookingLineItems - List of line items to preview the price for.
 * @public
 * @documentationMaturity preview
 * @requiredField bookingLineItems
 * @permissionId BOOKINGS.PRICE_PREVIEW
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.pricing.BookingsPricingService.PreviewPrice
 */
export declare function previewPrice(bookingLineItems: BookingLineItem[]): Promise<PreviewPriceResponse & PreviewPriceResponseNonNullableFields>;
/**
 * Calculates the base price of a booking.
 *
 *
 *
 * You can call `calculatePrice()` after a booking is created. The returned calculated price includes information about each line
 * item's price and the booking's total price.
 *
 * You can use `previewPrice()` to get the base price
 * before a booking is created.
 *
 * The calculated price is the base price that will be used as a basis for charging the customer.
 * During checkout, additional taxes
 * and fees might be added to this base price.
 *
 * ## Calculating the price
 *
 * Wix Bookings has its own default pricing logic for calculating the price. When
 * using Wix Bookings' default pricing logic, you must pass the `serviceId` in the `slot`
 * or `schedule` object to `calculatePrice()`.
 *
 * Alternatively you can customize the pricing logic using the
 * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin.
 * If you integrate with a pricing provider, the customized pricing logic becomes
 * the default logic. This means that, if the Custom Pricing service plugin is implemented,
 * when calling `calculatePrice()`,
 * the customized logic is used instead.
 * @param booking - Booking to calculate the price for.
 * @public
 * @documentationMaturity preview
 * @requiredField booking
 * @permissionId BOOKINGS.PRICE_CALCULATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.pricing.BookingsPricingService.CalculatePrice
 */
export declare function calculatePrice(booking: Booking): Promise<CalculatePriceResponse & CalculatePriceResponseNonNullableFields>;
export {};
