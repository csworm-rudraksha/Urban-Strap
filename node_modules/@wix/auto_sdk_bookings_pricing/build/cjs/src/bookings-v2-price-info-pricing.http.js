"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculatePrice = exports.previewPrice = void 0;
const float_1 = require("@wix/sdk-runtime/transformations/float");
const float_2 = require("@wix/sdk-runtime/transformations/float");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixpressBookingsPricingBookingsPricingServiceUrl(opts) {
    const domainToMappings = {
        'manage._base_domain_': [
            {
                srcPath: '/_api/bookings-pricing',
                destPath: '',
            },
            {
                srcPath: '/_api/bookings-pricing/v2/price',
                destPath: '/v2/pricing',
            },
        ],
        _: [
            {
                srcPath: '/_api/bookings-pricing',
                destPath: '',
            },
            {
                srcPath: '/_api/bookings-pricing/v2/price',
                destPath: '/v2/pricing',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/bookings/v2/pricing/v2/pricing',
                destPath: '/v2/pricing',
            },
            {
                srcPath: '/bookings/v2/pricing',
                destPath: '/v2/pricing',
            },
        ],
    };
    return (0, rest_modules_1.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_bookings_pricing';
/**
 * Previews the base price for a set of line items belonging to the same service
 * before a potential booking is actually created.
 *
 *
 *
 * The returned price preview information about each line
 * item's price and sums up each line item's price.
 *
 * The previewed price is not the actual price that will be used to charge the customer.
 * `Preview Price` only estimates the base price by adding up the price
 * of each line item before
 * the booking is actually created.
 *
 * Use [`Calculate Price`](https://www.wix.com/velo/reference/wix-bookings-v2/pricing/calculateprice) to get the base price
 * after the booking is created.
 *
 * Passing line items that belong to different services results in an error.
 *
 * ## Calculating the previewed price
 *
 * Wix Bookings has its own default pricing logic for previewing the price. You must
 * pass the `serviceId` in the `slot`
 * or `schedule` object to `previewPrice()`.
 *
 * You cannot call `previewPrice()` if you have customized Bookings pricing logic using the
 * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin. Calling `previewPrice` if custom pricing
 * logic has been implemented for the site results in an error.
 */
function previewPrice(payload) {
    function __previewPrice({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [{ path: 'bookingLineItems.pricePerParticipant' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.v2.price_info',
            method: 'POST',
            methodFqn: 'com.wixpress.bookings.pricing.BookingsPricingService.PreviewPrice',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressBookingsPricingBookingsPricingServiceUrl({
                protoPath: '/v2/pricing/preview',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'priceInfo.calculatedPrice' },
                        { path: 'priceInfo.deposit' },
                        { path: 'priceInfo.bookingLineItems.pricePerParticipant' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __previewPrice;
}
exports.previewPrice = previewPrice;
/**
 * Calculates the base price of a booking.
 *
 *
 *
 * You can call `calculatePrice()` after a booking is created. The returned calculated price includes information about each line
 * item's price and the booking's total price.
 *
 * You can use `previewPrice()` to get the base price
 * before a booking is created.
 *
 * The calculated price is the base price that will be used as a basis for charging the customer.
 * During checkout, additional taxes
 * and fees might be added to this base price.
 *
 * ## Calculating the price
 *
 * Wix Bookings has its own default pricing logic for calculating the price. When
 * using Wix Bookings' default pricing logic, you must pass the `serviceId` in the `slot`
 * or `schedule` object to `calculatePrice()`.
 *
 * Alternatively you can customize the pricing logic using the
 * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin.
 * If you integrate with a pricing provider, the customized pricing logic becomes
 * the default logic. This means that, if the Custom Pricing service plugin is implemented,
 * when calling `calculatePrice()`,
 * the customized logic is used instead.
 */
function calculatePrice(payload) {
    function __calculatePrice({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'booking.createdDate' },
                    { path: 'booking.startDate' },
                    { path: 'booking.endDate' },
                    { path: 'booking.updatedDate' },
                    { path: 'booking.canceledDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'booking.contactDetails.fullAddress.geocode.latitude' },
                    { path: 'booking.contactDetails.fullAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.v2.price_info',
            method: 'POST',
            methodFqn: 'com.wixpress.bookings.pricing.BookingsPricingService.CalculatePrice',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressBookingsPricingBookingsPricingServiceUrl({
                protoPath: '/v2/pricing/calculate',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'priceInfo.calculatedPrice' },
                        { path: 'priceInfo.deposit' },
                        { path: 'priceInfo.bookingLineItems.pricePerParticipant' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __calculatePrice;
}
exports.calculatePrice = calculatePrice;
//# sourceMappingURL=bookings-v2-price-info-pricing.http.js.map