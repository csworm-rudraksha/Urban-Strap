import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsV2PriceInfo from './bookings-v2-price-info-pricing.http.js';
/**
 * A multi-service booking is considered available if all individual bookings are available as returned from List Multi Service Availability Time Slots.
 * Currently, `SEPARATE_BOOKINGS` and `PARALLEL_BOOKINGS` are not supported.
 * Multi-service booking is available if each of its bookings is available separately.
 * For `SEQUENTIAL_BOOKINGS`, see `List Multi Service Availability Time Slots` documentation.
 */
export var MultiServiceBookingType;
(function (MultiServiceBookingType) {
    MultiServiceBookingType["SEQUENTIAL_BOOKINGS"] = "SEQUENTIAL_BOOKINGS";
    MultiServiceBookingType["SEPARATE_BOOKINGS"] = "SEPARATE_BOOKINGS";
    MultiServiceBookingType["PARALLEL_BOOKINGS"] = "PARALLEL_BOOKINGS";
})(MultiServiceBookingType || (MultiServiceBookingType = {}));
export var LocationType;
(function (LocationType) {
    LocationType["UNDEFINED"] = "UNDEFINED";
    LocationType["OWNER_BUSINESS"] = "OWNER_BUSINESS";
    LocationType["OWNER_CUSTOM"] = "OWNER_CUSTOM";
    LocationType["CUSTOM"] = "CUSTOM";
})(LocationType || (LocationType = {}));
export var ValueType;
(function (ValueType) {
    /** Short text. This is the default value type. */
    ValueType["SHORT_TEXT"] = "SHORT_TEXT";
    /** Long text. */
    ValueType["LONG_TEXT"] = "LONG_TEXT";
    /** A text that represents the check box value. If selected the value is `true`, otherwise `false`. */
    ValueType["CHECK_BOX"] = "CHECK_BOX";
})(ValueType || (ValueType = {}));
/** Booking status. */
export var BookingStatus;
(function (BookingStatus) {
    /**
     * The booking was created, but the customer hasn't completed the related
     * eCommerce order yet.
     */
    BookingStatus["CREATED"] = "CREATED";
    /**
     * The merchant has confirmed the booking and it appears in the
     * business calendar. Merchants can set up their *services*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction))
     * to automatically confirm all `PENDING` bookings.
     */
    BookingStatus["CONFIRMED"] = "CONFIRMED";
    /**
     * The customer has canceled the booking. Depending on the relevant service's
     * _policy snapshot_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policy-snapshots/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policy-snapshots/introduction))
     * they may have to pay a _cancellation fee_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-fees/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/pricing/booking-fees/introduction)).
     */
    BookingStatus["CANCELED"] = "CANCELED";
    /**
     * The merchant must manually confirm the booking before it appears
     * in the business calendar.
     */
    BookingStatus["PENDING"] = "PENDING";
    /** The merchant has declined the booking before the customer was charged. */
    BookingStatus["DECLINED"] = "DECLINED";
    /**
     * The booking is on a waitlist.
     * Currently, you can't call Register to Waitlist
     * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings/waitlist/register-to-waitlist))
     * for course or appointment bookings, even though this is supported in live sites.
     * You can call Register to Waitlist only for class session bookings.
     */
    BookingStatus["WAITING_LIST"] = "WAITING_LIST";
})(BookingStatus || (BookingStatus = {}));
/**
 * Payment status.
 * Automatically updated when using eCommerce checkout APIs.
 */
export var PaymentStatus;
(function (PaymentStatus) {
    /** Undefined payment status. */
    PaymentStatus["UNDEFINED"] = "UNDEFINED";
    /** The booking isn't paid. */
    PaymentStatus["NOT_PAID"] = "NOT_PAID";
    /** The booking is fully paid. */
    PaymentStatus["PAID"] = "PAID";
    /** The booking is partially paid. */
    PaymentStatus["PARTIALLY_PAID"] = "PARTIALLY_PAID";
    /** The booking is refunded. */
    PaymentStatus["REFUNDED"] = "REFUNDED";
    /** The booking is free of charge. */
    PaymentStatus["EXEMPT"] = "EXEMPT";
})(PaymentStatus || (PaymentStatus = {}));
/**
 * Selected payment option.
 *
 * One of the payment options offered by the service.
 * This field is set when the user selects an option during booking.
 * If left undefined, the payment option is resolved by the service configuration on checkout.
 */
export var SelectedPaymentOption;
(function (SelectedPaymentOption) {
    /** Undefined payment option. */
    SelectedPaymentOption["UNDEFINED"] = "UNDEFINED";
    /** Offline payment. */
    SelectedPaymentOption["OFFLINE"] = "OFFLINE";
    /** Online payment. */
    SelectedPaymentOption["ONLINE"] = "ONLINE";
    /** Payment using a Wix Pricing Plan. */
    SelectedPaymentOption["MEMBERSHIP"] = "MEMBERSHIP";
    /**
     * Customers can pay only in person with a Wix Pricing Plan, while the Wix user
     * must manually redeem the pricing plan in the dashboard.
     */
    SelectedPaymentOption["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(SelectedPaymentOption || (SelectedPaymentOption = {}));
export var Platform;
(function (Platform) {
    Platform["UNDEFINED_PLATFORM"] = "UNDEFINED_PLATFORM";
    Platform["WEB"] = "WEB";
    Platform["MOBILE_APP"] = "MOBILE_APP";
})(Platform || (Platform = {}));
export var Actor;
(function (Actor) {
    Actor["UNDEFINED_ACTOR"] = "UNDEFINED_ACTOR";
    Actor["BUSINESS"] = "BUSINESS";
    Actor["CUSTOMER"] = "CUSTOMER";
})(Actor || (Actor = {}));
export var IdentityType;
(function (IdentityType) {
    IdentityType["UNKNOWN"] = "UNKNOWN";
    IdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    IdentityType["MEMBER"] = "MEMBER";
    IdentityType["WIX_USER"] = "WIX_USER";
    IdentityType["APP"] = "APP";
})(IdentityType || (IdentityType = {}));
/**
 * Previews the base price for a set of line items belonging to the same service
 * before a potential booking is actually created.
 *
 *
 *
 * The returned price preview information about each line
 * item's price and sums up each line item's price.
 *
 * The previewed price is not the actual price that will be used to charge the customer.
 * `Preview Price` only estimates the base price by adding up the price
 * of each line item before
 * the booking is actually created.
 *
 * Use [`Calculate Price`](https://www.wix.com/velo/reference/wix-bookings-v2/pricing/calculateprice) to get the base price
 * after the booking is created.
 *
 * Passing line items that belong to different services results in an error.
 *
 * ## Calculating the previewed price
 *
 * Wix Bookings has its own default pricing logic for previewing the price. You must
 * pass the `serviceId` in the `slot`
 * or `schedule` object to `previewPrice()`.
 *
 * You cannot call `previewPrice()` if you have customized Bookings pricing logic using the
 * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin. Calling `previewPrice` if custom pricing
 * logic has been implemented for the site results in an error.
 * @param bookingLineItems - List of line items to preview the price for.
 * @public
 * @documentationMaturity preview
 * @requiredField bookingLineItems
 * @permissionId BOOKINGS.PRICE_PREVIEW
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.pricing.BookingsPricingService.PreviewPrice
 */
export async function previewPrice(bookingLineItems) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingLineItems: bookingLineItems,
    });
    const reqOpts = ambassadorWixBookingsV2PriceInfo.previewPrice(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingLineItems: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingLineItems']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Calculates the base price of a booking.
 *
 *
 *
 * You can call `calculatePrice()` after a booking is created. The returned calculated price includes information about each line
 * item's price and the booking's total price.
 *
 * You can use `previewPrice()` to get the base price
 * before a booking is created.
 *
 * The calculated price is the base price that will be used as a basis for charging the customer.
 * During checkout, additional taxes
 * and fees might be added to this base price.
 *
 * ## Calculating the price
 *
 * Wix Bookings has its own default pricing logic for calculating the price. When
 * using Wix Bookings' default pricing logic, you must pass the `serviceId` in the `slot`
 * or `schedule` object to `calculatePrice()`.
 *
 * Alternatively you can customize the pricing logic using the
 * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin.
 * If you integrate with a pricing provider, the customized pricing logic becomes
 * the default logic. This means that, if the Custom Pricing service plugin is implemented,
 * when calling `calculatePrice()`,
 * the customized logic is used instead.
 * @param booking - Booking to calculate the price for.
 * @public
 * @documentationMaturity preview
 * @requiredField booking
 * @permissionId BOOKINGS.PRICE_CALCULATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.pricing.BookingsPricingService.CalculatePrice
 */
export async function calculatePrice(booking) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ booking: booking });
    const reqOpts = ambassadorWixBookingsV2PriceInfo.calculatePrice(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { booking: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['booking']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=bookings-v2-price-info-pricing.universal.js.map