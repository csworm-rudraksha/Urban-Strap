import { HttpClient } from '@wix/sdk-types';
import { Booking, BookingLineItem, CalculatePriceResponse, CalculatePriceResponseNonNullableFields, PreviewPriceResponse, PreviewPriceResponseNonNullableFields } from './bookings-v2-price-info-pricing.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function previewPrice(httpClient: HttpClient): PreviewPriceSignature;
interface PreviewPriceSignature {
    /**
     * Previews the base price for a set of line items belonging to the same service
     * before a potential booking is actually created.
     *
     *
     *
     * The returned price preview information about each line
     * item's price and sums up each line item's price.
     *
     * The previewed price is not the actual price that will be used to charge the customer.
     * `Preview Price` only estimates the base price by adding up the price
     * of each line item before
     * the booking is actually created.
     *
     * Use [`Calculate Price`](https://www.wix.com/velo/reference/wix-bookings-v2/pricing/calculateprice) to get the base price
     * after the booking is created.
     *
     * Passing line items that belong to different services results in an error.
     *
     * ## Calculating the previewed price
     *
     * Wix Bookings has its own default pricing logic for previewing the price. You must
     * pass the `serviceId` in the `slot`
     * or `schedule` object to `previewPrice()`.
     *
     * You cannot call `previewPrice()` if you have customized Bookings pricing logic using the
     * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin. Calling `previewPrice` if custom pricing
     * logic has been implemented for the site results in an error.
     * @param - List of line items to preview the price for.
     */
    (bookingLineItems: BookingLineItem[]): Promise<PreviewPriceResponse & PreviewPriceResponseNonNullableFields>;
}
export declare function calculatePrice(httpClient: HttpClient): CalculatePriceSignature;
interface CalculatePriceSignature {
    /**
     * Calculates the base price of a booking.
     *
     *
     *
     * You can call `calculatePrice()` after a booking is created. The returned calculated price includes information about each line
     * item's price and the booking's total price.
     *
     * You can use `previewPrice()` to get the base price
     * before a booking is created.
     *
     * The calculated price is the base price that will be used as a basis for charging the customer.
     * During checkout, additional taxes
     * and fees might be added to this base price.
     *
     * ## Calculating the price
     *
     * Wix Bookings has its own default pricing logic for calculating the price. When
     * using Wix Bookings' default pricing logic, you must pass the `serviceId` in the `slot`
     * or `schedule` object to `calculatePrice()`.
     *
     * Alternatively you can customize the pricing logic using the
     * [BookingsCustomPricing](https://dev.wix.com/docs/velo/api-reference/wix-bookings-v2/service-plugins-spis/bookings-custom-pricing/introduction) service plugin.
     * If you integrate with a pricing provider, the customized pricing logic becomes
     * the default logic. This means that, if the Custom Pricing service plugin is implemented,
     * when calling `calculatePrice()`,
     * the customized logic is used instead.
     * @param - Booking to calculate the price for.
     */
    (booking: Booking): Promise<CalculatePriceResponse & CalculatePriceResponseNonNullableFields>;
}
export { Actor, Address, AddressLocation, AddressStreetOneOf, BookedEntity, BookedEntityItemOneOf, BookedResource, BookedSchedule, BookedSlot, Booking, BookingLineItem, BookingParticipantsInfoOneOf, BookingSource, BookingStatus, CalculatePriceRequest, CalculatePriceResponse, CalculatePriceResponseNonNullableFields, ContactDetails, CustomFormField, Duration, ExtendedFields, FlowControlSettings, IdentificationData, IdentificationDataIdOneOf, IdentityType, Location, LocationType, MultiServiceBookingInfo, MultiServiceBookingType, ParticipantChoices, ParticipantNotification, PaymentStatus, Platform, PreviewPriceRequest, PreviewPriceResponse, PreviewPriceResponseNonNullableFields, PriceDescriptionInfo, PriceInfo, PriceInfoTotalPriceOneOf, SelectedPaymentOption, ServiceChoice, ServiceChoiceChoiceOneOf, ServiceChoices, StreetAddress, Subdivision, ValueType, } from './bookings-v2-price-info-pricing.universal.js';
