// src/members-v1-role-authorization.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/members-v1-role-authorization.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressMembersMemberrolesMemberRolesUrl(opts) {
  const domainToMappings = {
    "api._api_base_domain_": [
      {
        srcPath: "/members/v1/roles",
        destPath: ""
      }
    ],
    _: [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "members.wixapps.net": [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "www.wixapis.com": [
      {
        srcPath: "/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/members/v1/roles",
        destPath: "/v1/roles"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_members_authorization";
function assignRole(payload) {
  function __assignRole({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.role",
      method: "POST",
      methodFqn: "com.wixpress.members.memberroles.MemberRoles.AssignRole",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberrolesMemberRolesUrl({
        protoPath: "/v1/roles/members/{memberId}",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __assignRole;
}
function unassignRole(payload) {
  function __unassignRole({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.role",
      method: "DELETE",
      methodFqn: "com.wixpress.members.memberroles.MemberRoles.UnassignRole",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberrolesMemberRolesUrl({
        protoPath: "/v1/roles/members/{memberId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __unassignRole;
}
function getRoles(payload) {
  function __getRoles({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.role",
      method: "GET",
      methodFqn: "com.wixpress.members.memberroles.MemberRoles.GetRoles",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberrolesMemberRolesUrl({
        protoPath: "/v1/roles/members/{memberId}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getRoles;
}
function queryRoles(payload) {
  function __queryRoles({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.role",
      method: "POST",
      methodFqn: "com.wixpress.members.memberroles.MemberRoles.QueryRoles",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersMemberrolesMemberRolesUrl({
        protoPath: "/v1/roles/members/query",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __queryRoles;
}

// src/members-v1-role-authorization.universal.ts
async function assignRole2(memberId, roleKey) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    memberId,
    roleKey
  });
  const reqOpts = assignRole(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberId: "$[0]", roleKey: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["memberId", "roleKey"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function unassignRole2(memberId, roleKey) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    memberId,
    roleKey
  });
  const reqOpts = unassignRole(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberId: "$[0]", roleKey: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["memberId", "roleKey"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getRoles2(memberId) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ memberId });
  const reqOpts = getRoles(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberId: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["memberId"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function queryRoles2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    query: options?.query
  });
  const reqOpts = queryRoles(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0].query" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/members-v1-role-authorization.public.ts
function assignRole3(httpClient) {
  return (memberId, roleKey) => assignRole2(
    memberId,
    roleKey,
    // @ts-ignore
    { httpClient }
  );
}
function unassignRole3(httpClient) {
  return (memberId, roleKey) => unassignRole2(
    memberId,
    roleKey,
    // @ts-ignore
    { httpClient }
  );
}
function getRoles3(httpClient) {
  return (memberId) => getRoles2(
    memberId,
    // @ts-ignore
    { httpClient }
  );
}
function queryRoles3(httpClient) {
  return (options) => queryRoles2(
    options,
    // @ts-ignore
    { httpClient }
  );
}

// src/members-v1-role-authorization.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
var assignRole4 = /* @__PURE__ */ createRESTModule(assignRole3);
var unassignRole4 = /* @__PURE__ */ createRESTModule(unassignRole3);
var getRoles4 = /* @__PURE__ */ createRESTModule(getRoles3);
var queryRoles4 = /* @__PURE__ */ createRESTModule(queryRoles3);
export {
  assignRole4 as assignRole,
  getRoles4 as getRoles,
  queryRoles4 as queryRoles,
  unassignRole4 as unassignRole
};
//# sourceMappingURL=index.mjs.map