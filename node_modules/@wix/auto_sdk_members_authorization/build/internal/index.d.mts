import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { A as AssignRoleResponse, U as UnassignRoleResponse, G as GetRolesResponse, Q as QueryRolesOptions, a as QueryRolesResponse } from './members-v1-role-authorization.universal-Cy5OMX8J.mjs';
export { b as AssignRoleRequest, E as Empty, d as GetRolesRequest, M as MemberRole, P as PolicyAssignedToContributor, g as PolicyRemovedFromContributor, h as PolicyUpdatedForContributor, f as Query, e as QueryRolesRequest, R as Role, c as UnassignRoleRequest } from './members-v1-role-authorization.universal-Cy5OMX8J.mjs';

declare function assignRole$1(httpClient: HttpClient): AssignRoleSignature;
interface AssignRoleSignature {
    /** */
    (memberId: string, roleKey: string): Promise<AssignRoleResponse>;
}
declare function unassignRole$1(httpClient: HttpClient): UnassignRoleSignature;
interface UnassignRoleSignature {
    /** */
    (memberId: string, roleKey: string): Promise<UnassignRoleResponse>;
}
declare function getRoles$1(httpClient: HttpClient): GetRolesSignature;
interface GetRolesSignature {
    /** */
    (memberId: string): Promise<GetRolesResponse>;
}
declare function queryRoles$1(httpClient: HttpClient): QueryRolesSignature;
interface QueryRolesSignature {
    /** */
    (options?: QueryRolesOptions | undefined): Promise<QueryRolesResponse>;
}

declare const assignRole: MaybeContext<BuildRESTFunction<typeof assignRole$1> & typeof assignRole$1>;
declare const unassignRole: MaybeContext<BuildRESTFunction<typeof unassignRole$1> & typeof unassignRole$1>;
declare const getRoles: MaybeContext<BuildRESTFunction<typeof getRoles$1> & typeof getRoles$1>;
declare const queryRoles: MaybeContext<BuildRESTFunction<typeof queryRoles$1> & typeof queryRoles$1>;

export { AssignRoleResponse, GetRolesResponse, QueryRolesOptions, QueryRolesResponse, UnassignRoleResponse, assignRole, getRoles, queryRoles, unassignRole };
