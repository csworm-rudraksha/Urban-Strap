"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listEvents = exports.disconnect = exports.updateSyncConfig = exports.listCalendars = exports.connectByCredentials = exports.connectByOAuth = exports.listConnections = exports.getConnection = exports.listProviders = exports.SessionType = exports.SessionStatus = exports.ConferenceType = exports.ScheduleStatus = exports.ApprovalStatus = exports.DayOfWeek = exports.LocationsLocationType = exports.LocationStatus = exports.LocationType = exports.RecurringIntervalType = exports.Transparency = exports.Day = exports.SyncToErrorReason = exports.ErrorReason = exports.Status = exports.SyncToCalendar = exports.ListEventFromCalendars = exports.ConnectMethod = exports.CalendarType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsCalendarV2ExternalCalendar = __importStar(require("./bookings-calendar-v2-external-calendar-external-calendars.http.js"));
var CalendarType;
(function (CalendarType) {
    /** There is no information about the external calendar type. */
    CalendarType["UNDEFINED"] = "UNDEFINED";
    /** [Google Calendar](https://developers.google.com/calendar/api/guides/overview). */
    CalendarType["GOOGLE"] = "GOOGLE";
    /** Apple iCalendar. */
    CalendarType["I_CAL"] = "I_CAL";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OUTLOOK"] = "OUTLOOK";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OFFICE_365"] = "OFFICE_365";
    /** Microsoft Calendar. For example, Office 365 calendar or Outlook calendar. */
    CalendarType["MICROSOFT"] = "MICROSOFT";
    /** A different type of external calendar, not listed here. */
    CalendarType["OTHER"] = "OTHER";
})(CalendarType || (exports.CalendarType = CalendarType = {}));
var ConnectMethod;
(function (ConnectMethod) {
    /**
     * There is no information about how you can connect the external calendar
     * to the Wix site.
     */
    ConnectMethod["UNDEFINED"] = "UNDEFINED";
    /**
     * You can connect the external calendar to the Wix site by calling *Connect By O Auth*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/connect-by-oauth) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/connect-by-o-auth)).
     */
    ConnectMethod["OAUTH"] = "OAUTH";
    /**
     * You can connect the external calendar to the Wix site by calling *Connect By Credentials*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/connect-by-credentials) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/connect-by-credentials)).
     */
    ConnectMethod["CREDENTIALS"] = "CREDENTIALS";
})(ConnectMethod || (exports.ConnectMethod = ConnectMethod = {}));
var ListEventFromCalendars;
(function (ListEventFromCalendars) {
    /**
     * There is no information about which external calendar events you
     * can import to the Wix site.
     */
    ListEventFromCalendars["UNDEFINED"] = "UNDEFINED";
    /** You can't import any events from the external calendar to the Wix site. */
    ListEventFromCalendars["NOT_SUPPORTED"] = "NOT_SUPPORTED";
    /**
     * You can import events only for the external calendar that's
     * designated as primary.
     */
    ListEventFromCalendars["PRIMARY_CALENDAR_ONLY"] = "PRIMARY_CALENDAR_ONLY";
    /**
     * You can import events only for a specific external calendar account.
     * You can call _List Calendars_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-calendars) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-calendars))
     * to retrieve a complete list of external calendar accounts.
     */
    ListEventFromCalendars["SPECIFIC_CALENDARS"] = "SPECIFIC_CALENDARS";
})(ListEventFromCalendars || (exports.ListEventFromCalendars = ListEventFromCalendars = {}));
var SyncToCalendar;
(function (SyncToCalendar) {
    /**
     * There is no information about which Wix calendar *events*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
     * you can export to the external calendar.
     */
    SyncToCalendar["UNDEFINED"] = "UNDEFINED";
    /**
     * You can't export any Wix calendar *events*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
     * to the external calendar.
     */
    SyncToCalendar["NOT_SUPPORTED"] = "NOT_SUPPORTED";
    /**
     * You can export Wix calendar *events*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
     * only to the external calendar that's designated as primary.
     */
    SyncToCalendar["PRIMARY_CALENDAR_ONLY"] = "PRIMARY_CALENDAR_ONLY";
    /** Events can be exported to specific external calendars. Use [List Calendars](#list-calendars) to get a list of calendars for a connected external calendar account. */
    SyncToCalendar["SPECIFIC_CALENDAR"] = "SPECIFIC_CALENDAR";
    /**
     * You can export Wix calendar *events*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
     * only to a dedicated external calendar account. You can
     * call _List Calendars_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-calendars) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-calendars))
     * to retrieve a complete list of external calendar accounts.
     */
    SyncToCalendar["DEDICATED_CALENDAR"] = "DEDICATED_CALENDAR";
})(SyncToCalendar || (exports.SyncToCalendar = SyncToCalendar = {}));
var Status;
(function (Status) {
    /** There is no information about the connection status. */
    Status["UNDEFINED"] = "UNDEFINED";
    /**
     * The external calendar is connected to the Wix *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)),
     * but the sync process hasn't started yet.
     */
    Status["CONNECTED"] = "CONNECTED";
    /** Sync process is ongoing. */
    Status["SYNC_IN_PROGRESS"] = "SYNC_IN_PROGRESS";
    /** The Wix calendar and the external calendar are in sync. */
    Status["SYNCED"] = "SYNCED";
    /**
     * The external calender has been disconnected from the Wix *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
     */
    Status["DISCONNECTED"] = "DISCONNECTED";
    /** The calendars sync is in error state. */
    Status["ERROR"] = "ERROR";
})(Status || (exports.Status = Status = {}));
var ErrorReason;
(function (ErrorReason) {
    /** There is no information about the connection error. */
    ErrorReason["UNDEFINED"] = "UNDEFINED";
    /** The external calendar's access token has been revoked. */
    ErrorReason["TOKEN_REVOKED"] = "TOKEN_REVOKED";
    /** The external calendar couldn't be created. */
    ErrorReason["EXTERNAL_CALENDAR_CREATION_FAILED"] = "EXTERNAL_CALENDAR_CREATION_FAILED";
    /** The external calendar was deleted. */
    ErrorReason["EXTERNAL_CALENDAR_DELETED"] = "EXTERNAL_CALENDAR_DELETED";
})(ErrorReason || (exports.ErrorReason = ErrorReason = {}));
var SyncToErrorReason;
(function (SyncToErrorReason) {
    /** No sync error. */
    SyncToErrorReason["UNDEFINED"] = "UNDEFINED";
    /** Could not create calendar to sync sessions to. */
    SyncToErrorReason["CALENDAR_CREATION_FAILURE"] = "CALENDAR_CREATION_FAILURE";
    /** Calendar was deleted while sync was in progress. */
    SyncToErrorReason["CALENDAR_DELETED"] = "CALENDAR_DELETED";
})(SyncToErrorReason || (exports.SyncToErrorReason = SyncToErrorReason = {}));
var Day;
(function (Day) {
    /** Undefined. */
    Day["UNDEFINED"] = "UNDEFINED";
    /** Monday. */
    Day["MON"] = "MON";
    /** Tuesday. */
    Day["TUE"] = "TUE";
    /** Wednesday. */
    Day["WED"] = "WED";
    /** Thursday. */
    Day["THU"] = "THU";
    /** Friday. */
    Day["FRI"] = "FRI";
    /** Saturday. */
    Day["SAT"] = "SAT";
    /** Sunday. */
    Day["SUN"] = "SUN";
})(Day || (exports.Day = Day = {}));
var Transparency;
(function (Transparency) {
    Transparency["UNDEFINED"] = "UNDEFINED";
    /** The schedule can have available slots during the linked schedule's sessions. */
    Transparency["FREE"] = "FREE";
    /** The schedule can't have available slots during the linked schedule's sessions. */
    Transparency["BUSY"] = "BUSY";
})(Transparency || (exports.Transparency = Transparency = {}));
var RecurringIntervalType;
(function (RecurringIntervalType) {
    /** The default value. Sessions for this interval will be of type EVENT. */
    RecurringIntervalType["UNDEFINED"] = "UNDEFINED";
    /** A recurring interval of events. */
    RecurringIntervalType["EVENT"] = "EVENT";
    /** Deprecated. */
    RecurringIntervalType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** A recurring interval for availability. */
    RecurringIntervalType["AVAILABILITY"] = "AVAILABILITY";
})(RecurringIntervalType || (exports.RecurringIntervalType = RecurringIntervalType = {}));
var LocationType;
(function (LocationType) {
    LocationType["UNDEFINED"] = "UNDEFINED";
    LocationType["OWNER_BUSINESS"] = "OWNER_BUSINESS";
    LocationType["OWNER_CUSTOM"] = "OWNER_CUSTOM";
    LocationType["CUSTOM"] = "CUSTOM";
})(LocationType || (exports.LocationType = LocationType = {}));
/** For future use */
var LocationStatus;
(function (LocationStatus) {
    LocationStatus["ACTIVE"] = "ACTIVE";
    LocationStatus["INACTIVE"] = "INACTIVE";
})(LocationStatus || (exports.LocationStatus = LocationStatus = {}));
/** For future use */
var LocationsLocationType;
(function (LocationsLocationType) {
    LocationsLocationType["UNKNOWN"] = "UNKNOWN";
    LocationsLocationType["BRANCH"] = "BRANCH";
    LocationsLocationType["OFFICES"] = "OFFICES";
    LocationsLocationType["RECEPTION"] = "RECEPTION";
    LocationsLocationType["HEADQUARTERS"] = "HEADQUARTERS";
    LocationsLocationType["INVENTORY"] = "INVENTORY";
})(LocationsLocationType || (exports.LocationsLocationType = LocationsLocationType = {}));
/** Enumerates the days of the week. */
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["MONDAY"] = "MONDAY";
    DayOfWeek["TUESDAY"] = "TUESDAY";
    DayOfWeek["WEDNESDAY"] = "WEDNESDAY";
    DayOfWeek["THURSDAY"] = "THURSDAY";
    DayOfWeek["FRIDAY"] = "FRIDAY";
    DayOfWeek["SATURDAY"] = "SATURDAY";
    DayOfWeek["SUNDAY"] = "SUNDAY";
})(DayOfWeek || (exports.DayOfWeek = DayOfWeek = {}));
var ApprovalStatus;
(function (ApprovalStatus) {
    /** Default. */
    ApprovalStatus["UNDEFINED"] = "UNDEFINED";
    /** Pending business approval. */
    ApprovalStatus["PENDING"] = "PENDING";
    /** Approved by the business. */
    ApprovalStatus["APPROVED"] = "APPROVED";
    /** Declined by the business. */
    ApprovalStatus["DECLINED"] = "DECLINED";
})(ApprovalStatus || (exports.ApprovalStatus = ApprovalStatus = {}));
var ScheduleStatus;
(function (ScheduleStatus) {
    /** Undefined schedule status. */
    ScheduleStatus["UNDEFINED"] = "UNDEFINED";
    /** The schedule was created. */
    ScheduleStatus["CREATED"] = "CREATED";
    /** The schedule was cancelled. */
    ScheduleStatus["CANCELLED"] = "CANCELLED";
})(ScheduleStatus || (exports.ScheduleStatus = ScheduleStatus = {}));
var ConferenceType;
(function (ConferenceType) {
    /** Undefined conference type. */
    ConferenceType["UNDEFINED"] = "UNDEFINED";
    /** API-generated online meeting. */
    ConferenceType["ONLINE_MEETING_PROVIDER"] = "ONLINE_MEETING_PROVIDER";
    /** User-defined meeting. */
    ConferenceType["CUSTOM"] = "CUSTOM";
})(ConferenceType || (exports.ConferenceType = ConferenceType = {}));
var SessionStatus;
(function (SessionStatus) {
    /** Undefined status. */
    SessionStatus["UNDEFINED"] = "UNDEFINED";
    /** Session is confirmed. Default status. */
    SessionStatus["CONFIRMED"] = "CONFIRMED";
    /**
     * Session is cancelled.
     * A cancelled session can be the cancellation of a recurring session that should no longer be displayed or a deleted single session.
     * The ListSessions returns cancelled sessions only if 'includeDelete' flag is set to true.
     */
    SessionStatus["CANCELLED"] = "CANCELLED";
})(SessionStatus || (exports.SessionStatus = SessionStatus = {}));
var SessionType;
(function (SessionType) {
    SessionType["UNDEFINED"] = "UNDEFINED";
    /**
     * Creates an event on the calendar for the owner of the schedule that the session belongs to.
     * Default type.
     */
    SessionType["EVENT"] = "EVENT";
    /** Represents a resource's available working hours. */
    SessionType["WORKING_HOURS"] = "WORKING_HOURS";
    /** Deprecated. Please use WORKING_HOURS. */
    SessionType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** Deprecated. Represents a resource's available hours. Please use WORKING_HOURS. */
    SessionType["AVAILABILITY"] = "AVAILABILITY";
})(SessionType || (exports.SessionType = SessionType = {}));
/**
 * Retrieves a list of external calendar providers supported on the Wix site.
 *
 *
 * The list of external calendar providers includes:
 *
 * + External calendar providers that are supported by default, such as Google, Apple, and Microsoft.
 * + External calenders for which the site owner has enabled integration by installing an app.
 *
 * For each provider, check `features.connectMethods` to find out whether to use
 * _Connect By Credentials_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/connect-by-credentials) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/connect-by-credentials))
 * or _Connect By OAuth_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/connect-by-oauth) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/connect-by-o-auth))
 * to establish a connection.
 * @public
 * @permissionId CALENDAR.LIST_EXTERNAL_CALENDAR_PROVIDERS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.ListProviders
 */
async function listProviders() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.listProviders(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listProviders = listProviders;
/**
 * Retrieves an external calendar connection by ID.
 *
 *
 * The `syncConfig` property contains configuration details about event import
 * from and event export to the external calendar.
 * @param connectionId - ID of the connection to retrieve.
 * @public
 * @requiredField connectionId
 * @permissionId CALENDAR.READ_OWN_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionId CALENDAR.READ_ALL_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.GetConnection
 */
async function getConnection(connectionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        connectionId: connectionId,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.getConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { connectionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['connectionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getConnection = getConnection;
/**
 * Retrieves a list of external calendar connections.
 *
 *
 * ## Filter
 *
 * You can filter by *schedule ID*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
 *
 * ## Partial success
 *
 * By default, the call fails if details for at least 1 connection can't be
 * retrieved from the external provider. However, you can specify
 * `{"partialFailure": true}` to allow the call to succeed, if details for at
 * least 1 connection can be retrieved.
 * @public
 * @param options - Options to use when listing connections.
 * @permissionId CALENDAR.READ_OWN_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionId CALENDAR.READ_ALL_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.ListConnections
 */
async function listConnections(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        scheduleIds: options?.scheduleIds,
        partialFailure: options?.partialFailure,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.listConnections(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                scheduleIds: '$[0].scheduleIds',
                partialFailure: '$[0].partialFailure',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listConnections = listConnections;
/**
 * Connects a *Wix schedule*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
 * to an external calendar account following [OAuth authorization protocol](https://oauth.net/2/).
 *
 *
 * ## Authorization flow
 *
 * The full authorization flow looks like this:
 *
 * 1. Call *Connect By OAuth* with the appropriate parameters.
 * 2. Redirect the owner of the external calendar account to the returned
 * `oAUthUrl`.
 * 3. The account owner authorizes access.
 * 4. The account owner is automatically redirected to the URL you've provided
 * in `redirectUrl` of the *Connect By OAuth* call.
 * 5. Save the new `connectionId`. You find it as a query parameter in the URL
 * to which the account owner is redirected.
 *
 * See *this sample flow*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/sample-flows#connect-an-external-calendar-by-oauth) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/sample-flows#connect-an-external-calendar-by-oauth))
 * for more details.
 *
 * ## Failure consequences
 *
 * If the attempt to connect fails, the account owner is still redirected to
 * the URL you specify in `redirectUrl`, but it incudes an `error` query
 * parameter set to 1 of the following values:
 *
 * - `reject`: The external calendar owner has rejected the authorization request.
 * - `unsupported`: Connecting to the user's external account type is not supported by the provider.
 * - `internal`: An error unrelated to the client or the request that prevents the server from fulfilling the request.
 *
 * ## Next steps
 *
 * After connecting an external calendar account to a Wix schedule, you can do
 * the following.
 *
 * ### Check the 2-way-sync settings
 *
 * Call *List Connections*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-connections) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-connections))
 * and filter by the relevant schedule ID.
 *
 * If needed, call *Update Sync Config*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/update-sync-config) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/update-sync-config))
 * to adjust the syncing configuration.
 *
 * ### Retrieve external calendar events
 *
 * Once a connection is successfully created, you can call *List Events*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-events) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-events))
 * to obtain an up-to-date list of events in the connected external calendars.
 *
 * ## When to call Connect By Credentials instead
 *
 * You can call *Connect By Credentials*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/connect-by-credentials) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/connect-by-credentials))
 * if:
 *
 * + The external calendar provider doesn't support OAuth.
 * + You don't want to redirect the account owner.
 *
 * Call *List Providers*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-providers) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-providers))
 * for a complete list of external calendar providers supported on the Wix site,
 * including which authorization methods they support.
 * @param scheduleId - ID of the schedule to connect with the external calendar account.
 * @param redirectUrl - URL to redirect the user to after they authorize access to the external calendar account.
 *
 * If the connection is successfully established, the user is redirected to this URL with a query parameter `connectionId` containing the new connection ID.
 * If the attempt to connect fails, the user is redirected to this URL with a query parameter `error` containing the error type.
 * @public
 * @requiredField providerId
 * @requiredField redirectUrl
 * @requiredField scheduleId
 * @param providerId - ID of the external calendar provider. Find this with the `listProviders()` function.
 * @permissionId CALENDAR.MANAGE_OWN_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionId CALENDAR.MANAGE_ALL_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.ConnectByOAuth
 */
async function connectByOAuth(providerId, scheduleId, redirectUrl) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        providerId: providerId,
        scheduleId: scheduleId,
        redirectUrl: redirectUrl,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.connectByOAuth(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                providerId: '$[0]',
                scheduleId: '$[1]',
                redirectUrl: '$[2]',
            },
            singleArgumentUnchanged: false,
        }, ['providerId', 'scheduleId', 'redirectUrl']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.connectByOAuth = connectByOAuth;
/**
 * Connects a *Wix schedule*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
 * to an external calendar account using credentials.
 *
 *
 * ## Next steps
 *
 * After connecting an external calendar account to a Wix schedule, you can do
 * the following.
 *
 * ### Check the 2-way-sync settings
 *
 * Call *List Connections*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-connections) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-connections))
 * and filter by the relevant schedule ID.
 *
 * If needed, call *Update Sync Config*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/update-sync-config) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/update-sync-config))
 * to adjust the syncing configuration.
 *
 * ### Retrieve external calendar events
 *
 * Once a connection is successfully created, you can call *List Events*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-events) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-events))
 * to obtain an up-to-date list of events in the connected external calendars.
 *
 * ## When to call Connect By OAuth instead
 *
 * You could call *Connect By OAuth*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/connect-by-oauth) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/connect-by-o-auth))
 * if:
 *
 * + The external calendar provider doesn't support authorization by credentials.
 * + You don't have access to the external calendar account credentials.
 * + You want the account owner to approve the connection.
 *
 * Call *List Providers*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-providers) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-providers))
 * for a complete list of external calendar providers supported on the Wix site,
 * including which authorization methods they support.
 * @param scheduleId - ID of the schedule to connect with the external calendar account.
 * @param email - Email address for the external calendar account.
 * @param password - Password for the external calendar account.
 * @public
 * @requiredField email
 * @requiredField password
 * @requiredField providerId
 * @requiredField scheduleId
 * @param providerId - ID of the external calendar provider. Find this with the `listProviders()` function.
 * @permissionId CALENDAR.MANAGE_OWN_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionId CALENDAR.MANAGE_ALL_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.ConnectByCredentials
 */
async function connectByCredentials(providerId, scheduleId, email, password) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[4];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        providerId: providerId,
        scheduleId: scheduleId,
        email: email,
        password: password,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.connectByCredentials(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                providerId: '$[0]',
                scheduleId: '$[1]',
                email: '$[2]',
                password: '$[3]',
            },
            singleArgumentUnchanged: false,
        }, ['providerId', 'scheduleId', 'email', 'password']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.connectByCredentials = connectByCredentials;
/**
 * Retrieves details about the external calendar accounts associated with the specified connection.
 * @param connectionId - ID of the external calendar connection to list calendars for.
 * @public
 * @requiredField connectionId
 * @permissionId CALENDAR.READ_OWN_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.ListCalendars
 */
async function listCalendars(connectionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        connectionId: connectionId,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.listCalendars(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { connectionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['connectionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listCalendars = listCalendars;
/**
 * Updates the import and export settings for an external calendar connection's
 * events.
 *
 *
 * A connection's `syncConfig` object determines:
 *
 * + Whether events from 1 or more accounts belonging to the external
 * calendar are imported to the connected *Wix schedule*.
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
 * If importing events is enabled, you can call _List Events_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-events) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-events))
 * to retrieve external calendar events.
 * + Whether events from the Wix schedule are exported to 1 or more accounts
 * belonging to the external calendar.
 *
 * To check the current import and export settings, you can call
 * _Get Connection_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/get-connection) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/get-connection))
 * or _List Connections_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-connections) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-connections)).
 * @param connectionId - ID of the external calendar connection to update.
 * @param syncConfig - Updated sync configuration details.
 * @public
 * @requiredField connectionId
 * @requiredField syncConfig
 * @permissionId CALENDAR.MANAGE_OWN_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.UpdateSyncConfig
 */
async function updateSyncConfig(connectionId, syncConfig) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        connectionId: connectionId,
        syncConfig: syncConfig,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.updateSyncConfig(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { connectionId: '$[0]', syncConfig: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['connectionId', 'syncConfig']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateSyncConfig = updateSyncConfig;
/**
 * Disconnects a Wix schedule from an external calendar and deletes all Wix
 * calendar *events*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction))
 * from the external calendar.
 *
 *
 * When an external calendar is disconnected, the connection's `status`
 * changes to `DISCONNECTED`.
 *
 * After disconnecting, _List Events_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/external-calendars/list-events) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/calendar/external-calendar-v2/list-events))
 * no longer returns events from the disconnected external calendar.
 * @param connectionId - ID of the external calendar connection to disconnect.
 * @public
 * @requiredField connectionId
 * @permissionId CALENDAR.MANAGE_OWN_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionId CALENDAR.MANAGE_ALL_EXTERNAL_CALENDAR_CONNECTIONS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.Disconnect
 */
async function disconnect(connectionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        connectionId: connectionId,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.disconnect(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { connectionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['connectionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.disconnect = disconnect;
/**
 * Retrieves a list of events from all external calendar accounts, based on
 * the provided filtering and paging.
 *
 *
 * ## Filters
 *
 * You must filter by specifying both `from` and `to` dates, unless you specify
 * `cursorPaging.cursor`.
 *
 * Additionally, you can specify `scheduleIds` or `userIds` to further limit
 * which events are returned. By default, events related to all schedules and
 * Wix users are returned.
 *
 * ## Sorting
 *
 * Returned events are sorted by start date in ascending order. You can't
 * adjust the sorting.
 *
 * ## Personal data
 *
 * By default, the following `event` fields aren't returned:
 *
 * + `calendarName`.
 * + `title`.
 * + `scheduleOwnerName`.
 *
 * You can retrieve these fields, by specifying `{"fieldsets": "OWN_PI"}`.
 *
 * ## Partial success
 *
 * By default, the call fails if events for at least 1 connection can't be
 * retrieved from an external provider. However, you can specify
 * `{"partialFailure": true}` to allow the call to succeed, if details for at
 * least 1 connection can be retrieved.
 * @public
 * @param options - Options to use when listing events.
 * @permissionId CALENDAR.READ_EXTERNAL_CALENDAR_EVENTS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage External Calendars
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-EXTERNAL-CALENDARS
 * @applicableIdentity APP
 * @fqn com.wix.bookings.externalcalendar.api.v2.ExternalCalendarService.ListEvents
 */
async function listEvents(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        from: options?.from,
        to: options?.to,
        scheduleIds: options?.scheduleIds,
        userIds: options?.userIds,
        allDay: options?.allDay,
        fieldsets: options?.fieldsets,
        cursorPaging: options?.cursorPaging,
        partialFailure: options?.partialFailure,
    });
    const reqOpts = ambassadorWixBookingsCalendarV2ExternalCalendar.listEvents(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                from: '$[0].from',
                to: '$[0].to',
                scheduleIds: '$[0].scheduleIds',
                userIds: '$[0].userIds',
                allDay: '$[0].allDay',
                fieldsets: '$[0].fieldsets',
                cursorPaging: '$[0].cursorPaging',
                partialFailure: '$[0].partialFailure',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listEvents = listEvents;
//# sourceMappingURL=bookings-calendar-v2-external-calendar-external-calendars.universal.js.map