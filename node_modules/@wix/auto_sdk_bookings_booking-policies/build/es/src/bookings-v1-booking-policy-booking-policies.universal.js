import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsV1BookingPolicy from './bookings-v1-booking-policy-booking-policies.http.js';
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
/** Where the extra text should be displayed: before, after or instead of the actual address. */
export var PlacementType;
(function (PlacementType) {
    PlacementType["BEFORE"] = "BEFORE";
    PlacementType["AFTER"] = "AFTER";
    PlacementType["REPLACE"] = "REPLACE";
})(PlacementType || (PlacementType = {}));
/** Enumerates the days of the week. */
export var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["MONDAY"] = "MONDAY";
    DayOfWeek["TUESDAY"] = "TUESDAY";
    DayOfWeek["WEDNESDAY"] = "WEDNESDAY";
    DayOfWeek["THURSDAY"] = "THURSDAY";
    DayOfWeek["FRIDAY"] = "FRIDAY";
    DayOfWeek["SATURDAY"] = "SATURDAY";
    DayOfWeek["SUNDAY"] = "SUNDAY";
})(DayOfWeek || (DayOfWeek = {}));
export var ResolutionMethod;
(function (ResolutionMethod) {
    ResolutionMethod["QUERY_PARAM"] = "QUERY_PARAM";
    ResolutionMethod["SUBDOMAIN"] = "SUBDOMAIN";
    ResolutionMethod["SUBDIRECTORY"] = "SUBDIRECTORY";
})(ResolutionMethod || (ResolutionMethod = {}));
export var State;
(function (State) {
    State["UNKNOWN"] = "UNKNOWN";
    State["ENABLED"] = "ENABLED";
    State["DISABLED"] = "DISABLED";
    State["PENDING"] = "PENDING";
    State["DEMO"] = "DEMO";
})(State || (State = {}));
export var SiteCreatedContext;
(function (SiteCreatedContext) {
    /** A valid option, we don't expose all reasons why site might be created. */
    SiteCreatedContext["OTHER"] = "OTHER";
    /** A meta site was created from template. */
    SiteCreatedContext["FROM_TEMPLATE"] = "FROM_TEMPLATE";
    /** A meta site was created by copying of the transfferred meta site. */
    SiteCreatedContext["DUPLICATE_BY_SITE_TRANSFER"] = "DUPLICATE_BY_SITE_TRANSFER";
    /** A copy of existing meta site. */
    SiteCreatedContext["DUPLICATE"] = "DUPLICATE";
    /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */
    SiteCreatedContext["OLD_SITE_TRANSFER"] = "OLD_SITE_TRANSFER";
    /** deprecated A meta site was created for Flash editor. */
    SiteCreatedContext["FLASH"] = "FLASH";
})(SiteCreatedContext || (SiteCreatedContext = {}));
export var Namespace;
(function (Namespace) {
    Namespace["UNKNOWN_NAMESPACE"] = "UNKNOWN_NAMESPACE";
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    Namespace["WIX"] = "WIX";
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["SHOUT_OUT"] = "SHOUT_OUT";
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ALBUMS"] = "ALBUMS";
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["WIX_STORES_TEST_DRIVE"] = "WIX_STORES_TEST_DRIVE";
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["HOTELS"] = "HOTELS";
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["CLUBS"] = "CLUBS";
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ONBOARDING_DRAFT"] = "ONBOARDING_DRAFT";
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_SITE"] = "DEV_SITE";
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["LOGOS"] = "LOGOS";
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["VIDEO_MAKER"] = "VIDEO_MAKER";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["PARTNER_DASHBOARD"] = "PARTNER_DASHBOARD";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_CENTER_COMPANY"] = "DEV_CENTER_COMPANY";
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    Namespace["HTML_DRAFT"] = "HTML_DRAFT";
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    Namespace["SITELESS_BUSINESS"] = "SITELESS_BUSINESS";
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    Namespace["CREATOR_ECONOMY"] = "CREATOR_ECONOMY";
    /** It is to be used in the Business First efforts. */
    Namespace["DASHBOARD_FIRST"] = "DASHBOARD_FIRST";
    /** Bookings business flow with no site. */
    Namespace["ANYWHERE"] = "ANYWHERE";
    /** Namespace for Headless Backoffice with no editor */
    Namespace["HEADLESS"] = "HEADLESS";
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    Namespace["ACCOUNT_MASTER_CMS"] = "ACCOUNT_MASTER_CMS";
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    Namespace["RISE"] = "RISE";
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    Namespace["BRANDED_FIRST"] = "BRANDED_FIRST";
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    Namespace["NOWNIA"] = "NOWNIA";
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    Namespace["UGC_TEMPLATE"] = "UGC_TEMPLATE";
    /** Codux Headless Sites */
    Namespace["CODUX"] = "CODUX";
    /** Bobb - AI Design Creator. */
    Namespace["MEDIA_DESIGN_CREATOR"] = "MEDIA_DESIGN_CREATOR";
    /**
     * Shared Blog Site is a unique single site across Enterprise account,
     * This site will hold all Blog posts related to the Marketing product.
     */
    Namespace["SHARED_BLOG_ENTERPRISE"] = "SHARED_BLOG_ENTERPRISE";
    /** Standalone forms (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["STANDALONE_FORMS"] = "STANDALONE_FORMS";
})(Namespace || (Namespace = {}));
export var DeleteStatus;
(function (DeleteStatus) {
    DeleteStatus["UNKNOWN"] = "UNKNOWN";
    DeleteStatus["TRASH"] = "TRASH";
    DeleteStatus["DELETED"] = "DELETED";
    DeleteStatus["PENDING_PURGE"] = "PENDING_PURGE";
    DeleteStatus["PURGED_EXTERNALLY"] = "PURGED_EXTERNALLY";
})(DeleteStatus || (DeleteStatus = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a booking policy.
 * @param bookingPolicy - Booking policy to create.
 * @public
 * @requiredField bookingPolicy
 * @permissionId BOOKINGS.BOOKING_POLICY_CREATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created booking policy.
 * @fqn wix.bookings.v1.BookingPoliciesService.CreateBookingPolicy
 */
export async function createBookingPolicy(bookingPolicy) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingPolicy: bookingPolicy,
    });
    const reqOpts = ambassadorWixBookingsV1BookingPolicy.createBookingPolicy(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.bookingPolicy;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingPolicy: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingPolicy']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a booking policy.
 * @param bookingPolicyId - ID of the booking policy to retrieve.
 * @public
 * @requiredField bookingPolicyId
 * @permissionId BOOKINGS.BOOKING_POLICY_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved booking policy.
 * @fqn wix.bookings.v1.BookingPoliciesService.GetBookingPolicy
 */
export async function getBookingPolicy(bookingPolicyId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingPolicyId: bookingPolicyId,
    });
    const reqOpts = ambassadorWixBookingsV1BookingPolicy.getBookingPolicy(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.bookingPolicy;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingPolicyId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingPolicyId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the strictest version of each policy rule from a list of booking
 * policies.
 *
 *
 * Returns a hypothetical `bookingPolicy` object that combines the strictest
 * version of each rule. The `id` of the returned policy is `null` and no
 * corresponding `bookingPolicy` object is created. To create a new policy, you
 * can call *Create Booking Policy*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policies/create-booking-policy) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/create-booking-policy)).
 * @param bookingPolicyIds - IDs of the booking policies for which to retrieve the strictest rules for.
 * @public
 * @requiredField bookingPolicyIds
 * @permissionId BOOKINGS.BOOKING_POLICY_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.v1.BookingPoliciesService.GetStrictestBookingPolicy
 */
export async function getStrictestBookingPolicy(bookingPolicyIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingPolicyIds: bookingPolicyIds,
    });
    const reqOpts = ambassadorWixBookingsV1BookingPolicy.getStrictestBookingPolicy(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingPolicyIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingPolicyIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a booking policy.
 *
 *
 * Each time the booking policy is updated, `revision` increments by 1.
 * The current `revision` must be specified when updating the booking policy.
 * This ensures you're working with the latest booking policy and prevents unintended overwrites.
 * @param _id - ID of the booking policy.
 * @public
 * @requiredField _id
 * @requiredField bookingPolicy
 * @requiredField bookingPolicy.revision
 * @permissionId BOOKINGS.BOOKING_POLICY_UPDATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated booking policy.
 * @fqn wix.bookings.v1.BookingPoliciesService.UpdateBookingPolicy
 */
export async function updateBookingPolicy(_id, bookingPolicy) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingPolicy: { ...bookingPolicy, id: _id },
    });
    const reqOpts = ambassadorWixBookingsV1BookingPolicy.updateBookingPolicy(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.bookingPolicy;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { bookingPolicy: '$[1]' },
            explicitPathsToArguments: { 'bookingPolicy.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'bookingPolicy']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets a booking policy as the default.
 *
 *
 * Also updates the site's current default policy by setting its `default`
 * attribute to `false`. If the provided policy is already the site's
 * default, the call succeeds without changing any `bookingPolicy` object.
 * @param bookingPolicyId - ID of the booking policy that's set as default.
 * @public
 * @requiredField bookingPolicyId
 * @permissionId BOOKINGS.BOOKING_POLICY_SET_DEFAULT
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.v1.BookingPoliciesService.SetDefaultBookingPolicy
 */
export async function setDefaultBookingPolicy(bookingPolicyId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingPolicyId: bookingPolicyId,
    });
    const reqOpts = ambassadorWixBookingsV1BookingPolicy.setDefaultBookingPolicy(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingPolicyId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingPolicyId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a booking policy.
 *
 *
 * You can't delete the default policy without first *setting a different policy as default*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policies/set-default-booking-policy) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/set-default-booking-policy)).
 * @param bookingPolicyId - ID of the booking policy to delete.
 * @public
 * @requiredField bookingPolicyId
 * @permissionId BOOKINGS.BOOKING_POLICY_DELETE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.v1.BookingPoliciesService.DeleteBookingPolicy
 */
export async function deleteBookingPolicy(bookingPolicyId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingPolicyId: bookingPolicyId,
    });
    const reqOpts = ambassadorWixBookingsV1BookingPolicy.deleteBookingPolicy(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingPolicyId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingPolicyId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of booking policies, given the provided paging, filtering, and sorting.
 *
 *
 * Query Booking Policies runs with these defaults, which you can override:
 *
 * - Sorted by `createdDate` in ascending order.
 * - `cursorPaging.limit` set to `100`.
 *
 * For details about all supported filters and sorting options, see
 * [supported filters](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/supported-filters).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
 * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/pagination),
 * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
 * @public
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.BOOKING_POLICY_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.v1.BookingPoliciesService.QueryBookingPolicies
 */
export function queryBookingPolicies() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsV1BookingPolicy.queryBookingPolicies(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.bookingPolicies,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Counts booking policies, given the provided filtering.
 *
 *
 * See *supported filters*
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/supported-filters))
 * for a complete list of supported filters.
 * @public
 * @permissionId BOOKINGS.BOOKING_POLICY_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.v1.BookingPoliciesService.CountBookingPolicies
 */
export async function countBookingPolicies(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsV1BookingPolicy.countBookingPolicies(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=bookings-v1-booking-policy-booking-policies.universal.js.map