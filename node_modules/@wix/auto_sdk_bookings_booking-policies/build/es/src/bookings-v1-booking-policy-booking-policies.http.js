import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';
import { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { resolveUrl } from '@wix/sdk-runtime/rest-modules';
function resolveWixBookingsV1BookingPoliciesServiceUrl(opts) {
    const domainToMappings = {
        'manage._base_domain_': [
            {
                srcPath: '/_api/bookings/v1/booking-policies',
                destPath: '/v1/booking-policies',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/bookings/v1/booking-policies',
                destPath: '/v1/booking-policies',
            },
        ],
        _: [
            {
                srcPath: '/_api/bookings/v1/booking-policies/strictest',
                destPath: '/v1/booking-policies/strictest',
            },
            {
                srcPath: '/_api/bookings/v1/booking-policies/query',
                destPath: '/v1/booking-policies/query',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_bookings_booking-policies';
/** Creates a booking policy. */
export function createBookingPolicy(payload) {
    function __createBookingPolicy({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'bookingPolicy.createdDate' },
                    { path: 'bookingPolicy.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'POST',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.CreateBookingPolicy',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'bookingPolicy.createdDate' },
                        { path: 'bookingPolicy.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createBookingPolicy;
}
/** Retrieves a booking policy. */
export function getBookingPolicy(payload) {
    function __getBookingPolicy({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'GET',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.GetBookingPolicy',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies/{bookingPolicyId}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'bookingPolicy.createdDate' },
                        { path: 'bookingPolicy.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getBookingPolicy;
}
/**
 * Retrieves the strictest version of each policy rule from a list of booking
 * policies.
 *
 *
 * Returns a hypothetical `bookingPolicy` object that combines the strictest
 * version of each rule. The `id` of the returned policy is `null` and no
 * corresponding `bookingPolicy` object is created. To create a new policy, you
 * can call *Create Booking Policy*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policies/create-booking-policy) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/create-booking-policy)).
 */
export function getStrictestBookingPolicy(payload) {
    function __getStrictestBookingPolicy({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'POST',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.GetStrictestBookingPolicy',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies/strictest',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'bookingPolicy.createdDate' },
                        { path: 'bookingPolicy.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getStrictestBookingPolicy;
}
/**
 * Updates a booking policy.
 *
 *
 * Each time the booking policy is updated, `revision` increments by 1.
 * The current `revision` must be specified when updating the booking policy.
 * This ensures you're working with the latest booking policy and prevents unintended overwrites.
 */
export function updateBookingPolicy(payload) {
    function __updateBookingPolicy({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'mask' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'bookingPolicy.createdDate' },
                    { path: 'bookingPolicy.updatedDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'PATCH',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.UpdateBookingPolicy',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies/{bookingPolicy.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'bookingPolicy.createdDate' },
                        { path: 'bookingPolicy.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateBookingPolicy;
}
/**
 * Sets a booking policy as the default.
 *
 *
 * Also updates the site's current default policy by setting its `default`
 * attribute to `false`. If the provided policy is already the site's
 * default, the call succeeds without changing any `bookingPolicy` object.
 */
export function setDefaultBookingPolicy(payload) {
    function __setDefaultBookingPolicy({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'POST',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.SetDefaultBookingPolicy',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies/{bookingPolicyId}:setDefault',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'currentDefaultBookingPolicy.createdDate' },
                        { path: 'currentDefaultBookingPolicy.updatedDate' },
                        { path: 'previousDefaultBookingPolicy.createdDate' },
                        { path: 'previousDefaultBookingPolicy.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __setDefaultBookingPolicy;
}
/**
 * Deletes a booking policy.
 *
 *
 * You can't delete the default policy without first *setting a different policy as default*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policies/set-default-booking-policy) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/set-default-booking-policy)).
 */
export function deleteBookingPolicy(payload) {
    function __deleteBookingPolicy({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'DELETE',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.DeleteBookingPolicy',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies/{bookingPolicyId}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
        };
        return metadata;
    }
    return __deleteBookingPolicy;
}
/**
 * Retrieves a list of booking policies, given the provided paging, filtering, and sorting.
 *
 *
 * Query Booking Policies runs with these defaults, which you can override:
 *
 * - Sorted by `createdDate` in ascending order.
 * - `cursorPaging.limit` set to `100`.
 *
 * For details about all supported filters and sorting options, see
 * [supported filters](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/supported-filters).
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
 * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/pagination),
 * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
 */
export function queryBookingPolicies(payload) {
    function __queryBookingPolicies({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'POST',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.QueryBookingPolicies',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'bookingPolicies.createdDate' },
                        { path: 'bookingPolicies.updatedDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryBookingPolicies;
}
/**
 * Counts booking policies, given the provided filtering.
 *
 *
 * See *supported filters*
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/supported-filters))
 * for a complete list of supported filters.
 */
export function countBookingPolicies(payload) {
    function __countBookingPolicies({ host }) {
        const metadata = {
            entityFqdn: 'wix.bookings.v1.booking_policy',
            method: 'POST',
            methodFqn: 'wix.bookings.v1.BookingPoliciesService.CountBookingPolicies',
            packageName: PACKAGE_NAME,
            url: resolveWixBookingsV1BookingPoliciesServiceUrl({
                protoPath: '/v1/booking-policies/count',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __countBookingPolicies;
}
//# sourceMappingURL=bookings-v1-booking-policy-booking-policies.http.js.map