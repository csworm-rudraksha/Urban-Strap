import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsStaffV1StaffMember from './bookings-staff-v1-staff-member-staff-members.http.js';
// @ts-ignore
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var IdentityType;
(function (IdentityType) {
    IdentityType["UNKNOWN"] = "UNKNOWN";
    IdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    IdentityType["MEMBER"] = "MEMBER";
    IdentityType["WIX_USER"] = "WIX_USER";
    IdentityType["APP"] = "APP";
})(IdentityType || (IdentityType = {}));
export var AssociatedWixIdentityConnectionStatusEnumConnectionStatus;
(function (AssociatedWixIdentityConnectionStatusEnumConnectionStatus) {
    /** There is no information about the connection status. */
    AssociatedWixIdentityConnectionStatusEnumConnectionStatus["UNKNOWN"] = "UNKNOWN";
    /** The Wix user is connected to the staff member. */
    AssociatedWixIdentityConnectionStatusEnumConnectionStatus["CONNECTED"] = "CONNECTED";
    /** The Wix user must accept the invitation to join **.wix.com.** or the site. */
    AssociatedWixIdentityConnectionStatusEnumConnectionStatus["PENDING"] = "PENDING";
    /** The invitation to join **.wix.com.** or the site has expired. */
    AssociatedWixIdentityConnectionStatusEnumConnectionStatus["EXPIRED"] = "EXPIRED";
    /** The Wix user was disconnected from the staff member. */
    AssociatedWixIdentityConnectionStatusEnumConnectionStatus["DISCONNECTED"] = "DISCONNECTED";
})(AssociatedWixIdentityConnectionStatusEnumConnectionStatus || (AssociatedWixIdentityConnectionStatusEnumConnectionStatus = {}));
export var ConnectionStatus;
(function (ConnectionStatus) {
    /** Provider is connected to the site and the user is authenticated. */
    ConnectionStatus["CONNECTED"] = "CONNECTED";
    /** Provider is not connected to the site or the user is not authenticated. */
    ConnectionStatus["DISCONNECTED"] = "DISCONNECTED";
})(ConnectionStatus || (ConnectionStatus = {}));
export var RequestedFields;
(function (RequestedFields) {
    /** Includes `resource` in the response. */
    RequestedFields["RESOURCE_DETAILS"] = "RESOURCE_DETAILS";
    /** Includes `associatedIdentityStatus` in the response. */
    RequestedFields["ASSOCIATED_IDENTITY_STATUS"] = "ASSOCIATED_IDENTITY_STATUS";
})(RequestedFields || (RequestedFields = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var Mode;
(function (Mode) {
    /** Any of the search terms must be present */
    Mode["OR"] = "OR";
    /** All search terms must be present */
    Mode["AND"] = "AND";
})(Mode || (Mode = {}));
export var ScalarType;
(function (ScalarType) {
    ScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    ScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    ScalarType["MIN"] = "MIN";
    ScalarType["MAX"] = "MAX";
})(ScalarType || (ScalarType = {}));
export var AggregationType;
(function (AggregationType) {
    AggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    AggregationType["VALUE"] = "VALUE";
    AggregationType["RANGE"] = "RANGE";
    AggregationType["SCALAR"] = "SCALAR";
})(AggregationType || (AggregationType = {}));
export var Day;
(function (Day) {
    /** Undefined. */
    Day["UNDEFINED"] = "UNDEFINED";
    /** Monday. */
    Day["MON"] = "MON";
    /** Tuesday. */
    Day["TUE"] = "TUE";
    /** Wednesday. */
    Day["WED"] = "WED";
    /** Thursday. */
    Day["THU"] = "THU";
    /** Friday. */
    Day["FRI"] = "FRI";
    /** Saturday. */
    Day["SAT"] = "SAT";
    /** Sunday. */
    Day["SUN"] = "SUN";
})(Day || (Day = {}));
export var Transparency;
(function (Transparency) {
    Transparency["UNDEFINED"] = "UNDEFINED";
    /** The schedule can have available slots during the linked schedule's sessions. */
    Transparency["FREE"] = "FREE";
    /** The schedule can't have available slots during the linked schedule's sessions. */
    Transparency["BUSY"] = "BUSY";
})(Transparency || (Transparency = {}));
export var RecurringIntervalType;
(function (RecurringIntervalType) {
    /** The default value. Sessions for this interval will be of type EVENT. */
    RecurringIntervalType["UNDEFINED"] = "UNDEFINED";
    /** A recurring interval of events. */
    RecurringIntervalType["EVENT"] = "EVENT";
    /** Deprecated. */
    RecurringIntervalType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** A recurring interval for availability. */
    RecurringIntervalType["AVAILABILITY"] = "AVAILABILITY";
})(RecurringIntervalType || (RecurringIntervalType = {}));
export var LocationType;
(function (LocationType) {
    LocationType["UNDEFINED"] = "UNDEFINED";
    LocationType["OWNER_BUSINESS"] = "OWNER_BUSINESS";
    LocationType["OWNER_CUSTOM"] = "OWNER_CUSTOM";
    LocationType["CUSTOM"] = "CUSTOM";
})(LocationType || (LocationType = {}));
/** For future use */
export var LocationStatus;
(function (LocationStatus) {
    LocationStatus["ACTIVE"] = "ACTIVE";
    LocationStatus["INACTIVE"] = "INACTIVE";
})(LocationStatus || (LocationStatus = {}));
/** For future use */
export var LocationsLocationType;
(function (LocationsLocationType) {
    LocationsLocationType["UNKNOWN"] = "UNKNOWN";
    LocationsLocationType["BRANCH"] = "BRANCH";
    LocationsLocationType["OFFICES"] = "OFFICES";
    LocationsLocationType["RECEPTION"] = "RECEPTION";
    LocationsLocationType["HEADQUARTERS"] = "HEADQUARTERS";
    LocationsLocationType["INVENTORY"] = "INVENTORY";
})(LocationsLocationType || (LocationsLocationType = {}));
/** Enumerates the days of the week. */
export var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["MONDAY"] = "MONDAY";
    DayOfWeek["TUESDAY"] = "TUESDAY";
    DayOfWeek["WEDNESDAY"] = "WEDNESDAY";
    DayOfWeek["THURSDAY"] = "THURSDAY";
    DayOfWeek["FRIDAY"] = "FRIDAY";
    DayOfWeek["SATURDAY"] = "SATURDAY";
    DayOfWeek["SUNDAY"] = "SUNDAY";
})(DayOfWeek || (DayOfWeek = {}));
export var ApprovalStatus;
(function (ApprovalStatus) {
    /** Default. */
    ApprovalStatus["UNDEFINED"] = "UNDEFINED";
    /** Pending business approval. */
    ApprovalStatus["PENDING"] = "PENDING";
    /** Approved by the business. */
    ApprovalStatus["APPROVED"] = "APPROVED";
    /** Declined by the business. */
    ApprovalStatus["DECLINED"] = "DECLINED";
})(ApprovalStatus || (ApprovalStatus = {}));
export var ScheduleStatus;
(function (ScheduleStatus) {
    /** Undefined schedule status. */
    ScheduleStatus["UNDEFINED"] = "UNDEFINED";
    /** The schedule was created. */
    ScheduleStatus["CREATED"] = "CREATED";
    /** The schedule was cancelled. */
    ScheduleStatus["CANCELLED"] = "CANCELLED";
})(ScheduleStatus || (ScheduleStatus = {}));
export var ConferenceType;
(function (ConferenceType) {
    /** Undefined conference type. */
    ConferenceType["UNDEFINED"] = "UNDEFINED";
    /** API-generated online meeting. */
    ConferenceType["ONLINE_MEETING_PROVIDER"] = "ONLINE_MEETING_PROVIDER";
    /** User-defined meeting. */
    ConferenceType["CUSTOM"] = "CUSTOM";
})(ConferenceType || (ConferenceType = {}));
export var CalendarType;
(function (CalendarType) {
    /** There is no information about the external calendar type. */
    CalendarType["UNDEFINED"] = "UNDEFINED";
    /** [Google Calendar](https://developers.google.com/calendar/api/guides/overview). */
    CalendarType["GOOGLE"] = "GOOGLE";
    /** Apple iCalendar. */
    CalendarType["I_CAL"] = "I_CAL";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OUTLOOK"] = "OUTLOOK";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OFFICE_365"] = "OFFICE_365";
    /** Microsoft Calendar. For example, Office 365 calendar or Outlook calendar. */
    CalendarType["MICROSOFT"] = "MICROSOFT";
    /** A different type of external calendar, not listed here. */
    CalendarType["OTHER"] = "OTHER";
})(CalendarType || (CalendarType = {}));
export var Status;
(function (Status) {
    /** Undefined status. */
    Status["UNDEFINED"] = "UNDEFINED";
    /** Session is confirmed. Default status. */
    Status["CONFIRMED"] = "CONFIRMED";
    /**
     * Session is cancelled.
     * A cancelled session can be the cancellation of a recurring session that should no longer be displayed or a deleted single session.
     * The ListSessions returns cancelled sessions only if 'includeDelete' flag is set to true.
     */
    Status["CANCELLED"] = "CANCELLED";
})(Status || (Status = {}));
export var SessionType;
(function (SessionType) {
    SessionType["UNDEFINED"] = "UNDEFINED";
    /**
     * Creates an event on the calendar for the owner of the schedule that the session belongs to.
     * Default type.
     */
    SessionType["EVENT"] = "EVENT";
    /** Represents a resource's available working hours. */
    SessionType["WORKING_HOURS"] = "WORKING_HOURS";
    /** Deprecated. Please use WORKING_HOURS. */
    SessionType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** Deprecated. Represents a resource's available hours. Please use WORKING_HOURS. */
    SessionType["AVAILABILITY"] = "AVAILABILITY";
})(SessionType || (SessionType = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a staff member.
 *
 *
 * By default, the staff member works during the business working hours. You
 * could follow *this sample flow*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/sample-flows#backend-modules_bookings_staff-members_assign-a-staff-working-hour-schedule) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/sample-flows#assign-a-staff-working-hour-schedule))
 * to set custom working hours.
 * @param staffMember - Staff member to create.
 * @public
 * @documentationMaturity preview
 * @requiredField staffMember
 * @requiredField staffMember.name
 * @param options - Options for creating the staff member.
 * @permissionId BOOKINGS.STAFF_MEMBER_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created staff member.
 * @fqn wix.bookings.staff.v1.StaffMembersService.CreateStaffMember
 */
export async function createStaffMember(staffMember, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        staffMember: staffMember,
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'staffMember.mainMedia.image' }],
        },
    ]);
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.createStaffMember(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMember.mainMedia.image' }],
            },
        ]))?.staffMember;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                staffMember: '$[0]',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['staffMember', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a staff member.
 * @param staffMemberId - ID of the staff member to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField staffMemberId
 * @param options - Option for retrieving the staff member.
 * @permissionId BOOKINGS.STAFF_MEMBER_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved staff member.
 * @fqn wix.bookings.staff.v1.StaffMembersService.GetStaffMember
 */
export async function getStaffMember(staffMemberId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        staffMemberId: staffMemberId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.getStaffMember(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMember.mainMedia.image' }],
            },
        ]))?.staffMember;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                staffMemberId: '$[0]',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['staffMemberId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a staff member.
 *
 *
 * Each time the staff member is updated, `revision` increments by 1. You must
 * include current revision of the staff member when updating it. This ensures
 * you're working with the latest service information and prevents unintended
 * overwrites.
 * @param _id - Staff member ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField staffMember
 * @requiredField staffMember.revision
 * @param staffMember - The staff member to update
 * @param options - Options for updating the staff member.
 * @permissionId BOOKINGS.STAFF_MEMBER_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated staff member.
 * @fqn wix.bookings.staff.v1.StaffMembersService.UpdateStaffMember
 */
export async function updateStaffMember(_id, staffMember, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        staffMember: { ...staffMember, id: _id },
        fields: options?.fields,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'staffMember.mainMedia.image' }],
        },
    ]);
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.updateStaffMember(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMember.mainMedia.image' }],
            },
        ]))?.staffMember;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { staffMember: '$[1]' },
            explicitPathsToArguments: {
                'staffMember.id': '$[0]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'staffMember', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a staff member.
 *
 *
 * Also deletes the *resource*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/introduction))
 * associated with the staff member.
 * @param staffMemberId - ID of the staff member to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField staffMemberId
 * @permissionId BOOKINGS.STAFF_MEMBER_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.staff.v1.StaffMembersService.DeleteStaffMember
 */
export async function deleteStaffMember(staffMemberId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        staffMemberId: staffMemberId,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.deleteStaffMember(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { staffMemberId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['staffMemberId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of staff members.
 *
 * The `queryStaffMembers()` function builds a query to retrieve a list of staff members and returns a `StaffMembersQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/staff-members-query-builder/find) function.
 *
 * You can refine the query by chaining `StaffMembersQueryBuilder` functions onto the query. `StaffMembersQueryBuilder` functions enable you to sort, filter, and control the results that `queryStaffMembers()` returns.
 *
 * `queryStaffMembers()` runs with the following `StaffMembersQueryBuilder` default that you can override:
 *
 * + `limit` is `50`.
 * + Sorted by `id` in ascending order.
 *
 * The functions that are chained to `staffMembersTypes()` are applied in the order they are called.
 *
 * The following `StaffMembersQueryBuilder` functions are supported for the `queryStaffMembers()` function. For a full description of the resource object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/staff-members-query-result/items) property in `StaffMembersQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.STAFF_MEMBER_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.staff.v1.StaffMembersService.QueryStaffMembers
 */
export function queryStaffMembers(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsStaffV1StaffMember.queryStaffMembers({ ...payload, ...(options ?? {}) });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTImageToSDKImage,
                    paths: [{ path: 'staffMembers.mainMedia.image' }],
                },
            ]));
            return {
                items: transformedData?.staffMembers,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Counts how many staff members match the given filter.
 *
 *
 * ## Filter
 *
 * Refer to the _supported filters article_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/filtering-and-sorting))
 * for a complete list of supported filters and sorting options.
 *
 * ## See also
 *
 * To learn about working with filters in general, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.STAFF_MEMBER_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.staff.v1.StaffMembersService.CountStaffMembers
 */
export async function countStaffMembers(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.countStaffMembers(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Connects a Wix user to a staff member, enabling them to manage their own
 * working hour schedule in the dashboard.
 *
 *
 * By default, Wix Bookings uses the staff member's `email`. However, you can
 * specify an alternative email address. If no existing Wix user is associated
 * with that email, Wix sends them an invitation to become a Wix user. If an
 * existing user is found but not linked to the site, Wix Bookings sends an
 * invitation to join the site.
 *
 * To check the connection status, call *Get Staff Member*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/get-staff-member) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/get-staff-member)),
 * and specify `ASSOCIATED_IDENTITY_STATUS` in the `fields` parameter.
 *
 * You must call *Disconnect Staff Member From User*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/disconnect-staff-member-from-user) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/disconnect-staff-member-from-user))
 * before connecting a different Wix user to the staff member.
 * @param staffMemberId - ID of the staff member to connect to the Wix user.
 * @public
 * @documentationMaturity preview
 * @requiredField staffMemberId
 * @param options - Options for connecting the staff member to a Wix user.
 * @permissionId BOOKINGS.STAFF_MEMBER_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.staff.v1.StaffMembersService.ConnectStaffMemberToUser
 */
export async function connectStaffMemberToUser(staffMemberId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        staffMemberId: staffMemberId,
        email: options?.email,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.connectStaffMemberToUser(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMember.mainMedia.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                staffMemberId: '$[0]',
                email: '$[1].email',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['staffMemberId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of up to 100 staff members, given the provided filtering, paging,
 * and sorting.
 *
 *
 * ## Defaults
 *
 * Search Staff Members has the following default settings, which you can override:
 * + Sorted by `createdDate` in ascending order.
 * + `cursorPaging.limit` set to `100`.
 *
 * ## Filter
 *
 * Refer to the _supported filters article_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/filtering-and-sorting))
 * for a complete list of supported filters and sorting options.
 *
 * ## See also
 *
 * To learn about working with *Search* methods, see
 * _API Query Language_
 * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language))
 * and _Sorting and Paging_
 * ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language#the-sort-array) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging)).
 * @param search - Search details. See the *supported filters article*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/filtering-and-sorting))
 * for a complete list of supported filters.
 * @public
 * @documentationMaturity preview
 * @requiredField search
 * @permissionId BOOKINGS.STAFF_MEMBER_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.staff.v1.StaffMembersService.SearchStaffMembers
 */
export async function searchStaffMembers(search, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        search: search,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.searchStaffMembers(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMembers.mainMedia.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { search: '$[0]', fields: '$[1].fields' },
            singleArgumentUnchanged: false,
        }, ['search', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Disconnects a staff member from a Wix user, clearing the `associatedWixIdentity`
 * field. Consequently, the user can no longer manage the staff member's working
 * hour schedule in the dashboard.
 *
 *
 * You must call *Disconnect Staff Member From User* before connecting a
 * different Wix user to the staff member.
 * @param staffMemberId - ID of the staff member to disconnect from its Wix user.
 * @public
 * @documentationMaturity preview
 * @requiredField staffMemberId
 * @param options - Options to disconnect the staff member from a Wix user.
 * @permissionId BOOKINGS.STAFF_MEMBER_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.staff.v1.StaffMembersService.DisconnectStaffMemberFromUser
 */
export async function disconnectStaffMemberFromUser(staffMemberId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        staffMemberId: staffMemberId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.disconnectStaffMemberFromUser(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMember.mainMedia.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                staffMemberId: '$[0]',
                fields: '$[1].fields',
            },
            singleArgumentUnchanged: false,
        }, ['staffMemberId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a staff member's working hours based on the specified *schedule ID*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
 *
 *
 * ## Default working hours
 *
 * By default, staff members work during the opening hours of the business's
 * _default location_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction)).
 *
 * ## Schedule ID
 *
 * You can specify either the ID of the business's working hour schedule or the
 * staff member's event schedule. The call fails if you specify a different
 * schedule ID.
 *
 * ### Staff event schedule
 *
 * To customize a staff member's working hours, specify their event schedule ID
 * as `scheduleId`. Refer to *this sample flow*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/sample-flows#backend-modules_bookings_staff-members_assign-a-staff-working-hour-schedule) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/sample-flows#assign-a-staff-working-hour-schedule))
 * for more details.
 *
 * ### Business working hour schedule
 *
 * To reset a staff member’s working hours to the default business hours,
 * specify the ID of the business working hour schedule as `scheduleId`.
 * @param staffMemberId - ID of the staff member to assign the schedule to.
 * @param scheduleId - ID of the *schedule*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
 * to assign to the staff member.
 *
 * Must be either the staff member's event schedule ID or the working hour
 * schedule ID for a business location.
 * @public
 * @documentationMaturity preview
 * @requiredField scheduleId
 * @requiredField staffMemberId
 * @param options - Options for setting the staff member's working hours schedule.
 * @permissionId BOOKINGS.STAFF_MEMBER_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.staff.v1.StaffMembersService.AssignWorkingHoursSchedule
 */
export async function assignWorkingHoursSchedule(staffMemberId, scheduleId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        staffMemberId: staffMemberId,
        scheduleId: scheduleId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.assignWorkingHoursSchedule(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMember.mainMedia.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                staffMemberId: '$[0]',
                scheduleId: '$[1]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['staffMemberId', 'scheduleId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Assigns a custom working hours schedule to the staff member
 *
 *
 * The working hours schedule is a schedule that defines the working hours of a staff member,
 * and dictate when the staff member is available for bookings.
 *
 * By default staff members use the shared business working hours schedule. By assigning a custom working hours schedule to a staff member,
 * you can define specific working hours for that staff member.
 *
 * To create and manage schedules and working hours sessions, use [Events API](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction).
 * @param staffMemberId - ID of the staff member for which to assign a working hour schedule.
 * @param scheduleId - ID of the *schedule*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
 * to assign to the staff member.
 * @public
 * @documentationMaturity preview
 * @requiredField scheduleId
 * @requiredField staffMemberId
 * @permissionId BOOKINGS.STAFF_MEMBER_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.staff.v1.StaffMembersService.AssignCustomSchedule
 * @deprecated
 * @replacedBy wix.bookings.staff.v1.StaffMembersService.AssignWorkingHoursSchedule
 * @targetRemovalDate 2024-12-31
 */
export async function assignCustomSchedule(staffMemberId, scheduleId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        staffMemberId: staffMemberId,
        scheduleId: scheduleId,
        fields: options?.fields,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.assignCustomSchedule(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'staffMember.mainMedia.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                staffMemberId: '$[0]',
                scheduleId: '$[1]',
                fields: '$[2].fields',
            },
            singleArgumentUnchanged: false,
        }, ['staffMemberId', 'scheduleId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Synchronously updates *tags*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/tags/tags/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/tags/introduction)).
 * for up to 100 staff members.
 *
 *
 * If you specify a tag both in `assignTags` and `unassignTags`, the call
 * succeeds and the tag is assigned.
 * @param ids - IDs of staff members to update tags for.
 * @public
 * @documentationMaturity preview
 * @requiredField ids
 * @permissionId BOOKINGS.STAFF_MEMBER_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.staff.v1.StaffMembersService.BulkUpdateStaffMemberTags
 */
export async function bulkUpdateStaffMemberTags(ids, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ids: ids,
        assignTags: options?.assignTags,
        unassignTags: options?.unassignTags,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.bulkUpdateStaffMemberTags(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                ids: '$[0]',
                assignTags: '$[1].assignTags',
                unassignTags: '$[1].unassignTags',
            },
            singleArgumentUnchanged: false,
        }, ['ids', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Asynchronously updates *tags*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/tags/tags/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/tags/introduction)).
 * for staff members, given the provided filtering.
 *
 *
 * If you specify a tag both in `assignTags` and `unassignTags`, the call
 * succeeds and the tag is assigned.
 *
 * ## Filter
 *
 * Refer to the supported filters article
 * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/filtering-and-sorting))
 * for a complete list of supported filters and sorting options.
 * @param filter - Filter to base the update upon. See the *supported filters article*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/filtering-and-sorting))
 * for a complete list of supported filters.
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @permissionId BOOKINGS.STAFF_MEMBER_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.staff.v1.StaffMembersService.BulkUpdateStaffMemberTagsByFilter
 */
export async function bulkUpdateStaffMemberTagsByFilter(filter, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: filter,
        assignTags: options?.assignTags,
        unassignTags: options?.unassignTags,
    });
    const reqOpts = ambassadorWixBookingsStaffV1StaffMember.bulkUpdateStaffMemberTagsByFilter(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0]',
                assignTags: '$[1].assignTags',
                unassignTags: '$[1].unassignTags',
            },
            singleArgumentUnchanged: false,
        }, ['filter', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=bookings-staff-v1-staff-member-staff-members.universal.js.map