import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';
import { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { resolveUrl } from '@wix/sdk-runtime/rest-modules';
function resolveComWixEcomCartApiV1CartServiceUrl(opts) {
    const domainToMappings = {
        'api._api_base_domain_': [
            {
                srcPath: '/cart',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'www.wixgateway.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        _: [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
            {
                srcPath: '/_api/cart',
                destPath: '',
            },
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'editor.wixapps.net': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/auto_sdk_ecom_cart';
/**
 * Creates a cart.
 *
 * > **Note:** When adding catalog line items, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
 */
export function createCart(payload) {
    function __createCart({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'cartInfo.createdDate' },
                    { path: 'cartInfo.updatedDate' },
                    { path: 'cartInfo.lineItems.image.urlExpirationDate' },
                    {
                        path: 'cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'cartInfo.lineItems.serviceProperties.scheduledDate' },
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'cartInfo.lineItems.image.focalPoint.x' },
                    { path: 'cartInfo.lineItems.image.focalPoint.y' },
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'cartInfo.lineItems.physicalProperties.weight' },
                    {
                        path: 'cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    { path: 'cartInfo.contactInfo.address.geocode.latitude' },
                    { path: 'cartInfo.contactInfo.address.geocode.longitude' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.CreateCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createCart;
}
/**
 * Updates a cart's properties.
 *
 * > **Note:** When updating line items, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
 */
export function updateCart(payload) {
    function __updateCart({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'cartFieldmask' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'cartInfo.createdDate' },
                    { path: 'cartInfo.updatedDate' },
                    { path: 'cartInfo.lineItems.image.urlExpirationDate' },
                    {
                        path: 'cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'cartInfo.lineItems.serviceProperties.scheduledDate' },
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'cartInfo.lineItems.image.focalPoint.x' },
                    { path: 'cartInfo.lineItems.image.focalPoint.y' },
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'cartInfo.lineItems.physicalProperties.weight' },
                    {
                        path: 'cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    { path: 'cartInfo.contactInfo.address.geocode.latitude' },
                    { path: 'cartInfo.contactInfo.address.geocode.longitude' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'PATCH',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.UpdateCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{cartInfo.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateCart;
}
/** Retrieves a cart. */
export function getCart(payload) {
    function __getCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'GET',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.GetCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getCart;
}
/** Retrieves the cart associated with a specified checkout. */
export function getCartByCheckoutId(payload) {
    function __getCartByCheckoutId({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'GET',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.GetCartByCheckoutId',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/by-checkout-id/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getCartByCheckoutId;
}
/**
 * Adds catalog ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)) line items to a cart.
 *
 * >**Note:** When adding catalog line items to a cart, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
 */
export function addToCart(payload) {
    function __addToCart({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.AddToCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/add-to-cart',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __addToCart;
}
/** Removes line items from a cart. */
export function removeLineItems(payload) {
    function __removeLineItems({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.RemoveLineItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/remove-line-items',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeLineItems;
}
/**
 * Creates a checkout from a cart.
 *
 * If a checkout for the specified cart already exists, that checkout is
 * updated with any new information from the cart.
 *
 * > **Note:** `channelType` is a required field.
 */
export function createCheckout(payload) {
    function __createCheckout({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'shippingAddress.geocode.latitude' },
                    { path: 'shippingAddress.geocode.longitude' },
                    { path: 'billingAddress.geocode.latitude' },
                    { path: 'billingAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.CreateCheckout',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/create-checkout',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __createCheckout;
}
/** Removes the coupon from a cart. */
export function removeCoupon(payload) {
    function __removeCoupon({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.RemoveCoupon',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/remove-coupon',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeCoupon;
}
/**
 * Updates the quantity of one or more line items in a cart.
 *
 * This method is only for updating the quantity of line items.
 * To entirely remove a line item from the cart, use Remove Line Items.
 * To add a new line item to the cart, use Add To Cart.
 *
 * This method checks the amount of stock remaining for this line item.
 * If the specified quantity is greater than the remaining stock,
 * then the quantity returned in the response is the total amount of remaining stock.
 */
export function updateLineItemsQuantity(payload) {
    function __updateLineItemsQuantity({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.UpdateLineItemsQuantity',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/update-line-items-quantity',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateLineItemsQuantity;
}
/**
 * Estimates the subtotal and total for current site visitor’s cart.
 *
 * Totals include tax and are based on the selected carrier service, shipping address, and billing information.
 *
 * > **Note:** Not passing any optional parameters will only estimate the cart items price totals.
 */
export function estimateTotals(payload) {
    function __estimateTotals({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'shippingAddress.geocode.latitude' },
                    { path: 'shippingAddress.geocode.longitude' },
                    { path: 'billingAddress.geocode.latitude' },
                    { path: 'billingAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.EstimateTotals',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/estimate-totals',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        { path: 'membershipOptions.eligibleMemberships.expirationDate' },
                        {
                            path: 'membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __estimateTotals;
}
/** Deletes a cart. */
export function deleteCart(payload) {
    function __deleteCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'DELETE',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.DeleteCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
        };
        return metadata;
    }
    return __deleteCart;
}
/** Removes the location associated with a cart. */
export function removeBusinessLocation(payload) {
    function __removeBusinessLocation({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.RemoveBusinessLocation',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/remove-business-location',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeBusinessLocation;
}
//# sourceMappingURL=ecom-v1-cart-cart.http.js.map