import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AddToCartOptions, AddToCartResponse, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartUpdatedEnvelope, CreateCartOptions, CreateCheckoutOptions, CreateCheckoutResponse, EstimateTotalsOptions, EstimateTotalsResponse, GetCartByCheckoutIdResponse, LineItemQuantityUpdate, RemoveBusinessLocationResponse, RemoveCouponResponse, RemoveLineItemsResponse, UpdateCartOptions, UpdateLineItemsQuantityResponse } from './ecom-v1-cart-cart.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createCart(httpClient: HttpClient): CreateCartSignature;
interface CreateCartSignature {
    /**
     * Creates a cart.
     *
     * > **Note:** When adding catalog line items, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
     * @param - Cart creation options.
     * @returns Cart.
     */
    (options?: CreateCartOptions | undefined): Promise<Cart>;
}
export declare function updateCart(httpClient: HttpClient): UpdateCartSignature;
interface UpdateCartSignature {
    /**
     * Updates a cart's properties.
     *
     * > **Note:** When updating line items, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
     * @param - Available options to use when updating a cart.
     * @param - ID of the cart to be updated.
     * @returns Updated Cart.
     */
    (_id: string, options?: UpdateCartOptions | undefined): Promise<Cart>;
}
export declare function getCart(httpClient: HttpClient): GetCartSignature;
interface GetCartSignature {
    /**
     * Retrieves a cart.
     * @param - Cart ID.
     * @returns Retrieved cart.
     */
    (_id: string): Promise<Cart>;
}
/** @internal */
export declare function getCartByCheckoutId(httpClient: HttpClient): GetCartByCheckoutIdSignature;
interface GetCartByCheckoutIdSignature {
    /**
     * Retrieves the cart associated with a specified checkout.
     * @param - Checkout ID.
     */
    (_id: string): Promise<GetCartByCheckoutIdResponse>;
}
export declare function addToCart(httpClient: HttpClient): AddToCartSignature;
interface AddToCartSignature {
    /**
     * Adds catalog ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/catalog-v3/e-commerce-integration) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration)) line items to a cart.
     *
     * >**Note:** When adding catalog line items to a cart, the `lineItems.catalogReference.appId` and `lineItems.catalogReference.catalogItemId` fields are required.
     * @param - Cart ID.
     * @param - Items to be added to cart.
     */
    (_id: string, options?: AddToCartOptions | undefined): Promise<AddToCartResponse>;
}
export declare function removeLineItems(httpClient: HttpClient): RemoveLineItemsSignature;
interface RemoveLineItemsSignature {
    /**
     * Removes line items from a cart.
     * @param - IDs of the line items to remove from the cart.
     * @param - ID of the cart to remove line items from.
     */
    (_id: string, lineItemIds: string[]): Promise<RemoveLineItemsResponse>;
}
export declare function createCheckout(httpClient: HttpClient): CreateCheckoutSignature;
interface CreateCheckoutSignature {
    /**
     * Creates a checkout from a cart.
     *
     * If a checkout for the specified cart already exists, that checkout is
     * updated with any new information from the cart.
     *
     * > **Note:** `channelType` is a required field.
     * @param - Cart ID.
     * @param - Checkout creation options.
     */
    (_id: string, options?: CreateCheckoutOptions | undefined): Promise<CreateCheckoutResponse>;
}
export declare function removeCoupon(httpClient: HttpClient): RemoveCouponSignature;
interface RemoveCouponSignature {
    /**
     * Removes the coupon from a cart.
     * @param - Cart ID.
     */
    (_id: string): Promise<RemoveCouponResponse>;
}
export declare function updateLineItemsQuantity(httpClient: HttpClient): UpdateLineItemsQuantitySignature;
interface UpdateLineItemsQuantitySignature {
    /**
     * Updates the quantity of one or more line items in a cart.
     *
     * This method is only for updating the quantity of line items.
     * To entirely remove a line item from the cart, use Remove Line Items.
     * To add a new line item to the cart, use Add To Cart.
     *
     * This method checks the amount of stock remaining for this line item.
     * If the specified quantity is greater than the remaining stock,
     * then the quantity returned in the response is the total amount of remaining stock.
     * @param - Cart ID.
     * @param - Line item IDs and their new quantity.
     */
    (_id: string, lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse>;
}
export declare function estimateTotals(httpClient: HttpClient): EstimateTotalsSignature;
interface EstimateTotalsSignature {
    /**
     * Estimates the subtotal and total for current site visitorâ€™s cart.
     *
     * Totals include tax and are based on the selected carrier service, shipping address, and billing information.
     *
     * > **Note:** Not passing any optional parameters will only estimate the cart items price totals.
     * @param - Cart ID.
     * @param - Total estimation options.
     */
    (_id: string, options?: EstimateTotalsOptions | undefined): Promise<EstimateTotalsResponse>;
}
export declare function deleteCart(httpClient: HttpClient): DeleteCartSignature;
interface DeleteCartSignature {
    /**
     * Deletes a cart.
     * @param - ID of the cart to delete.
     */
    (_id: string): Promise<void>;
}
export declare function removeBusinessLocation(httpClient: HttpClient): RemoveBusinessLocationSignature;
interface RemoveBusinessLocationSignature {
    /**
     * Removes the location associated with a cart.
     * @param - Cart ID.
     */
    (_id: string): Promise<RemoveBusinessLocationResponse>;
}
export declare const onCartDeleted: EventDefinition<CartDeletedEnvelope, "wix.ecom.v1.cart_deleted">;
export declare const onCartUpdated: EventDefinition<CartUpdatedEnvelope, "wix.ecom.v1.cart_updated">;
export declare const onCartCreated: EventDefinition<CartCreatedEnvelope, "wix.ecom.v1.cart_created">;
export { ActionEvent, AddToCartOptions, AddToCartRequest, AddToCartResponse, AddToCurrentCartAndEstimateTotalsRequest, AddToCurrentCartRequest, AdditionalFee, AdditionalFeeSource, Address, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApplicableLineItems, ApplicationError, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AppliedDiscountDiscountType, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BuyerInfo, BuyerInfoIdOneOf, CalculatedLineItem, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartDiscount, CartDiscountDiscountSourceOneOf, CartUpdatedEnvelope, CatalogOverrideFields, CatalogReference, ChannelType, ChargeType, Color, Coupon, CreateCartOptions, CreateCartRequest, CreateCartResponse, CreateCheckoutFromCurrentCartRequest, CreateCheckoutOptions, CreateCheckoutRequest, CreateCheckoutResponse, CustomLineItem, DeleteCartRequest, DeleteCartResponse, DeleteCurrentCartRequest, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, Details, DetailsKindOneOf, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EstimateCurrentCartTotalsRequest, EstimateTotalsOptions, EstimateTotalsRequest, EstimateTotalsResponse, EventMetadata, ExtendedFields, FallbackReason, FieldViolation, FileType, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, GetCartByCheckoutIdRequest, GetCartByCheckoutIdResponse, GetCartRequest, GetCartResponse, GetCurrentCartRequest, GetCurrentCartResponse, GiftCard, Group, HostSelectedMembership, IdentificationData, IdentificationDataIdOneOf, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemModifier, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, JurisdictionType, LineItem, LineItemDiscount, LineItemPricesData, LineItemQuantityUpdate, ManualCalculationReason, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MerchantDiscountInput, MessageEnvelope, ModifierGroup, MultiCurrencyPrice, NameInLineItem, NameInOther, Other, OtherCharge, PaymentOption, PaymentOptionType, PhysicalProperties, PickupDetails, PickupMethod, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductName, RateType, Region, RemoveBusinessLocationRequest, RemoveBusinessLocationResponse, RemoveCouponFromCurrentCartRequest, RemoveCouponRequest, RemoveCouponResponse, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsRequest, RemoveLineItemsResponse, RestoreInfo, RuleType, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, SelectedShippingOption, ServiceProperties, Severity, ShippingInformation, ShippingOption, ShippingPrice, ShippingRegion, StreetAddress, SubscriptionFrequency, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, Title, TranslatableString, UpdateCartOptions, UpdateCartRequest, UpdateCartResponse, UpdateCurrentCartLineItemQuantityRequest, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityResponse, V1Coupon, V1DiscountRule, V1DiscountRuleName, V1MerchantDiscount, ValidationError, VatId, VatType, Violation, WebhookIdentityType, WeightUnit, } from './ecom-v1-cart-cart.universal.js';
