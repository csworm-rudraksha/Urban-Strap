import { i as CreateCustomFieldApplicationRequest$1, j as CreateCustomFieldApplicationResponse$1, D as DeleteCustomFieldApplicationRequest$1, k as DeleteCustomFieldApplicationResponse$1, l as UpdateCustomFieldApplicationRequest$1, m as UpdateCustomFieldApplicationResponse$1, n as GetCustomFieldApplicationRequest$1, G as GetCustomFieldApplicationResponse$1, o as GetCustomFieldApplicationsRequest$1, a as GetCustomFieldApplicationsResponse$1, p as GetMembersCustomFieldApplicationsRequest$1, b as GetMembersCustomFieldApplicationsResponse$1, s as GetRolesCustomFieldApplicationsRequest$1, c as GetRolesCustomFieldApplicationsResponse$1 } from './members-v1-custom-field-application-custom-field-applications.universal-C9A9KNnP.js';

interface CustomFieldApplication {
    /**
     * Custom field ID.
     * @format GUID
     */
    customFieldId?: string | null;
    /**
     * Custom field key.
     * @readonly
     */
    customFieldKey?: string | null;
    /** Entities to which the custom field applies. */
    applications?: ApplicationsWrapper;
    /** Entities from which the custom field is excluded. */
    exclusions?: ExclusionsWrapper;
    /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */
    revision?: string | null;
}
interface ApplicationsWrapper {
    /**
     * List of up to 100 entities to which the the custom field applies.
     * @maxSize 100
     */
    items?: AppliesTo[];
}
interface AppliesTo {
    /** Type of the application. */
    applicationType?: Type;
    /**
     * Entity ID.
     * @format GUID
     */
    entityId?: string | null;
}
declare enum Type {
    /** Unknown application type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The field is applied to members with a specific role. */
    ROLE = "ROLE",
    /** The field is applied to members with a specific badge. */
    BADGE = "BADGE",
    /** The field is applied to members with a specific pricing plan. */
    PRICING_PLAN = "PRICING_PLAN",
    /** The field is applied to the specified members. */
    MEMBER = "MEMBER"
}
interface ExclusionsWrapper {
    /**
     * List of up to 100 entities from which the custom field is excluded.
     * @maxSize 100
     */
    items?: Exclusion[];
}
interface Exclusion {
    /** Type of the exclusion. */
    exclusionType?: ExclusionType;
    /**
     * Entity ID.
     * @format GUID
     */
    entityId?: string | null;
}
declare enum ExclusionType {
    /** Unknown exclusion type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The field is excluded from members with a specific role. */
    ROLE = "ROLE",
    /** The field is excluded from members with a specific badge. */
    BADGE = "BADGE",
    /** The field is excluded from members with a specific pricing plan. */
    PRICING_PLAN = "PRICING_PLAN",
    /** The field is excluded from the specified members. */
    MEMBER = "MEMBER"
}
interface CreateCustomFieldApplicationRequest {
    /** Custom field application details. */
    application: CustomFieldApplication;
}
interface CreateCustomFieldApplicationResponse {
    /** The created custom field application. */
    application?: CustomFieldApplication;
}
interface DeleteCustomFieldApplicationRequest {
    /**
     * ID of the custom field with an application to delete.
     * @format GUID
     */
    customFieldId: string | null;
}
interface DeleteCustomFieldApplicationResponse {
}
interface UpdateCustomFieldApplicationRequest {
    /** Custom field application to update. */
    application: CustomFieldApplication;
}
interface UpdateCustomFieldApplicationResponse {
    /** Updated custom field application. */
    application?: CustomFieldApplication;
}
interface GetCustomFieldApplicationRequest {
    /**
     * ID of the custom field with an application to retrieve.
     * @format GUID
     */
    customFieldId: string | null;
}
interface GetCustomFieldApplicationResponse {
    /** Retrieved custom field application. */
    application?: CustomFieldApplication;
}
interface GetCustomFieldApplicationsRequest {
    /**
     * List of IDs of the custom fields with applications to retrieve.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    customFieldIds: string[];
}
interface GetCustomFieldApplicationsResponse {
    /** Retrieved list of custom field applications. */
    applications?: CustomFieldApplication[];
}
interface GetMembersCustomFieldApplicationsRequest {
    /**
     * IDs of members with custom field applications to retrieve.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    memberIds: string[];
}
interface GetMembersCustomFieldApplicationsResponse {
    /** Retrieved list of custom field applications. */
    results?: MemberCustomFieldApplication[];
}
interface MemberCustomFieldApplication {
    /**
     * Member ID.
     * @format GUID
     */
    memberId?: string | null;
    /** Custom field applications for the member. */
    applications?: FieldApplication[];
}
interface FieldApplication {
    /**
     * Custom field key.
     * @readonly
     */
    customFieldKey?: string | null;
    /** Whether the custom field applies to the member. */
    applies?: boolean;
    /** Custom field details. */
    customField?: CustomField;
}
interface CustomField {
    /**
     * Custom field ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Custom field title.
     * @minLength 1
     * @maxLength 150
     */
    name?: string | null;
    /**
     * Custom field key.
     * @readonly
     */
    key?: string | null;
    /** Privacy level of the custom field. */
    defaultPrivacy?: Privacy;
    /** Type of information to provide for members. */
    fieldType?: FieldTypeType;
    /** Social network type. */
    socialType?: SocialTypeType;
    /**
     * Field origin.
     * @readonly
     */
    fieldOrigin?: Origin;
    /**
     * Which members will have the custom field in their profile.
     * @readonly
     */
    appliesTo?: AppliesToAppliesTo;
    /**
     * A section which the field belongs to.
     * @readonly
     */
    section?: Section;
    /**
     * Date and time when the field was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time when the field was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */
    revision?: string | null;
}
declare enum Privacy {
    /** Unknown privacy. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The information appears on the members' public profile pages. */
    PUBLIC = "PUBLIC",
    /** Only the member can see this information. */
    PRIVATE = "PRIVATE"
}
declare enum FieldTypeType {
    /** Unknown field type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** A text box to write text. */
    TEXT = "TEXT",
    /** Only a number can be entered into the field. */
    NUMBER = "NUMBER",
    /** Only a date can be entered into the field. */
    DATE = "DATE",
    /** Only a URL can be entered into the field. */
    URL = "URL",
    /** Only a link from the selected social media platform can be entered into the field. */
    SOCIAL = "SOCIAL"
}
declare enum SocialTypeType {
    /** Unknown social type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Facebook social media platform. */
    FACEBOOK = "FACEBOOK",
    /** Instagram social media platform. */
    INSTAGRAM = "INSTAGRAM",
    /** LinkedIn social media platform. */
    LINKEDIN = "LINKEDIN",
    /** X (formerly Twitter) social media platform. */
    TWITTER = "TWITTER",
    /** Youtube social media platform. */
    YOUTUBE = "YOUTUBE",
    /** Pinterest social media platform. */
    PINTEREST = "PINTEREST",
    /** TikTok social media platform. */
    TIKTOK = "TIKTOK",
    /** DeviantArt social media platform. */
    DEVIANTART = "DEVIANTART",
    /** SoundCloud social media platform. */
    SOUNDCLOUD = "SOUNDCLOUD",
    /** Tumblr social media platform. */
    TUMBLR = "TUMBLR",
    /** Vimeo social media platform. */
    VIMEO = "VIMEO",
    /** VKontakte social media platform. */
    VKONTAKTE = "VKONTAKTE",
    /** Odnoklassniki social media platform. */
    ODNOKLASSNIKI = "ODNOKLASSNIKI",
    /** Other social media platform. */
    OTHER = "OTHER"
}
declare enum Origin {
    /** Unknown field origin. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Custom field created by a Wix user. */
    CUSTOM = "CUSTOM",
    /** Contact type of field. These are default fields that are already provided by Members Area, such as: "birth date", "position", "company". */
    CONTACT = "CONTACT",
    /** System fields, such as: "first name", "last name", "email", "phone", "address", and  "title". Some system fields are only available from the dashboard. */
    SYSTEM = "SYSTEM"
}
declare enum AppliesToAppliesTo {
    /** Everyone will have this field. */
    ALL_MEMBERS = "ALL_MEMBERS",
    /** Only selected members will have this field. See the Custom Field Application API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/custom-field-applications/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/custom-fields/custom-field-applications/introduction)) for more information. */
    SELECTED_MEMBERS = "SELECTED_MEMBERS"
}
declare enum Section {
    /** General section. All custom fields and the following default fields are assigned to this section: "first name", "last name", "email", "phone", "birth date", "position", "company". */
    GENERAL = "GENERAL",
    /** Social media section. The "social media" field is assigned to this section. */
    SOCIAL = "SOCIAL",
    /** Display info section. The default "title" field is assigned to this section. */
    DISPLAY_INFO = "DISPLAY_INFO",
    /** Address section. The default "address" field is assigned to this section. */
    ADDRESS = "ADDRESS"
}
interface GetRolesCustomFieldApplicationsRequest {
    /**
     * IDs of roles with custom field applications to retrieve.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    roleIds: string[];
}
interface GetRolesCustomFieldApplicationsResponse {
    /** Retrieved list of custom field applications. */
    results?: RoleCustomFieldApplication[];
}
interface RoleCustomFieldApplication {
    /**
     * Role ID.
     * @format GUID
     */
    roleId?: string | null;
    /** Custom field applications for the role. */
    applications?: FieldApplication[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCustomFieldApplication(): __PublicMethodMetaInfo<'POST', {}, CreateCustomFieldApplicationRequest$1, CreateCustomFieldApplicationRequest, CreateCustomFieldApplicationResponse$1, CreateCustomFieldApplicationResponse>;
declare function deleteCustomFieldApplication(): __PublicMethodMetaInfo<'DELETE', {
    customFieldId: string;
}, DeleteCustomFieldApplicationRequest$1, DeleteCustomFieldApplicationRequest, DeleteCustomFieldApplicationResponse$1, DeleteCustomFieldApplicationResponse>;
declare function updateCustomFieldApplication(): __PublicMethodMetaInfo<'PATCH', {
    applicationCustomFieldId: string;
}, UpdateCustomFieldApplicationRequest$1, UpdateCustomFieldApplicationRequest, UpdateCustomFieldApplicationResponse$1, UpdateCustomFieldApplicationResponse>;
declare function getCustomFieldApplication(): __PublicMethodMetaInfo<'GET', {
    customFieldId: string;
}, GetCustomFieldApplicationRequest$1, GetCustomFieldApplicationRequest, GetCustomFieldApplicationResponse$1, GetCustomFieldApplicationResponse>;
declare function getCustomFieldApplications(): __PublicMethodMetaInfo<'POST', {}, GetCustomFieldApplicationsRequest$1, GetCustomFieldApplicationsRequest, GetCustomFieldApplicationsResponse$1, GetCustomFieldApplicationsResponse>;
declare function getMembersCustomFieldApplications(): __PublicMethodMetaInfo<'POST', {}, GetMembersCustomFieldApplicationsRequest$1, GetMembersCustomFieldApplicationsRequest, GetMembersCustomFieldApplicationsResponse$1, GetMembersCustomFieldApplicationsResponse>;
declare function getRolesCustomFieldApplications(): __PublicMethodMetaInfo<'POST', {}, GetRolesCustomFieldApplicationsRequest$1, GetRolesCustomFieldApplicationsRequest, GetRolesCustomFieldApplicationsResponse$1, GetRolesCustomFieldApplicationsResponse>;

export { type __PublicMethodMetaInfo, createCustomFieldApplication, deleteCustomFieldApplication, getCustomFieldApplication, getCustomFieldApplications, getMembersCustomFieldApplications, getRolesCustomFieldApplications, updateCustomFieldApplication };
