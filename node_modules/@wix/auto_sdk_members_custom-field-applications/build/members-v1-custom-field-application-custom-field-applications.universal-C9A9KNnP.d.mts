interface CustomFieldApplication {
    /**
     * Custom field ID.
     * @format GUID
     */
    customFieldId?: string | null;
    /**
     * Custom field key.
     * @readonly
     */
    customFieldKey?: string | null;
    /** Entities to which the custom field applies. */
    applications?: ApplicationsWrapper;
    /** Entities from which the custom field is excluded. */
    exclusions?: ExclusionsWrapper;
    /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */
    revision?: string | null;
}
interface ApplicationsWrapper {
    /**
     * List of up to 100 entities to which the the custom field applies.
     * @maxSize 100
     */
    items?: AppliesTo[];
}
interface AppliesTo {
    /** Type of the application. */
    applicationType?: Type;
    /**
     * Entity ID.
     * @format GUID
     */
    entityId?: string | null;
}
declare enum Type {
    /** Unknown application type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The field is applied to members with a specific role. */
    ROLE = "ROLE",
    /** The field is applied to members with a specific badge. */
    BADGE = "BADGE",
    /** The field is applied to members with a specific pricing plan. */
    PRICING_PLAN = "PRICING_PLAN",
    /** The field is applied to the specified members. */
    MEMBER = "MEMBER"
}
interface ExclusionsWrapper {
    /**
     * List of up to 100 entities from which the custom field is excluded.
     * @maxSize 100
     */
    items?: Exclusion[];
}
interface Exclusion {
    /** Type of the exclusion. */
    exclusionType?: ExclusionType;
    /**
     * Entity ID.
     * @format GUID
     */
    entityId?: string | null;
}
declare enum ExclusionType {
    /** Unknown exclusion type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The field is excluded from members with a specific role. */
    ROLE = "ROLE",
    /** The field is excluded from members with a specific badge. */
    BADGE = "BADGE",
    /** The field is excluded from members with a specific pricing plan. */
    PRICING_PLAN = "PRICING_PLAN",
    /** The field is excluded from the specified members. */
    MEMBER = "MEMBER"
}
interface CreateCustomFieldApplicationRequest {
    /** Custom field application details. */
    application: CustomFieldApplication;
}
interface CreateCustomFieldApplicationResponse {
    /** The created custom field application. */
    application?: CustomFieldApplication;
}
interface DeleteCustomFieldApplicationRequest {
    /**
     * ID of the custom field with an application to delete.
     * @format GUID
     */
    customFieldId: string | null;
}
interface DeleteCustomFieldApplicationResponse {
}
interface UpdateCustomFieldApplicationRequest {
    /** Custom field application to update. */
    application: CustomFieldApplication;
}
interface UpdateCustomFieldApplicationResponse {
    /** Updated custom field application. */
    application?: CustomFieldApplication;
}
interface GetCustomFieldApplicationRequest {
    /**
     * ID of the custom field with an application to retrieve.
     * @format GUID
     */
    customFieldId: string | null;
}
interface GetCustomFieldApplicationResponse {
    /** Retrieved custom field application. */
    application?: CustomFieldApplication;
}
interface GetCustomFieldApplicationsRequest {
    /**
     * List of IDs of the custom fields with applications to retrieve.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    customFieldIds: string[];
}
interface GetCustomFieldApplicationsResponse {
    /** Retrieved list of custom field applications. */
    applications?: CustomFieldApplication[];
}
interface GetMembersCustomFieldApplicationsRequest {
    /**
     * IDs of members with custom field applications to retrieve.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    memberIds: string[];
}
interface GetMembersCustomFieldApplicationsResponse {
    /** Retrieved list of custom field applications. */
    results?: MemberCustomFieldApplication[];
}
interface MemberCustomFieldApplication {
    /**
     * Member ID.
     * @format GUID
     */
    memberId?: string | null;
    /** Custom field applications for the member. */
    applications?: FieldApplication[];
}
interface FieldApplication {
    /**
     * Custom field key.
     * @readonly
     */
    customFieldKey?: string | null;
    /** Whether the custom field applies to the member. */
    applies?: boolean;
    /** Custom field details. */
    customField?: CustomField;
}
interface CustomField {
    /**
     * Custom field ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Custom field title.
     * @minLength 1
     * @maxLength 150
     */
    name?: string | null;
    /**
     * Custom field key.
     * @readonly
     */
    key?: string | null;
    /** Privacy level of the custom field. */
    defaultPrivacy?: Privacy;
    /** Type of information to provide for members. */
    fieldType?: FieldTypeType;
    /** Social network type. */
    socialType?: SocialTypeType;
    /**
     * Field origin.
     * @readonly
     */
    fieldOrigin?: Origin;
    /**
     * Which members will have the custom field in their profile.
     * @readonly
     */
    appliesTo?: AppliesToAppliesTo;
    /**
     * A section which the field belongs to.
     * @readonly
     */
    section?: Section;
    /**
     * Date and time when the field was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time when the field was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */
    revision?: string | null;
}
declare enum Privacy {
    /** Unknown privacy. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The information appears on the members' public profile pages. */
    PUBLIC = "PUBLIC",
    /** Only the member can see this information. */
    PRIVATE = "PRIVATE"
}
declare enum FieldTypeType {
    /** Unknown field type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** A text box to write text. */
    TEXT = "TEXT",
    /** Only a number can be entered into the field. */
    NUMBER = "NUMBER",
    /** Only a date can be entered into the field. */
    DATE = "DATE",
    /** Only a URL can be entered into the field. */
    URL = "URL",
    /** Only a link from the selected social media platform can be entered into the field. */
    SOCIAL = "SOCIAL"
}
declare enum SocialTypeType {
    /** Unknown social type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Facebook social media platform. */
    FACEBOOK = "FACEBOOK",
    /** Instagram social media platform. */
    INSTAGRAM = "INSTAGRAM",
    /** LinkedIn social media platform. */
    LINKEDIN = "LINKEDIN",
    /** X (formerly Twitter) social media platform. */
    TWITTER = "TWITTER",
    /** Youtube social media platform. */
    YOUTUBE = "YOUTUBE",
    /** Pinterest social media platform. */
    PINTEREST = "PINTEREST",
    /** TikTok social media platform. */
    TIKTOK = "TIKTOK",
    /** DeviantArt social media platform. */
    DEVIANTART = "DEVIANTART",
    /** SoundCloud social media platform. */
    SOUNDCLOUD = "SOUNDCLOUD",
    /** Tumblr social media platform. */
    TUMBLR = "TUMBLR",
    /** Vimeo social media platform. */
    VIMEO = "VIMEO",
    /** VKontakte social media platform. */
    VKONTAKTE = "VKONTAKTE",
    /** Odnoklassniki social media platform. */
    ODNOKLASSNIKI = "ODNOKLASSNIKI",
    /** Other social media platform. */
    OTHER = "OTHER"
}
declare enum Origin {
    /** Unknown field origin. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Custom field created by a Wix user. */
    CUSTOM = "CUSTOM",
    /** Contact type of field. These are default fields that are already provided by Members Area, such as: "birth date", "position", "company". */
    CONTACT = "CONTACT",
    /** System fields, such as: "first name", "last name", "email", "phone", "address", and  "title". Some system fields are only available from the dashboard. */
    SYSTEM = "SYSTEM"
}
declare enum AppliesToAppliesTo {
    /** Everyone will have this field. */
    ALL_MEMBERS = "ALL_MEMBERS",
    /** Only selected members will have this field. See the Custom Field Application API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/custom-field-applications/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/custom-fields/custom-field-applications/introduction)) for more information. */
    SELECTED_MEMBERS = "SELECTED_MEMBERS"
}
declare enum Section {
    /** General section. All custom fields and the following default fields are assigned to this section: "first name", "last name", "email", "phone", "birth date", "position", "company". */
    GENERAL = "GENERAL",
    /** Social media section. The "social media" field is assigned to this section. */
    SOCIAL = "SOCIAL",
    /** Display info section. The default "title" field is assigned to this section. */
    DISPLAY_INFO = "DISPLAY_INFO",
    /** Address section. The default "address" field is assigned to this section. */
    ADDRESS = "ADDRESS"
}
interface GetRolesCustomFieldApplicationsRequest {
    /**
     * IDs of roles with custom field applications to retrieve.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    roleIds: string[];
}
interface GetRolesCustomFieldApplicationsResponse {
    /** Retrieved list of custom field applications. */
    results?: RoleCustomFieldApplication[];
}
interface RoleCustomFieldApplication {
    /**
     * Role ID.
     * @format GUID
     */
    roleId?: string | null;
    /** Custom field applications for the role. */
    applications?: FieldApplication[];
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface Empty {
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface UpdateCustomFieldApplication {
    /**
     * Custom field key.
     * @readonly
     */
    customFieldKey?: string | null;
    /** Entities to which the custom field applies. */
    applications?: ApplicationsWrapper;
    /** Entities from which the custom field is excluded. */
    exclusions?: ExclusionsWrapper;
    /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */
    revision?: string | null;
}

export { AppliesToAppliesTo as A, type Empty as B, type CustomFieldApplication as C, type DeleteCustomFieldApplicationRequest as D, ExclusionType as E, FieldTypeType as F, type GetCustomFieldApplicationResponse as G, type MessageEnvelope as H, type IdentificationData as I, type IdentificationDataIdOneOf as J, type MemberCustomFieldApplication as M, Origin as O, Privacy as P, type RoleCustomFieldApplication as R, SocialTypeType as S, Type as T, type UpdateCustomFieldApplication as U, WebhookIdentityType as W, type GetCustomFieldApplicationsResponse as a, type GetMembersCustomFieldApplicationsResponse as b, type GetRolesCustomFieldApplicationsResponse as c, Section as d, type ApplicationsWrapper as e, type AppliesTo as f, type ExclusionsWrapper as g, type Exclusion as h, type CreateCustomFieldApplicationRequest as i, type CreateCustomFieldApplicationResponse as j, type DeleteCustomFieldApplicationResponse as k, type UpdateCustomFieldApplicationRequest as l, type UpdateCustomFieldApplicationResponse as m, type GetCustomFieldApplicationRequest as n, type GetCustomFieldApplicationsRequest as o, type GetMembersCustomFieldApplicationsRequest as p, type FieldApplication as q, type CustomField as r, type GetRolesCustomFieldApplicationsRequest as s, type DomainEvent as t, type DomainEventBodyOneOf as u, type EntityCreatedEvent as v, type RestoreInfo as w, type EntityUpdatedEvent as x, type EntityDeletedEvent as y, type ActionEvent as z };
