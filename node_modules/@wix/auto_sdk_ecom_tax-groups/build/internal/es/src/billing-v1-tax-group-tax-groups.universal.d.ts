import { NonNullablePaths } from '@wix/sdk-types';
/**
 * A tax group is a category of specific line items grouped together based on their tax treatment.
 * You can create new tax groups to apply distinct tax rates and rules.
 */
export interface TaxGroup {
    /**
     * Tax group ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Tax group name.
     * @minLength 1
     * @maxLength 200
     */
    name?: string;
    /**
     * Revision number, which increments by 1 each time the tax group is updated. To prevent conflicting changes,
     * the current revision must be passed when updating the tax group.
     *
     * Ignored when creating a tax group.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tax group was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the tax group was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
export interface CreateTaxGroupRequest {
    /** Tax group to create. */
    taxGroup: TaxGroup;
}
export interface CreateTaxGroupResponse {
    /** Created tax group. */
    taxGroup?: TaxGroup;
}
export interface GetTaxGroupRequest {
    /**
     * ID of the tax group to retrieve.
     * @format GUID
     */
    taxGroupId: string;
}
export interface GetTaxGroupResponse {
    /** Retrieved tax group. */
    taxGroup?: TaxGroup;
}
export interface UpdateTaxGroupRequest {
    /** Tax group info to update. */
    taxGroup: TaxGroup;
}
export interface UpdateTaxGroupResponse {
    /** Updated tax group. */
    taxGroup?: TaxGroup;
}
export interface DeleteTaxGroupRequest {
    /**
     * ID of the tax group to delete.
     * @format GUID
     */
    taxGroupId: string;
}
export interface DeleteTaxGroupResponse {
}
export interface QueryTaxGroupsRequest {
    /** Query options. */
    query: QueryV2;
}
export interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
export interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
export interface QueryTaxGroupsResponse {
    /** Retrieved default tax groups. */
    taxGroups?: TaxGroup[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface ListDefaultTaxGroupsRequest {
}
export interface ListDefaultTaxGroupsResponse {
    /** Retrieved default tax groups. */
    taxGroups?: TaxGroup[];
}
export interface ListDefaultTaxGroupsByAppIdsRequest {
    /**
     * App IDs to retrieve default tax groups for.
     * @minSize 1
     * @maxSize 300
     * @minLength 1
     */
    appIds: string[];
}
export interface ListDefaultTaxGroupsByAppIdsResponse {
    /**
     * Retrieved default tax groups.
     * @minSize 1
     * @maxSize 300
     */
    results?: ListDefaultTaxGroupsByAppIdsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface ListDefaultTaxGroupsByAppIdsResult {
    /** Information about success or failure to retrieve default tax groups. */
    taxGroupMetadata?: ItemMetadata;
    /** Retrieved default tax groups. */
    taxGroup?: TaxGroup;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface TaxGroupCreatedEnvelope {
    entity: TaxGroup;
    metadata: EventMetadata;
}
/**
 * Triggered when a tax group is created.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId BILLING.TAX_GROUP_READ
 * @webhook
 * @eventType wix.billing.v1.tax_group_created
 * @serviceIdentifier wix.billing.v1.TaxGroups
 * @slug created
 * @documentationMaturity preview
 */
export declare function onTaxGroupCreated(handler: (event: TaxGroupCreatedEnvelope) => void | Promise<void>): void;
export interface TaxGroupDeletedEnvelope {
    metadata: EventMetadata;
}
/**
 * Triggered when a tax group is deleted.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId BILLING.TAX_GROUP_READ
 * @webhook
 * @eventType wix.billing.v1.tax_group_deleted
 * @serviceIdentifier wix.billing.v1.TaxGroups
 * @slug deleted
 * @documentationMaturity preview
 */
export declare function onTaxGroupDeleted(handler: (event: TaxGroupDeletedEnvelope) => void | Promise<void>): void;
export interface TaxGroupUpdatedEnvelope {
    entity: TaxGroup;
    metadata: EventMetadata;
}
/**
 * Triggered when a tax group is updated.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId BILLING.TAX_GROUP_READ
 * @webhook
 * @eventType wix.billing.v1.tax_group_updated
 * @serviceIdentifier wix.billing.v1.TaxGroups
 * @slug updated
 * @documentationMaturity preview
 */
export declare function onTaxGroupUpdated(handler: (event: TaxGroupUpdatedEnvelope) => void | Promise<void>): void;
type TaxGroupNonNullablePaths = `name`;
/**
 * Creates a tax group.
 *
 * Call Stores Update Product to add the `taxGroupId` to specific products to categorize as a group based on distinct tax treatment.
 * Wix uses tax groups to calculate tax.
 *
 * In addition to tax groups you create, default tax groups are already included in all Wix catalogs.
 * Call List Default Tax Groups to retrieve them. You can also use the Tax Groups Integration service plugin (REST only)
 * to create new default tax groups that can be applied directly to an entire catalog of products.
 * @param taxGroup - Tax group to create.
 * @public
 * @documentationMaturity preview
 * @requiredField taxGroup
 * @requiredField taxGroup.name
 * @permissionId BILLING.TAX_GROUP_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Created tax group.
 * @fqn wix.billing.v1.TaxGroups.CreateTaxGroup
 */
export declare function createTaxGroup(taxGroup: NonNullablePaths<TaxGroup, `name`>): Promise<NonNullablePaths<TaxGroup, TaxGroupNonNullablePaths>>;
/**
 * Retrieves a tax group.
 * @param taxGroupId - ID of the tax group to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField taxGroupId
 * @permissionId BILLING.TAX_GROUP_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved tax group.
 * @fqn wix.billing.v1.TaxGroups.GetTaxGroup
 */
export declare function getTaxGroup(taxGroupId: string): Promise<NonNullablePaths<TaxGroup, TaxGroupNonNullablePaths>>;
/**
 * Updates a tax group.
 *
 * Each time the tax group is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the tax group.
 * This ensures you're working with the latest tax group and prevents
 * unintended overwrites.
 * @param _id - Tax group ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField taxGroup
 * @requiredField taxGroup.name
 * @requiredField taxGroup.revision
 * @param taxGroup - Tax group info.
 * @permissionId BILLING.TAX_GROUP_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Updated tax group.
 * @fqn wix.billing.v1.TaxGroups.UpdateTaxGroup
 */
export declare function updateTaxGroup(_id: string, taxGroup: NonNullablePaths<UpdateTaxGroup, `name` | `revision`>): Promise<NonNullablePaths<TaxGroup, TaxGroupNonNullablePaths>>;
export interface UpdateTaxGroup {
    /**
     * Tax group ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Tax group name.
     * @minLength 1
     * @maxLength 200
     */
    name?: string;
    /**
     * Revision number, which increments by 1 each time the tax group is updated. To prevent conflicting changes,
     * the current revision must be passed when updating the tax group.
     *
     * Ignored when creating a tax group.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the tax group was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the tax group was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
/**
 * Deletes a tax group.
 *
 * If a tax group is deleted but the `taxGroupId` is still assigned to a product (see Stores Products API) then the default tax group is used to calculate tax.
 * @param taxGroupId - ID of the tax group to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField taxGroupId
 * @permissionId BILLING.TAX_GROUP_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn wix.billing.v1.TaxGroups.DeleteTaxGroup
 */
export declare function deleteTaxGroup(taxGroupId: string): Promise<void>;
/**
 * Creates a query to retrieve a list of tax groups.
 *
 * The `queryTaxGroups()` function builds a query to retrieve a list of tax groups and returns a `TaxGroupsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `TaxGroupsQueryBuilder` functions onto the query. `TaxGroupsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxGroups()` returns.
 *
 * `queryTaxGroups()` runs with the following `TaxGroupsQueryBuilder` default that you can override:
 * + `ascending("_id")`
 *
 * The functions that are chained to `queryTaxGroups()` are applied in the order they are called. For example, if you apply `ascending("name")` and then `ascending("_createdDate")`, the results are sorted first by the `"name"`, and then, if there are multiple results with the same `"name"`, the items are sorted by `"_createdDate"`.
 *
 * The following `TaxGroupsQueryBuilder` functions are supported for the `queryTaxGroups()` function. For a full description of the tax group object, see the object returned for the `items` property in `TaxGroupsQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId BILLING.TAX_GROUP_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxGroups.QueryTaxGroups
 */
export declare function queryTaxGroups(): TaxGroupsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface TaxGroupsQueryResult extends QueryCursorResult {
    items: TaxGroup[];
    query: TaxGroupsQueryBuilder;
    next: () => Promise<TaxGroupsQueryResult>;
    prev: () => Promise<TaxGroupsQueryResult>;
}
export interface TaxGroupsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'name' | '_createdDate' | '_updatedDate', value: any) => TaxGroupsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'name' | '_createdDate' | '_updatedDate', value: any) => TaxGroupsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => TaxGroupsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => TaxGroupsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => TaxGroupsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => TaxGroupsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_createdDate' | '_updatedDate', value: any[]) => TaxGroupsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'name' | '_createdDate' | '_updatedDate', value: any) => TaxGroupsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_createdDate' | '_updatedDate', value: boolean) => TaxGroupsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'name' | '_createdDate' | '_updatedDate'>) => TaxGroupsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'name' | '_createdDate' | '_updatedDate'>) => TaxGroupsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => TaxGroupsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => TaxGroupsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<TaxGroupsQueryResult>;
}
/**
 * Retrieves a list of default tax groups.
 *
 * The default tax groups for a site are inherited by the apps installed on the site.
 * For example, the Wix Stores app includes a `"Products"` tax group by default.
 *
 * Add additional default tax groups with the Tax Groups Integration service plugin (REST only).
 * @public
 * @documentationMaturity preview
 * @permissionId BILLING.TAX_GROUP_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxGroups.ListDefaultTaxGroups
 */
export declare function listDefaultTaxGroups(): Promise<NonNullablePaths<ListDefaultTaxGroupsResponse, {
    [P in TaxGroupNonNullablePaths]: `taxGroups.${number}.${P}`;
}[TaxGroupNonNullablePaths]>>;
/**
 * Retrieves default tax groups for specific apps.
 * @param appIds - App IDs to retrieve default tax groups for.
 * @public
 * @documentationMaturity preview
 * @requiredField appIds
 * @permissionId BILLING.TAX_GROUP_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxGroups.ListDefaultTaxGroupsByAppIds
 */
export declare function listDefaultTaxGroupsByAppIds(appIds: string[]): Promise<NonNullablePaths<ListDefaultTaxGroupsByAppIdsResponse, `results` | `results.${number}.taxGroupMetadata.originalIndex` | `results.${number}.taxGroupMetadata.success` | `results.${number}.taxGroupMetadata.error.code` | `results.${number}.taxGroupMetadata.error.description` | {
    [P in TaxGroupNonNullablePaths]: `results.${number}.taxGroup.${P}`;
}[TaxGroupNonNullablePaths] | `bulkActionMetadata.totalSuccesses` | `bulkActionMetadata.totalFailures` | `bulkActionMetadata.undetailedFailures`>>;
export {};
