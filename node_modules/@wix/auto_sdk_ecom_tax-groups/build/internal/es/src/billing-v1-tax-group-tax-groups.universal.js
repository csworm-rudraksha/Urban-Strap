import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBillingV1TaxGroup from './billing-v1-tax-group-tax-groups.http.js';
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a tax group.
 *
 * Call Stores Update Product to add the `taxGroupId` to specific products to categorize as a group based on distinct tax treatment.
 * Wix uses tax groups to calculate tax.
 *
 * In addition to tax groups you create, default tax groups are already included in all Wix catalogs.
 * Call List Default Tax Groups to retrieve them. You can also use the Tax Groups Integration service plugin (REST only)
 * to create new default tax groups that can be applied directly to an entire catalog of products.
 * @param taxGroup - Tax group to create.
 * @public
 * @documentationMaturity preview
 * @requiredField taxGroup
 * @requiredField taxGroup.name
 * @permissionId BILLING.TAX_GROUP_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Created tax group.
 * @fqn wix.billing.v1.TaxGroups.CreateTaxGroup
 */
export async function createTaxGroup(taxGroup) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ taxGroup: taxGroup });
    const reqOpts = ambassadorWixBillingV1TaxGroup.createTaxGroup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxGroup;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taxGroup: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taxGroup']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a tax group.
 * @param taxGroupId - ID of the tax group to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField taxGroupId
 * @permissionId BILLING.TAX_GROUP_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved tax group.
 * @fqn wix.billing.v1.TaxGroups.GetTaxGroup
 */
export async function getTaxGroup(taxGroupId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        taxGroupId: taxGroupId,
    });
    const reqOpts = ambassadorWixBillingV1TaxGroup.getTaxGroup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxGroup;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taxGroupId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taxGroupId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a tax group.
 *
 * Each time the tax group is updated, `revision` increments by 1.
 * The current `revision` must be passed when updating the tax group.
 * This ensures you're working with the latest tax group and prevents
 * unintended overwrites.
 * @param _id - Tax group ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField taxGroup
 * @requiredField taxGroup.name
 * @requiredField taxGroup.revision
 * @param taxGroup - Tax group info.
 * @permissionId BILLING.TAX_GROUP_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Updated tax group.
 * @fqn wix.billing.v1.TaxGroups.UpdateTaxGroup
 */
export async function updateTaxGroup(_id, taxGroup) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        taxGroup: { ...taxGroup, id: _id },
    });
    const reqOpts = ambassadorWixBillingV1TaxGroup.updateTaxGroup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.taxGroup;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { taxGroup: '$[1]' },
            explicitPathsToArguments: { 'taxGroup.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'taxGroup']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a tax group.
 *
 * If a tax group is deleted but the `taxGroupId` is still assigned to a product (see Stores Products API) then the default tax group is used to calculate tax.
 * @param taxGroupId - ID of the tax group to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField taxGroupId
 * @permissionId BILLING.TAX_GROUP_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn wix.billing.v1.TaxGroups.DeleteTaxGroup
 */
export async function deleteTaxGroup(taxGroupId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        taxGroupId: taxGroupId,
    });
    const reqOpts = ambassadorWixBillingV1TaxGroup.deleteTaxGroup(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { taxGroupId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['taxGroupId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of tax groups.
 *
 * The `queryTaxGroups()` function builds a query to retrieve a list of tax groups and returns a `TaxGroupsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `TaxGroupsQueryBuilder` functions onto the query. `TaxGroupsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTaxGroups()` returns.
 *
 * `queryTaxGroups()` runs with the following `TaxGroupsQueryBuilder` default that you can override:
 * + `ascending("_id")`
 *
 * The functions that are chained to `queryTaxGroups()` are applied in the order they are called. For example, if you apply `ascending("name")` and then `ascending("_createdDate")`, the results are sorted first by the `"name"`, and then, if there are multiple results with the same `"name"`, the items are sorted by `"_createdDate"`.
 *
 * The following `TaxGroupsQueryBuilder` functions are supported for the `queryTaxGroups()` function. For a full description of the tax group object, see the object returned for the `items` property in `TaxGroupsQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId BILLING.TAX_GROUP_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxGroups.QueryTaxGroups
 */
export function queryTaxGroups() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBillingV1TaxGroup.queryTaxGroups(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.taxGroups,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Retrieves a list of default tax groups.
 *
 * The default tax groups for a site are inherited by the apps installed on the site.
 * For example, the Wix Stores app includes a `"Products"` tax group by default.
 *
 * Add additional default tax groups with the Tax Groups Integration service plugin (REST only).
 * @public
 * @documentationMaturity preview
 * @permissionId BILLING.TAX_GROUP_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxGroups.ListDefaultTaxGroups
 */
export async function listDefaultTaxGroups() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixBillingV1TaxGroup.listDefaultTaxGroups(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves default tax groups for specific apps.
 * @param appIds - App IDs to retrieve default tax groups for.
 * @public
 * @documentationMaturity preview
 * @requiredField appIds
 * @permissionId BILLING.TAX_GROUP_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxGroups.ListDefaultTaxGroupsByAppIds
 */
export async function listDefaultTaxGroupsByAppIds(appIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ appIds: appIds });
    const reqOpts = ambassadorWixBillingV1TaxGroup.listDefaultTaxGroupsByAppIds(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { appIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['appIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=billing-v1-tax-group-tax-groups.universal.js.map