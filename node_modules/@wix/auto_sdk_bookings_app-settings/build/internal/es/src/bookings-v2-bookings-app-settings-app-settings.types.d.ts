export interface BookingsAppSettings {
    /**
     * Revision number, which increments by 1 each time the BookingsAppSettings is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the BookingsAppSettings.
     *
     * Ignored when creating a BookingsAppSettings.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the BookingsAppSettings was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the BookingsAppSettings was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Cart checkout settings */
    cartCheckoutSettings?: CartCheckoutSettings;
    /** Multi Service Appointment settings */
    multiServicesAppointmentsSettings?: MultiServicesAppointmentsSettings;
    /** Client Timezone settings */
    clientTimezoneSettings?: ClientTimezoneSettings;
}
export interface CartCheckoutSettings {
    /** Whether the cart checkout feature is enabled */
    enabled?: boolean | null;
}
export interface MultiServicesAppointmentsSettings {
    /** Whether the multi service appointments feature is enabled */
    enabled?: boolean | null;
}
export interface ClientTimezoneSettings {
    /** gives the client ability to change the timezone source between business and client */
    canClientChangeTimezoneSource?: boolean | null;
    /** default_time_zone can be either client or business */
    timezoneSource?: TimezoneSource;
}
export declare enum TimezoneSource {
    UNKNOWN_TIMEZONE_SOURCE = "UNKNOWN_TIMEZONE_SOURCE",
    /** Business Timezone Source. */
    BUSINESS = "BUSINESS",
    /** Client Timezone Source. */
    CLIENT = "CLIENT"
}
export interface CreateBookingsAppSettingsRequest {
    /** BookingsAppSettings to be created. */
    bookingsAppSettings: BookingsAppSettings;
}
export interface CreateBookingsAppSettingsResponse {
    /** The created BookingsAppSettings. */
    bookingsAppSettings?: BookingsAppSettings;
}
export interface GetBookingsAppSettingsRequest {
}
export interface GetBookingsAppSettingsResponse {
    /** The requested BookingsAppSettings. */
    bookingsAppSettings?: BookingsAppSettings;
}
export interface UpdateBookingsAppSettingsRequest {
    /** BookingsAppSettings to be updated, may be partial. */
    bookingsAppSettings: BookingsAppSettings;
}
export interface UpdateBookingsAppSettingsResponse {
    /** Updated BookingsAppSettings. */
    bookingsAppSettings?: BookingsAppSettings;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ClientTimezoneSettingsNonNullableFields {
    timezoneSource: TimezoneSource;
}
interface BookingsAppSettingsNonNullableFields {
    clientTimezoneSettings?: ClientTimezoneSettingsNonNullableFields;
}
export interface CreateBookingsAppSettingsResponseNonNullableFields {
    bookingsAppSettings?: BookingsAppSettingsNonNullableFields;
}
export interface GetBookingsAppSettingsResponseNonNullableFields {
    bookingsAppSettings?: BookingsAppSettingsNonNullableFields;
}
export interface UpdateBookingsAppSettingsResponseNonNullableFields {
    bookingsAppSettings?: BookingsAppSettingsNonNullableFields;
}
export {};
