"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateBookingsAppSettings = exports.getBookingsAppSettings = exports.createBookingsAppSettings = exports.WebhookIdentityType = exports.TimezoneSource = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsV2BookingsAppSettings = __importStar(require("./bookings-v2-bookings-app-settings-app-settings.http.js"));
var TimezoneSource;
(function (TimezoneSource) {
    TimezoneSource["UNKNOWN_TIMEZONE_SOURCE"] = "UNKNOWN_TIMEZONE_SOURCE";
    /** Business Timezone Source. */
    TimezoneSource["BUSINESS"] = "BUSINESS";
    /** Client Timezone Source. */
    TimezoneSource["CLIENT"] = "CLIENT";
})(TimezoneSource || (exports.TimezoneSource = TimezoneSource = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a BookingsAppSettings.
 * @param bookingsAppSettings - BookingsAppSettings to be created.
 * @internal
 * @documentationMaturity preview
 * @requiredField bookingsAppSettings
 * @permissionId BOOKINGS.APP_SETTINGS_CREATE
 * @returns The created BookingsAppSettings.
 * @fqn wix.bookings.v2.BookingsAppSettingsService.CreateBookingsAppSettings
 */
async function createBookingsAppSettings(bookingsAppSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        bookingsAppSettings: bookingsAppSettings,
    });
    const reqOpts = ambassadorWixBookingsV2BookingsAppSettings.createBookingsAppSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.bookingsAppSettings;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingsAppSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingsAppSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createBookingsAppSettings = createBookingsAppSettings;
/**
 * Retrieves a BookingsAppSettings.
 * @internal
 * @documentationMaturity preview
 * @permissionId BOOKINGS.APP_SETTINGS_READ
 * @returns The requested BookingsAppSettings.
 * @fqn wix.bookings.v2.BookingsAppSettingsService.GetBookingsAppSettings
 */
async function getBookingsAppSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixBookingsV2BookingsAppSettings.getBookingsAppSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.bookingsAppSettings;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getBookingsAppSettings = getBookingsAppSettings;
/**
 * Updates a BookingsAppSettings.
 *
 * Each time the BookingsAppSettings is updated,  `revision` increments by 1.
 * The current `revision` must be passed when updating the BookingsAppSettings.
 * This ensures you're working with the latest BookingsAppSettings  and prevents unintended overwrites.
 * @param bookingsAppSettings - BookingsAppSettings to be updated, may be partial.
 * @internal
 * @documentationMaturity preview
 * @requiredField bookingsAppSettings
 * @requiredField bookingsAppSettings.revision
 * @permissionId BOOKINGS.APP_SETTINGS_UPDATE
 * @returns Updated BookingsAppSettings.
 * @fqn wix.bookings.v2.BookingsAppSettingsService.UpdateBookingsAppSettings
 */
async function updateBookingsAppSettings(bookingsAppSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        bookingsAppSettings: bookingsAppSettings,
    });
    const reqOpts = ambassadorWixBookingsV2BookingsAppSettings.updateBookingsAppSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.bookingsAppSettings;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingsAppSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingsAppSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateBookingsAppSettings = updateBookingsAppSettings;
//# sourceMappingURL=bookings-v2-bookings-app-settings-app-settings.universal.js.map