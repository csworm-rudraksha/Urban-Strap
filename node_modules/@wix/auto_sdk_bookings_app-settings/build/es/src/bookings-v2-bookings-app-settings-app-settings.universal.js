import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsV2BookingsAppSettings from './bookings-v2-bookings-app-settings-app-settings.http.js';
export var TimezoneSource;
(function (TimezoneSource) {
    TimezoneSource["UNKNOWN_TIMEZONE_SOURCE"] = "UNKNOWN_TIMEZONE_SOURCE";
    /** Business Timezone Source. */
    TimezoneSource["BUSINESS"] = "BUSINESS";
    /** Client Timezone Source. */
    TimezoneSource["CLIENT"] = "CLIENT";
})(TimezoneSource || (TimezoneSource = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a BookingsAppSettings.
 * @param bookingsAppSettings - BookingsAppSettings to be created.
 * @internal
 * @documentationMaturity preview
 * @requiredField bookingsAppSettings
 * @permissionId BOOKINGS.APP_SETTINGS_CREATE
 * @returns The created BookingsAppSettings.
 * @fqn wix.bookings.v2.BookingsAppSettingsService.CreateBookingsAppSettings
 */
export async function createBookingsAppSettings(bookingsAppSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingsAppSettings: bookingsAppSettings,
    });
    const reqOpts = ambassadorWixBookingsV2BookingsAppSettings.createBookingsAppSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.bookingsAppSettings;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingsAppSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingsAppSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a BookingsAppSettings.
 * @internal
 * @documentationMaturity preview
 * @permissionId BOOKINGS.APP_SETTINGS_READ
 * @returns The requested BookingsAppSettings.
 * @fqn wix.bookings.v2.BookingsAppSettingsService.GetBookingsAppSettings
 */
export async function getBookingsAppSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixBookingsV2BookingsAppSettings.getBookingsAppSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.bookingsAppSettings;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a BookingsAppSettings.
 *
 * Each time the BookingsAppSettings is updated,  `revision` increments by 1.
 * The current `revision` must be passed when updating the BookingsAppSettings.
 * This ensures you're working with the latest BookingsAppSettings  and prevents unintended overwrites.
 * @param bookingsAppSettings - BookingsAppSettings to be updated, may be partial.
 * @internal
 * @documentationMaturity preview
 * @requiredField bookingsAppSettings
 * @requiredField bookingsAppSettings.revision
 * @permissionId BOOKINGS.APP_SETTINGS_UPDATE
 * @returns Updated BookingsAppSettings.
 * @fqn wix.bookings.v2.BookingsAppSettingsService.UpdateBookingsAppSettings
 */
export async function updateBookingsAppSettings(bookingsAppSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        bookingsAppSettings: bookingsAppSettings,
    });
    const reqOpts = ambassadorWixBookingsV2BookingsAppSettings.updateBookingsAppSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.bookingsAppSettings;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { bookingsAppSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['bookingsAppSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=bookings-v2-bookings-app-settings-app-settings.universal.js.map