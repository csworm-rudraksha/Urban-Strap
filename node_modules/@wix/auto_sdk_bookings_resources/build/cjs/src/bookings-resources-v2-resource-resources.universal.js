"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.countResources = exports.queryResources = exports.searchResources = exports.bulkDeleteResources = exports.deleteResource = exports.updateResource = exports.getResource = exports.bulkCreateResources = exports.createResource = exports.WebhookIdentityType = exports.Mode = exports.AggregationType = exports.Interval = exports.NestedAggregationType = exports.ScalarType = exports.MissingValues = exports.SortDirection = exports.SortType = exports.SortOrder = exports.ManagementType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsResourcesV2Resource = __importStar(require("./bookings-resources-v2-resource-resources.http.js"));
var ManagementType;
(function (ManagementType) {
    /** The resource is managed by a Wix user. */
    ManagementType["WIX_USER"] = "WIX_USER";
})(ManagementType || (exports.ManagementType = ManagementType = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var SortType;
(function (SortType) {
    /** Should sort by number of matches */
    SortType["COUNT"] = "COUNT";
    /** Should sort by value of the field alphabetically */
    SortType["VALUE"] = "VALUE";
})(SortType || (exports.SortType = SortType = {}));
var SortDirection;
(function (SortDirection) {
    /** Should sort in descending order */
    SortDirection["DESC"] = "DESC";
    /** Should sort in ascending order */
    SortDirection["ASC"] = "ASC";
})(SortDirection || (exports.SortDirection = SortDirection = {}));
var MissingValues;
(function (MissingValues) {
    /** Should missing values be excluded from the aggregation results */
    MissingValues["EXCLUDE"] = "EXCLUDE";
    /** Should missing values be included in the aggregation results */
    MissingValues["INCLUDE"] = "INCLUDE";
})(MissingValues || (exports.MissingValues = MissingValues = {}));
var ScalarType;
(function (ScalarType) {
    ScalarType["UNKNOWN_SCALAR_TYPE"] = "UNKNOWN_SCALAR_TYPE";
    /** Count of distinct values */
    ScalarType["COUNT_DISTINCT"] = "COUNT_DISTINCT";
    /** Minimum value */
    ScalarType["MIN"] = "MIN";
    /** Maximum value */
    ScalarType["MAX"] = "MAX";
})(ScalarType || (exports.ScalarType = ScalarType = {}));
var NestedAggregationType;
(function (NestedAggregationType) {
    NestedAggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value */
    NestedAggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    NestedAggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    NestedAggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    NestedAggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
})(NestedAggregationType || (exports.NestedAggregationType = NestedAggregationType = {}));
var Interval;
(function (Interval) {
    Interval["UNKNOWN_INTERVAL"] = "UNKNOWN_INTERVAL";
    /** Yearly interval */
    Interval["YEAR"] = "YEAR";
    /** Monthly interval */
    Interval["MONTH"] = "MONTH";
    /** Weekly interval */
    Interval["WEEK"] = "WEEK";
    /** Daily interval */
    Interval["DAY"] = "DAY";
    /** Hourly interval */
    Interval["HOUR"] = "HOUR";
    /** Minute interval */
    Interval["MINUTE"] = "MINUTE";
    /** Second interval */
    Interval["SECOND"] = "SECOND";
})(Interval || (exports.Interval = Interval = {}));
var AggregationType;
(function (AggregationType) {
    AggregationType["UNKNOWN_AGGREGATION_TYPE"] = "UNKNOWN_AGGREGATION_TYPE";
    /** An aggregation where result buckets are dynamically built - one per unique value */
    AggregationType["VALUE"] = "VALUE";
    /** An aggregation, where user can define set of ranges - each representing a bucket */
    AggregationType["RANGE"] = "RANGE";
    /** A single-value metric aggregation - e.g. min, max, sum, avg */
    AggregationType["SCALAR"] = "SCALAR";
    /** An aggregation, where result buckets are dynamically built - one per time interval (hour, day, week, etc.) */
    AggregationType["DATE_HISTOGRAM"] = "DATE_HISTOGRAM";
    /** Multi-level aggregation, where each next aggregation is nested within previous one */
    AggregationType["NESTED"] = "NESTED";
})(AggregationType || (exports.AggregationType = AggregationType = {}));
var Mode;
(function (Mode) {
    /** Any of the search terms must be present */
    Mode["OR"] = "OR";
    /** All search terms must be present */
    Mode["AND"] = "AND";
})(Mode || (exports.Mode = Mode = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a new resource.
 *
 *
 * ## Connected schedules
 *
 * A new event *schedule*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/wix-bookings-integration) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/wix-bookings-integration))
 * is automatically created for the resource.
 *
 * ## Locations
 *
 * If you don't specify `locationOptions`, Wix Bookings automatically sets
 * `locationOptions.availableInAllLocations` to `true`.
 *
 * If you specify 1 business location ID in `locationOptions.specificLocationOptions.businessLocations`,
 * you must specify `locationOptions.specificLocationOptions.availableInBusinessLocations`
 * as `true`. Currently, you can specify only a single business location.
 * @param resource - Resource to create.
 * @public
 * @documentationMaturity preview
 * @requiredField resource
 * @requiredField resource.name
 * @permissionId BOOKINGS.RESOURCE_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created resource.
 * @fqn wix.bookings.resources.v2.ResourcesService.CreateResource
 */
async function createResource(resource) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ resource: resource });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.createResource(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.resource;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { resource: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['resource']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createResource = createResource;
/**
 * Creates up to 50 resources.
 *
 *
 * Refer to *Create Resource*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/create-resource) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/create-resource))
 * for more details.
 * @param resources - Resources to create.
 * @public
 * @documentationMaturity preview
 * @requiredField resources
 * @requiredField resources.name
 * @permissionId BOOKINGS.RESOURCE_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.resources.v2.ResourcesService.BulkCreateResources
 */
async function bulkCreateResources(resources, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        resources: resources,
        returnEntity: options?.returnEntity,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.bulkCreateResources(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                resources: '$[0]',
                returnEntity: '$[1].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['resources', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkCreateResources = bulkCreateResources;
/**
 * Retrieves a resource.
 * @param resourceId - ID of the resource to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField resourceId
 * @permissionId BOOKINGS.RESOURCE_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved resource.
 * @fqn wix.bookings.resources.v2.ResourcesService.GetResource
 */
async function getResource(resourceId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        resourceId: resourceId,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.getResource(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.resource;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { resourceId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['resourceId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getResource = getResource;
/**
 * Updates a resource.
 *
 *
 * Each time the resource is updated, `revision` increments by 1. You must include the current revision of the resource when updating it.
 * This ensures you're working with the latest service information and prevents unintended overwrites.
 * @param _id - Resource ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField resource
 * @requiredField resource.revision
 * @permissionId BOOKINGS.RESOURCE_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated resource.
 * @fqn wix.bookings.resources.v2.ResourcesService.UpdateResource
 */
async function updateResource(_id, resource) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        resource: { ...resource, id: _id },
    });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.updateResource(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.resource;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { resource: '$[1]' },
            explicitPathsToArguments: { 'resource.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'resource']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateResource = updateResource;
/**
 * Deletes a resource.
 *
 *
 * Deleting a resource cancels its event schedule and all its working hour
 * schedules that aren't shared with another resource. Learn more about
 * _how Bookings uses the Calendar APIs_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/wix-bookings-integration) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/wix-bookings-integration)).
 * @param resourceId - ID of the resource to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField resourceId
 * @permissionId BOOKINGS.RESOURCE_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.resources.v2.ResourcesService.DeleteResource
 */
async function deleteResource(resourceId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        resourceId: resourceId,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.deleteResource(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { resourceId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['resourceId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteResource = deleteResource;
/**
 * Deletes multiple resources.
 *
 *
 * Refer to *Delete Resource*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/delete-resource) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/delete-resource))
 * for more details.
 * @param ids - IDs of the resources to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField ids
 * @permissionId BOOKINGS.RESOURCE_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.resources.v2.ResourcesService.BulkDeleteResources
 */
async function bulkDeleteResources(ids) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ ids: ids });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.bulkDeleteResources(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ids: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ids']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkDeleteResources = bulkDeleteResources;
/**
 * Retrieves a list of resources matching the provided search criteria.
 *
 *
 * Refer to the *supported filters article*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/filtering-and-sorting))
 * for a complete list of supported filters and sorting options.
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.RESOURCE_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.resources.v2.ResourcesService.SearchResources
 */
async function searchResources(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        search: options?.search,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.searchResources(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { search: '$[0].search' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.searchResources = searchResources;
/**
 * Creates a query to retrieve a list of resources.
 *
 * The `queryResources()` function builds a query to retrieve a list of resources and returns a `ResourcesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/resources-query-builder/find) function.
 *
 * You can refine the query by chaining `ResourcesQueryBuilder` functions onto the query. `ResourcesQueryBuilder` functions enable you to sort, filter, and control the results that `queryResources()` returns.
 *
 * `queryResources()` runs with the following `ResourcesQueryBuilder` default that you can override:
 *
 * + `limit` is `50`.
 * + Sorted by `id` in ascending order.
 *
 * The functions that are chained to `queryResources()` are applied in the order they are called. For example, if you apply `ascending("typeId")` and then `ascending("name")`, the results are sorted first by the `"typeId"`, and then, if there are multiple results with the same `"typeId"`, the items are sorted by `"name"`.
 *
 * The following `ResourcesQueryBuilder` functions are supported for the `queryResources()` function. For a full description of the resource object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/resources-query-result/items) property in `ResourcesQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.RESOURCE_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.resources.v2.ResourcesService.QueryResources
 */
function queryResources() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsResourcesV2Resource.queryResources(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.resources,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryResources = queryResources;
/**
 * Counts resources according to given criteria.
 *
 *
 * Refer to the *supported filters article*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/filtering-and-sorting))
 * for a complete list of supported filters and sorting options.
 * @public
 * @documentationMaturity preview
 * @param options - Filter to base the count on. See *the supported filters article* ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/filtering-and-sorting)) for a complete list of filtering options.
 * @permissionId BOOKINGS.RESOURCE_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.resources.v2.ResourcesService.CountResources
 */
async function countResources(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: options?.filter,
        search: options?.search,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2Resource.countResources(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                filter: '$[0].filter',
                search: '$[0].search',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.countResources = countResources;
//# sourceMappingURL=bookings-resources-v2-resource-resources.universal.js.map