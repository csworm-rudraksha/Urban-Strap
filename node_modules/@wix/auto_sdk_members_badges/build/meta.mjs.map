{"version":3,"sources":["../src/badges-v3-badge-badges.http.ts","../src/badges-v3-badge-badges.meta.ts"],"sourcesContent":["import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressBadgesV3BadgesServiceV3Url(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/members/v3/badges',\n        destPath: '/v3/badges',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/members-badges-server/v3',\n        destPath: '/v3',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_members_badges';\n\n/**\n * Creates a badge.\n *\n * New badges do not have any badge permissions by default. Wix users can set badge permissions from the [Badges page in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-0#managing-member-badges).\n *\n * If `backgroundColor` or `textColor` are not specified, they default to `\"#796EFF\"` (purple) and `\"#FFFFFF\"` (white) respectively.\n */\nexport function createBadge(payload: object): RequestOptionsFactory<any> {\n  function __createBadge({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'badge.createdDate' }, { path: 'badge.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.CreateBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badge.createdDate' },\n              { path: 'badge.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createBadge;\n}\n\n/**\n * Updates a badge.\n *\n * Note that the badge `slug` is based on the badge `title`. If you update the `title`, the `slug` updates accordingly.\n */\nexport function updateBadge(payload: object): RequestOptionsFactory<any> {\n  function __updateBadge({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'badge.createdDate' }, { path: 'badge.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'PATCH' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.UpdateBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{badge.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badge.createdDate' },\n              { path: 'badge.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateBadge;\n}\n\n/**\n * Retrieves up to 1,000 badges, given the requested paging.\n *\n * Default `paging.limit` is `100` and `paging.offset` is `0`.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function listBadges(payload: object): RequestOptionsFactory<any> {\n  function __listBadges({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.ListBadges',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badges.createdDate' },\n              { path: 'badges.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listBadges;\n}\n\n/**\n * Retrieves a badge.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function getBadge(payload: object): RequestOptionsFactory<any> {\n  function __getBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.GetBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badge.createdDate' },\n              { path: 'badge.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getBadge;\n}\n\n/** Deletes a badge. */\nexport function deleteBadge(payload: object): RequestOptionsFactory<any> {\n  function __deleteBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.DeleteBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteBadge;\n}\n\n/**\n * Assigns a badge to site members.\n *\n * Members inherit the badge's permissions when they receive the badge.\n * Badge permissions are added to previous member permissions, they don't replace the existing permissions.\n */\nexport function assignBadge(payload: object): RequestOptionsFactory<any> {\n  function __assignBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.AssignBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}/members',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __assignBadge;\n}\n\n/**\n * Removes an assigned badge from multiple site members.\n *\n * The members lose the badge's permissions when the badge is removed.\n */\nexport function unassignBadge(payload: object): RequestOptionsFactory<any> {\n  function __unassignBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.UnassignBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}/members',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __unassignBadge;\n}\n\n/**\n * Retrieves up to 1,000 site members assigned to a badge.\n *\n * Default `paging.limit` is `100` and `paging.offset` is `0`.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function listMembers(payload: object): RequestOptionsFactory<any> {\n  function __listMembers({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.ListMembers',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}/members',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __listMembers;\n}\n\n/**\n * Retrieves badges assigned to specified members.\n *\n * Members are typically associated with a contact, each having a distinct `memberId` and `contactId`. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function listMembersBadgeIds(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listMembersBadgeIds({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.ListMembersBadgeIds',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/members',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __listMembersBadgeIds;\n}\n\n/**\n * Retrieves a member count per badge.\n *\n * This method is not universal function and only runs on the backend.\n */\nexport function getMemberCountsPerBadge(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __getMemberCountsPerBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.badges.v3.BadgesServiceV3.GetMemberCountsPerBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/members/count',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __getMemberCountsPerBadge;\n}\n\n/**\n * Updates the display order of badges.\n *\n * This method is not universal function and only runs on the backend\n */\nexport function updateBadgesDisplayOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updateBadgesDisplayOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'PATCH' as any,\n      methodFqn:\n        'com.wixpress.badges.v3.BadgesServiceV3.UpdateBadgesDisplayOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/order',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badges.createdDate' },\n              { path: 'badges.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateBadgesDisplayOrder;\n}\n","import * as ambassadorWixBadgesV3Badge from './badges-v3-badge-badges.http.js';\nimport * as ambassadorWixBadgesV3BadgeTypes from './badges-v3-badge-badges.types.js';\nimport * as ambassadorWixBadgesV3BadgeUniversalTypes from './badges-v3-badge-badges.universal.js';\n\nexport type __PublicMethodMetaInfo<\n  K = string,\n  M = unknown,\n  T = unknown,\n  S = unknown,\n  Q = unknown,\n  R = unknown\n> = {\n  getUrl: (context: any) => string;\n  httpMethod: K;\n  path: string;\n  pathParams: M;\n  __requestType: T;\n  __originalRequestType: S;\n  __responseType: Q;\n  __originalResponseType: R;\n};\n\nexport function createBadge(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixBadgesV3BadgeUniversalTypes.CreateBadgeRequest,\n  ambassadorWixBadgesV3BadgeTypes.CreateBadgeRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.CreateBadgeResponse,\n  ambassadorWixBadgesV3BadgeTypes.CreateBadgeResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.createBadge(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v3/badges',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function updateBadge(): __PublicMethodMetaInfo<\n  'PATCH',\n  { badgeId: string },\n  ambassadorWixBadgesV3BadgeUniversalTypes.UpdateBadgeRequest,\n  ambassadorWixBadgesV3BadgeTypes.UpdateBadgeRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.UpdateBadgeResponse,\n  ambassadorWixBadgesV3BadgeTypes.UpdateBadgeResponse\n> {\n  const payload = { badge: { id: ':badgeId' } } as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.updateBadge(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'PATCH',\n    path: '/v3/badges/{badge.id}',\n    pathParams: { badgeId: 'badgeId' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function listBadges(): __PublicMethodMetaInfo<\n  'GET',\n  {},\n  ambassadorWixBadgesV3BadgeUniversalTypes.ListBadgesRequest,\n  ambassadorWixBadgesV3BadgeTypes.ListBadgesRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.ListBadgesResponse,\n  ambassadorWixBadgesV3BadgeTypes.ListBadgesResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.listBadges(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v3/badges',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function getBadge(): __PublicMethodMetaInfo<\n  'GET',\n  { id: string },\n  ambassadorWixBadgesV3BadgeUniversalTypes.GetBadgeRequest,\n  ambassadorWixBadgesV3BadgeTypes.GetBadgeRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.GetBadgeResponse,\n  ambassadorWixBadgesV3BadgeTypes.GetBadgeResponse\n> {\n  const payload = { id: ':id' } as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.getBadge(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v3/badges/{id}',\n    pathParams: { id: 'id' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function deleteBadge(): __PublicMethodMetaInfo<\n  'DELETE',\n  { id: string },\n  ambassadorWixBadgesV3BadgeUniversalTypes.DeleteBadgeRequest,\n  ambassadorWixBadgesV3BadgeTypes.DeleteBadgeRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.DeleteBadgeResponse,\n  ambassadorWixBadgesV3BadgeTypes.DeleteBadgeResponse\n> {\n  const payload = { id: ':id' } as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.deleteBadge(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'DELETE',\n    path: '/v3/badges/{id}',\n    pathParams: { id: 'id' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function assignBadge(): __PublicMethodMetaInfo<\n  'POST',\n  { id: string },\n  ambassadorWixBadgesV3BadgeUniversalTypes.AssignBadgeRequest,\n  ambassadorWixBadgesV3BadgeTypes.AssignBadgeRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.AssignBadgeResponse,\n  ambassadorWixBadgesV3BadgeTypes.AssignBadgeResponse\n> {\n  const payload = { id: ':id' } as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.assignBadge(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v3/badges/{id}/members',\n    pathParams: { id: 'id' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function unassignBadge(): __PublicMethodMetaInfo<\n  'DELETE',\n  { id: string },\n  ambassadorWixBadgesV3BadgeUniversalTypes.UnassignBadgeRequest,\n  ambassadorWixBadgesV3BadgeTypes.UnassignBadgeRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.UnassignBadgeResponse,\n  ambassadorWixBadgesV3BadgeTypes.UnassignBadgeResponse\n> {\n  const payload = { id: ':id' } as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.unassignBadge(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'DELETE',\n    path: '/v3/badges/{id}/members',\n    pathParams: { id: 'id' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function listMembersByBadge(): __PublicMethodMetaInfo<\n  'GET',\n  { id: string },\n  ambassadorWixBadgesV3BadgeUniversalTypes.ListMembersRequest,\n  ambassadorWixBadgesV3BadgeTypes.ListMembersRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.ListMembersResponse,\n  ambassadorWixBadgesV3BadgeTypes.ListMembersResponse\n> {\n  const payload = { id: ':id' } as any;\n\n  const getRequestOptions = ambassadorWixBadgesV3Badge.listMembers(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v3/badges/{id}/members',\n    pathParams: { id: 'id' },\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function listBadgesPerMember(): __PublicMethodMetaInfo<\n  'POST',\n  {},\n  ambassadorWixBadgesV3BadgeUniversalTypes.ListMembersBadgeIdsRequest,\n  ambassadorWixBadgesV3BadgeTypes.ListMembersBadgeIdsRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.ListMembersBadgeIdsResponse,\n  ambassadorWixBadgesV3BadgeTypes.ListMembersBadgeIdsResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixBadgesV3Badge.listMembersBadgeIds(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'POST',\n    path: '/v3/badges/members',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function getMemberCountsPerBadge(): __PublicMethodMetaInfo<\n  'GET',\n  {},\n  ambassadorWixBadgesV3BadgeUniversalTypes.GetMemberCountsPerBadgeRequest,\n  ambassadorWixBadgesV3BadgeTypes.GetMemberCountsPerBadgeRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.GetMemberCountsPerBadgeResponse,\n  ambassadorWixBadgesV3BadgeTypes.GetMemberCountsPerBadgeResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixBadgesV3Badge.getMemberCountsPerBadge(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'GET',\n    path: '/v3/badges/members/count',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n\nexport function updateBadgesDisplayOrder(): __PublicMethodMetaInfo<\n  'PATCH',\n  {},\n  ambassadorWixBadgesV3BadgeUniversalTypes.UpdateBadgesDisplayOrderRequest,\n  ambassadorWixBadgesV3BadgeTypes.UpdateBadgesDisplayOrderRequest,\n  ambassadorWixBadgesV3BadgeUniversalTypes.UpdateBadgesDisplayOrderResponse,\n  ambassadorWixBadgesV3BadgeTypes.UpdateBadgesDisplayOrderResponse\n> {\n  const payload = {} as any;\n\n  const getRequestOptions =\n    ambassadorWixBadgesV3Badge.updateBadgesDisplayOrder(payload);\n\n  const getUrl = (context: any): string => {\n    const { url } = getRequestOptions(context);\n    return url!;\n  };\n\n  return {\n    getUrl,\n    httpMethod: 'PATCH',\n    path: '/v3/badges/order',\n    pathParams: {},\n    __requestType: null as any,\n    __originalRequestType: null as any,\n    __responseType: null as any,\n    __originalResponseType: null as any,\n  };\n}\n"],"mappings":";AAAA,SAAS,yBAAyB;AAClC,SAAS,4CAA4C;AACrD,SAAS,4CAA4C;AACrD,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;AAI3B,SAAS,6CACP,MACA;AACA,QAAM,mBAAmB;AAAA,IACvB,mBAAmB;AAAA,MACjB;AAAA,QACE,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,IACA,wBAAwB;AAAA,MACtB;AAAA,QACE,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAEA,SAAO,WAAW,OAAO,OAAO,MAAM,EAAE,iBAAiB,CAAC,CAAC;AAC7D;AAEA,IAAM,eAAe;AASd,SAAS,YAAY,SAA6C;AACvE,WAAS,cAAc,EAAE,KAAK,GAAQ;AACpC,UAAM,iBAAiB,eAAe,SAAS;AAAA,MAC7C;AAAA,QACE,aAAa;AAAA,QACb,OAAO,CAAC,EAAE,MAAM,oBAAoB,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAAA,MACtE;AAAA,IACF,CAAC;AACD,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACA,aAClB,eAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,oBAAoB;AAAA,YAC5B,EAAE,MAAM,oBAAoB;AAAA,UAC9B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAOO,SAAS,YAAY,SAA6C;AACvE,WAAS,cAAc,EAAE,KAAK,GAAQ;AACpC,UAAM,iBAAiB,eAAe,SAAS;AAAA,MAC7C;AAAA,QACE,aAAa;AAAA,QACb,OAAO,CAAC,EAAE,MAAM,oBAAoB,GAAG,EAAE,MAAM,oBAAoB,CAAC;AAAA,MACtE;AAAA,IACF,CAAC;AACD,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACA,aAClB,eAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,oBAAoB;AAAA,YAC5B,EAAE,MAAM,oBAAoB;AAAA,UAC9B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AASO,SAAS,WAAW,SAA6C;AACtE,WAAS,aAAa,EAAE,KAAK,GAAQ;AACnC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,QAAQ,kBAAkB,OAAO;AAAA,MACjC,mBAAmB,CAACA,aAClB,eAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,qBAAqB;AAAA,YAC7B,EAAE,MAAM,qBAAqB;AAAA,UAC/B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAOO,SAAS,SAAS,SAA6C;AACpE,WAAS,WAAW,EAAE,KAAK,GAAQ;AACjC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,QAAQ,kBAAkB,OAAO;AAAA,MACjC,mBAAmB,CAACA,aAClB,eAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,oBAAoB;AAAA,YAC5B,EAAE,MAAM,oBAAoB;AAAA,UAC9B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAGO,SAAS,YAAY,SAA6C;AACvE,WAAS,cAAc,EAAE,KAAK,GAAQ;AACpC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,QAAQ,kBAAkB,OAAO;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAQO,SAAS,YAAY,SAA6C;AACvE,WAAS,cAAc,EAAE,KAAK,GAAQ;AACpC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,IACR;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAOO,SAAS,cAAc,SAA6C;AACzE,WAAS,gBAAgB,EAAE,KAAK,GAAQ;AACtC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,QAAQ,kBAAkB,OAAO;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AASO,SAAS,YAAY,SAA6C;AACvE,WAAS,cAAc,EAAE,KAAK,GAAQ;AACpC,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,QAAQ,kBAAkB,OAAO;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AASO,SAAS,oBACd,SAC4B;AAC5B,WAAS,sBAAsB,EAAE,KAAK,GAAQ;AAC5C,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,IACR;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAOO,SAAS,wBACd,SAC4B;AAC5B,WAAS,0BAA0B,EAAE,KAAK,GAAQ;AAChD,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,QAAQ,kBAAkB,OAAO;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAOO,SAAS,yBACd,SAC4B;AAC5B,WAAS,2BAA2B,EAAE,KAAK,GAAQ;AACjD,UAAM,WAAW;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,WACE;AAAA,MACF,aAAa;AAAA,MACb,KAAK,6CAA6C;AAAA,QAChD,WAAW;AAAA,QACX,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,MACD,MAAM;AAAA,MACN,mBAAmB,CAACA,aAClB,eAAeA,UAAS;AAAA,QACtB;AAAA,UACE,aAAa;AAAA,UACb,OAAO;AAAA,YACL,EAAE,MAAM,qBAAqB;AAAA,YAC7B,EAAE,MAAM,qBAAqB;AAAA,UAC/B;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACL;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;AChXO,SAASC,eAOd;AACA,QAAM,UAAU,CAAC;AAEjB,QAAM,oBAA+C,YAAY,OAAO;AAExE,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,CAAC;AAAA,IACb,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,eAOd;AACA,QAAM,UAAU,EAAE,OAAO,EAAE,IAAI,WAAW,EAAE;AAE5C,QAAM,oBAA+C,YAAY,OAAO;AAExE,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,EAAE,SAAS,UAAU;AAAA,IACjC,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,cAOd;AACA,QAAM,UAAU,CAAC;AAEjB,QAAM,oBAA+C,WAAW,OAAO;AAEvE,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,CAAC;AAAA,IACb,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,YAOd;AACA,QAAM,UAAU,EAAE,IAAI,MAAM;AAE5B,QAAM,oBAA+C,SAAS,OAAO;AAErE,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,EAAE,IAAI,KAAK;AAAA,IACvB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,eAOd;AACA,QAAM,UAAU,EAAE,IAAI,MAAM;AAE5B,QAAM,oBAA+C,YAAY,OAAO;AAExE,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,EAAE,IAAI,KAAK;AAAA,IACvB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,eAOd;AACA,QAAM,UAAU,EAAE,IAAI,MAAM;AAE5B,QAAM,oBAA+C,YAAY,OAAO;AAExE,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,EAAE,IAAI,KAAK;AAAA,IACvB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,iBAOd;AACA,QAAM,UAAU,EAAE,IAAI,MAAM;AAE5B,QAAM,oBAA+C,cAAc,OAAO;AAE1E,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,EAAE,IAAI,KAAK;AAAA,IACvB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAAS,qBAOd;AACA,QAAM,UAAU,EAAE,IAAI,MAAM;AAE5B,QAAM,oBAA+C,YAAY,OAAO;AAExE,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,EAAE,IAAI,KAAK;AAAA,IACvB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAAS,sBAOd;AACA,QAAM,UAAU,CAAC;AAEjB,QAAM,oBACuB,oBAAoB,OAAO;AAExD,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,CAAC;AAAA,IACb,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,2BAOd;AACA,QAAM,UAAU,CAAC;AAEjB,QAAM,oBACuB,wBAAwB,OAAO;AAE5D,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,CAAC;AAAA,IACb,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;AAEO,SAASC,4BAOd;AACA,QAAM,UAAU,CAAC;AAEjB,QAAM,oBACuB,yBAAyB,OAAO;AAE7D,QAAM,SAAS,CAAC,YAAyB;AACvC,UAAM,EAAE,IAAI,IAAI,kBAAkB,OAAO;AACzC,WAAO;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA,IACZ,MAAM;AAAA,IACN,YAAY,CAAC;AAAA,IACb,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,gBAAgB;AAAA,IAChB,wBAAwB;AAAA,EAC1B;AACF;","names":["payload","createBadge","updateBadge","listBadges","getBadge","deleteBadge","assignBadge","unassignBadge","getMemberCountsPerBadge","updateBadgesDisplayOrder"]}