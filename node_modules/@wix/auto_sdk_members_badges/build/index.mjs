// src/badges-v3-badge-badges.public.ts
import { renameKeysFromRESTResponseToSDKResponse as renameKeysFromRESTResponseToSDKResponse2 } from "@wix/sdk-runtime/rename-all-nested-keys";
import { transformRESTTimestampToSDKTimestamp as transformRESTTimestampToSDKTimestamp2 } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths as transformPaths2 } from "@wix/sdk-runtime/transformations/transform-paths";
import { EventDefinition } from "@wix/sdk-types";

// src/badges-v3-badge-badges.universal.ts
import { transformError as sdkTransformError } from "@wix/sdk-runtime/transform-error";
import {
  renameKeysFromSDKRequestToRESTRequest,
  renameKeysFromRESTResponseToSDKResponse
} from "@wix/sdk-runtime/rename-all-nested-keys";

// src/badges-v3-badge-badges.http.ts
import { toURLSearchParams } from "@wix/sdk-runtime/rest-modules";
import { transformSDKTimestampToRESTTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformRESTTimestampToSDKTimestamp } from "@wix/sdk-runtime/transformations/timestamp";
import { transformPaths } from "@wix/sdk-runtime/transformations/transform-paths";
import { resolveUrl } from "@wix/sdk-runtime/rest-modules";
function resolveComWixpressBadgesV3BadgesServiceV3Url(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/members/v3/badges",
        destPath: "/v3/badges"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/members-badges-server/v3",
        destPath: "/v3"
      }
    ]
  };
  return resolveUrl(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_members_badges";
function createBadge(payload) {
  function __createBadge({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "badge.createdDate" }, { path: "badge.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "POST",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.CreateBadge",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "badge.createdDate" },
            { path: "badge.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createBadge;
}
function updateBadge(payload) {
  function __updateBadge({ host }) {
    const serializedData = transformPaths(payload, [
      {
        transformFn: transformSDKTimestampToRESTTimestamp,
        paths: [{ path: "badge.createdDate" }, { path: "badge.updatedDate" }]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "PATCH",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.UpdateBadge",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/{badge.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "badge.createdDate" },
            { path: "badge.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateBadge;
}
function listBadges(payload) {
  function __listBadges({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "GET",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.ListBadges",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "badges.createdDate" },
            { path: "badges.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listBadges;
}
function getBadge(payload) {
  function __getBadge({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "GET",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.GetBadge",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload),
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "badge.createdDate" },
            { path: "badge.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getBadge;
}
function deleteBadge(payload) {
  function __deleteBadge({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "DELETE",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.DeleteBadge",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/{id}",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __deleteBadge;
}
function assignBadge(payload) {
  function __assignBadge({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "POST",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.AssignBadge",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/{id}/members",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __assignBadge;
}
function unassignBadge(payload) {
  function __unassignBadge({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "DELETE",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.UnassignBadge",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/{id}/members",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __unassignBadge;
}
function listMembers(payload) {
  function __listMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "GET",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.ListMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/{id}/members",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __listMembers;
}
function listMembersBadgeIds(payload) {
  function __listMembersBadgeIds({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "POST",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.ListMembersBadgeIds",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/members",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __listMembersBadgeIds;
}
function getMemberCountsPerBadge(payload) {
  function __getMemberCountsPerBadge({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "GET",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.GetMemberCountsPerBadge",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/members/count",
        data: payload,
        host
      }),
      params: toURLSearchParams(payload)
    };
    return metadata;
  }
  return __getMemberCountsPerBadge;
}
function updateBadgesDisplayOrder(payload) {
  function __updateBadgesDisplayOrder({ host }) {
    const metadata = {
      entityFqdn: "wix.badges.v3.badge",
      method: "PATCH",
      methodFqn: "com.wixpress.badges.v3.BadgesServiceV3.UpdateBadgesDisplayOrder",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressBadgesV3BadgesServiceV3Url({
        protoPath: "/v3/badges/order",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => transformPaths(payload2, [
        {
          transformFn: transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "badges.createdDate" },
            { path: "badges.updatedDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateBadgesDisplayOrder;
}

// src/badges-v3-badge-badges.universal.ts
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function createBadge2(badge) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ badge });
  const reqOpts = createBadge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.badge;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { badge: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["badge"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateBadge2(_id, badge) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    badge: { ...badge, id: _id }
  });
  const reqOpts = updateBadge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.badge;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: { badge: "$[1]" },
        explicitPathsToArguments: { "badge.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "badge"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listBadges2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    paging: options?.paging
  });
  const reqOpts = listBadges(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { paging: "$[0].paging" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getBadge2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = getBadge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data)?.badge;
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteBadge2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
  const reqOpts = deleteBadge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function assignBadge2(_id, memberIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    memberIds
  });
  const reqOpts = assignBadge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", memberIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "memberIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function unassignBadge2(_id, memberIds) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    memberIds
  });
  const reqOpts = unassignBadge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", memberIds: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "memberIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listMembersByBadge(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    id: _id,
    paging: options?.paging
  });
  const reqOpts = listMembers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", paging: "$[1].paging" },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listBadgesPerMember(memberIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({
    memberIds
  });
  const reqOpts = listMembersBadgeIds(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["memberIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getMemberCountsPerBadge2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = renameKeysFromSDKRequestToRESTRequest({});
  const reqOpts = getMemberCountsPerBadge(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateBadgesDisplayOrder2(badgeIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = renameKeysFromSDKRequestToRESTRequest({ badgeIds });
  const reqOpts = updateBadgesDisplayOrder(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return renameKeysFromRESTResponseToSDKResponse(result.data);
  } catch (err) {
    const transformedError = sdkTransformError(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { badgeIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["badgeIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/badges-v3-badge-badges.public.ts
function createBadge3(httpClient) {
  return (badge) => createBadge2(
    badge,
    // @ts-ignore
    { httpClient }
  );
}
function updateBadge3(httpClient) {
  return (_id, badge) => updateBadge2(
    _id,
    badge,
    // @ts-ignore
    { httpClient }
  );
}
function listBadges3(httpClient) {
  return (options) => listBadges2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getBadge3(httpClient) {
  return (_id) => getBadge2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function deleteBadge3(httpClient) {
  return (_id) => deleteBadge2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function assignBadge3(httpClient) {
  return (_id, memberIds) => assignBadge2(
    _id,
    memberIds,
    // @ts-ignore
    { httpClient }
  );
}
function unassignBadge3(httpClient) {
  return (_id, memberIds) => unassignBadge2(
    _id,
    memberIds,
    // @ts-ignore
    { httpClient }
  );
}
function listMembersByBadge2(httpClient) {
  return (_id, options) => listMembersByBadge(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function listBadgesPerMember2(httpClient) {
  return (memberIds) => listBadgesPerMember(
    memberIds,
    // @ts-ignore
    { httpClient }
  );
}
function getMemberCountsPerBadge3(httpClient) {
  return () => getMemberCountsPerBadge2(
    // @ts-ignore
    { httpClient }
  );
}
function updateBadgesDisplayOrder3(httpClient) {
  return (badgeIds) => updateBadgesDisplayOrder2(
    badgeIds,
    // @ts-ignore
    { httpClient }
  );
}
var onBadgeAssigned = EventDefinition(
  "wix.badges.v3.badge_badge_assigned",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [{ path: "metadata.eventTime" }]
      }
    ])
  )
)();
var onBadgeUnassigned = EventDefinition(
  "wix.badges.v3.badge_badge_unassigned",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [{ path: "metadata.eventTime" }]
      }
    ])
  )
)();
var onBadgeCreated = EventDefinition(
  "wix.badges.v3.badge_created",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBadgeDeleted = EventDefinition(
  "wix.badges.v3.badge_deleted",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onBadgeUpdated = EventDefinition(
  "wix.badges.v3.badge_updated",
  true,
  (event) => renameKeysFromRESTResponseToSDKResponse2(
    transformPaths2(event, [
      {
        transformFn: transformRESTTimestampToSDKTimestamp2,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/badges-v3-badge-badges.context.ts
import { createRESTModule } from "@wix/sdk-runtime/rest-modules";
import { createEventModule } from "@wix/sdk-runtime/event-definition-modules";
var createBadge4 = /* @__PURE__ */ createRESTModule(createBadge3);
var updateBadge4 = /* @__PURE__ */ createRESTModule(updateBadge3);
var listBadges4 = /* @__PURE__ */ createRESTModule(listBadges3);
var getBadge4 = /* @__PURE__ */ createRESTModule(getBadge3);
var deleteBadge4 = /* @__PURE__ */ createRESTModule(deleteBadge3);
var assignBadge4 = /* @__PURE__ */ createRESTModule(assignBadge3);
var unassignBadge4 = /* @__PURE__ */ createRESTModule(unassignBadge3);
var listMembersByBadge3 = /* @__PURE__ */ createRESTModule(listMembersByBadge2);
var listBadgesPerMember3 = /* @__PURE__ */ createRESTModule(listBadgesPerMember2);
var getMemberCountsPerBadge4 = /* @__PURE__ */ createRESTModule(getMemberCountsPerBadge3);
var updateBadgesDisplayOrder4 = /* @__PURE__ */ createRESTModule(updateBadgesDisplayOrder3);
var onBadgeAssigned2 = createEventModule(onBadgeAssigned);
var onBadgeUnassigned2 = createEventModule(onBadgeUnassigned);
var onBadgeCreated2 = createEventModule(onBadgeCreated);
var onBadgeDeleted2 = createEventModule(onBadgeDeleted);
var onBadgeUpdated2 = createEventModule(onBadgeUpdated);
export {
  SortOrder,
  WebhookIdentityType,
  assignBadge4 as assignBadge,
  createBadge4 as createBadge,
  deleteBadge4 as deleteBadge,
  getBadge4 as getBadge,
  getMemberCountsPerBadge4 as getMemberCountsPerBadge,
  listBadges4 as listBadges,
  listBadgesPerMember3 as listBadgesPerMember,
  listMembersByBadge3 as listMembersByBadge,
  onBadgeAssigned2 as onBadgeAssigned,
  onBadgeCreated2 as onBadgeCreated,
  onBadgeDeleted2 as onBadgeDeleted,
  onBadgeUnassigned2 as onBadgeUnassigned,
  onBadgeUpdated2 as onBadgeUpdated,
  unassignBadge4 as unassignBadge,
  updateBadge4 as updateBadge,
  updateBadgesDisplayOrder4 as updateBadgesDisplayOrder
};
//# sourceMappingURL=index.mjs.map