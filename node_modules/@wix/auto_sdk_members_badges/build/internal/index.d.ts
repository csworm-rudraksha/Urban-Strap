import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { B as Badge, U as UpdateBadge, L as ListBadgesOptions, a as ListBadgesResponse, A as AssignBadgeResponse, b as ListMembersByBadgeOptions, c as ListMembersResponse, d as ListMembersBadgeIdsResponse, G as GetMemberCountsPerBadgeResponse, e as UpdateBadgesDisplayOrderResponse } from './badges-v3-badge-badges.universal-Bj3tQ02O.js';
export { _ as ActionEvent, r as AssignBadgeRequest, t as AssignBadgesRequest, u as AssignBadgesResponse, s as BadgeAssigned, a4 as BadgeAssignedEnvelope, a6 as BadgeCreatedEnvelope, a7 as BadgeDeletedEnvelope, F as BadgeMemberCount, x as BadgeUnassigned, a5 as BadgeUnassignedEnvelope, a8 as BadgeUpdatedEnvelope, a2 as BaseEventMetadata, p as CountBadgesRequest, q as CountBadgesResponse, C as CreateBadgeRequest, f as CreateBadgeResponse, J as CursorPaging, N as CursorPagingMetadata, O as Cursors, D as DeleteBadgeRequest, o as DeleteBadgeResponse, R as DomainEvent, T as DomainEventBodyOneOf, V as EntityCreatedEvent, Z as EntityDeletedEvent, Y as EntityUpdatedEvent, a3 as EventMetadata, m as GetBadgeRequest, n as GetBadgeResponse, E as GetMemberCountsPerBadgeRequest, a0 as IdentificationData, a1 as IdentificationDataIdOneOf, i as ListBadgesRequest, z as ListMembersBadgeIdsRequest, y as ListMembersRequest, I as ListMembersWithBadgesRequest, K as ListMembersWithBadgesResponse, M as MemberBadgeIds, $ as MessageEnvelope, P as Paging, j as PagingMetadata, Q as QueryBadgesRequest, l as QueryBadgesResponse, X as RestoreInfo, S as SortOrder, k as Sorting, v as UnassignBadgeRequest, w as UnassignBadgeResponse, g as UpdateBadgeRequest, h as UpdateBadgeResponse, H as UpdateBadgesDisplayOrderRequest, W as WebhookIdentityType } from './badges-v3-badge-badges.universal-Bj3tQ02O.js';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';

declare function createBadge$1(httpClient: HttpClient): CreateBadgeSignature;
interface CreateBadgeSignature {
    /**
     * Creates a badge.
     *
     * New badges do not have any badge permissions by default. Wix users can set badge permissions from the [Badges page in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-0#managing-member-badges).
     *
     * If `backgroundColor` or `textColor` are not specified, they default to `"#796EFF"` (purple) and `"#FFFFFF"` (white) respectively.
     * @param - Badge to create.
     * @returns Created badge.
     */
    (badge: Badge): Promise<Badge>;
}
declare function updateBadge$1(httpClient: HttpClient): UpdateBadgeSignature;
interface UpdateBadgeSignature {
    /**
     * Updates a badge.
     *
     * Note that the badge `slug` is based on the badge `title`. If you update the `title`, the `slug` updates accordingly.
     * @param - Badge ID.
     * @returns Updated badge.
     */
    (_id: string, badge: UpdateBadge): Promise<Badge>;
}
declare function listBadges$1(httpClient: HttpClient): ListBadgesSignature;
interface ListBadgesSignature {
    /**
     * Retrieves up to 1,000 badges, given the requested paging.
     *
     * Default `paging.limit` is `100` and `paging.offset` is `0`.
     *
     * This method is not universal and only runs on the backend.
     */
    (options?: ListBadgesOptions | undefined): Promise<ListBadgesResponse>;
}
declare function getBadge$1(httpClient: HttpClient): GetBadgeSignature;
interface GetBadgeSignature {
    /**
     * Retrieves a badge.
     *
     * This method is not universal and only runs on the backend.
     * @param - Badge ID.
     * @returns Badge.
     */
    (_id: string): Promise<Badge>;
}
declare function deleteBadge$1(httpClient: HttpClient): DeleteBadgeSignature;
interface DeleteBadgeSignature {
    /**
     * Deletes a badge.
     * @param - Badge ID.
     */
    (_id: string): Promise<void>;
}
declare function assignBadge$1(httpClient: HttpClient): AssignBadgeSignature;
interface AssignBadgeSignature {
    /**
     * Assigns a badge to site members.
     *
     * Members inherit the badge's permissions when they receive the badge.
     * Badge permissions are added to previous member permissions, they don't replace the existing permissions.
     * @param - Badge ID.
     * @param - Member IDs to assign to the badge.
     */
    (_id: string, memberIds: string[]): Promise<AssignBadgeResponse>;
}
declare function unassignBadge$1(httpClient: HttpClient): UnassignBadgeSignature;
interface UnassignBadgeSignature {
    /**
     * Removes an assigned badge from multiple site members.
     *
     * The members lose the badge's permissions when the badge is removed.
     * @param - Badge ID.
     * @param - List of members to remove.
     */
    (_id: string, memberIds: string[]): Promise<void>;
}
declare function listMembersByBadge$1(httpClient: HttpClient): ListMembersByBadgeSignature;
interface ListMembersByBadgeSignature {
    /**
     * Retrieves up to 1,000 site members assigned to a badge.
     *
     * Default `paging.limit` is `100` and `paging.offset` is `0`.
     *
     * This method is not universal and only runs on the backend.
     * @param - Badge ID.
     */
    (_id: string, options?: ListMembersByBadgeOptions | undefined): Promise<ListMembersResponse>;
}
declare function listBadgesPerMember$1(httpClient: HttpClient): ListBadgesPerMemberSignature;
interface ListBadgesPerMemberSignature {
    /**
     * Retrieves badges assigned to specified members.
     *
     * Members are typically associated with a contact, each having a distinct `memberId` and `contactId`. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.
     *
     * This method is not universal and only runs on the backend.
     * @param - Member IDs to retrieve badges for.
     */
    (memberIds: string[]): Promise<ListMembersBadgeIdsResponse>;
}
declare function getMemberCountsPerBadge$1(httpClient: HttpClient): GetMemberCountsPerBadgeSignature;
interface GetMemberCountsPerBadgeSignature {
    /**
     * Retrieves a member count per badge.
     *
     * This method is not universal function and only runs on the backend.
     */
    (): Promise<GetMemberCountsPerBadgeResponse>;
}
declare function updateBadgesDisplayOrder$1(httpClient: HttpClient): UpdateBadgesDisplayOrderSignature;
interface UpdateBadgesDisplayOrderSignature {
    /**
     * Updates the display order of badges.
     *
     * This method is not universal function and only runs on the backend
     * @param - Badge IDs in the order to display.
     */
    (badgeIds: string[]): Promise<UpdateBadgesDisplayOrderResponse>;
}

declare const createBadge: MaybeContext<BuildRESTFunction<typeof createBadge$1> & typeof createBadge$1>;
declare const updateBadge: MaybeContext<BuildRESTFunction<typeof updateBadge$1> & typeof updateBadge$1>;
declare const listBadges: MaybeContext<BuildRESTFunction<typeof listBadges$1> & typeof listBadges$1>;
declare const getBadge: MaybeContext<BuildRESTFunction<typeof getBadge$1> & typeof getBadge$1>;
declare const deleteBadge: MaybeContext<BuildRESTFunction<typeof deleteBadge$1> & typeof deleteBadge$1>;
declare const assignBadge: MaybeContext<BuildRESTFunction<typeof assignBadge$1> & typeof assignBadge$1>;
declare const unassignBadge: MaybeContext<BuildRESTFunction<typeof unassignBadge$1> & typeof unassignBadge$1>;
declare const listMembersByBadge: MaybeContext<BuildRESTFunction<typeof listMembersByBadge$1> & typeof listMembersByBadge$1>;
declare const listBadgesPerMember: MaybeContext<BuildRESTFunction<typeof listBadgesPerMember$1> & typeof listBadgesPerMember$1>;
declare const getMemberCountsPerBadge: MaybeContext<BuildRESTFunction<typeof getMemberCountsPerBadge$1> & typeof getMemberCountsPerBadge$1>;
declare const updateBadgesDisplayOrder: MaybeContext<BuildRESTFunction<typeof updateBadgesDisplayOrder$1> & typeof updateBadgesDisplayOrder$1>;
/**
 * Triggered when a member receives a badge.
 */
declare const onBadgeAssigned: ReturnType<typeof createEventModule<typeof publicOnBadgeAssigned>>;
/**
 * Triggered when a member's badge is removed.
 */
declare const onBadgeUnassigned: ReturnType<typeof createEventModule<typeof publicOnBadgeUnassigned>>;
/**
 * Triggered when a badge is created.
 */
declare const onBadgeCreated: ReturnType<typeof createEventModule<typeof publicOnBadgeCreated>>;
/**
 * Triggered when a badge is deleted.
 */
declare const onBadgeDeleted: ReturnType<typeof createEventModule<typeof publicOnBadgeDeleted>>;
/**
 * Triggered when a badge is updated.
 */
declare const onBadgeUpdated: ReturnType<typeof createEventModule<typeof publicOnBadgeUpdated>>;

export { AssignBadgeResponse, Badge, GetMemberCountsPerBadgeResponse, ListBadgesOptions, ListBadgesResponse, ListMembersBadgeIdsResponse, ListMembersByBadgeOptions, ListMembersResponse, UpdateBadge, UpdateBadgesDisplayOrderResponse, assignBadge, createBadge, deleteBadge, getBadge, getMemberCountsPerBadge, listBadges, listBadgesPerMember, listMembersByBadge, onBadgeAssigned, onBadgeCreated, onBadgeDeleted, onBadgeUnassigned, onBadgeUpdated, unassignBadge, updateBadge, updateBadgesDisplayOrder };
