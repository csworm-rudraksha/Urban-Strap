{"version":3,"sources":["../../index.ts","../../src/badges-v3-badge-badges.public.ts","../../src/badges-v3-badge-badges.universal.ts","../../src/badges-v3-badge-badges.http.ts","../../src/badges-v3-badge-badges.context.ts"],"sourcesContent":["export * from './src/badges-v3-badge-badges.context.js';\n","import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { EventDefinition, HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  AssignBadgeResponse,\n  Badge,\n  BadgeAssignedEnvelope,\n  BadgeCreatedEnvelope,\n  BadgeDeletedEnvelope,\n  BadgeUnassignedEnvelope,\n  BadgeUpdatedEnvelope,\n  GetMemberCountsPerBadgeResponse,\n  ListBadgesOptions,\n  ListBadgesResponse,\n  ListMembersBadgeIdsResponse,\n  ListMembersByBadgeOptions,\n  ListMembersResponse,\n  UpdateBadge,\n  UpdateBadgesDisplayOrderResponse,\n  assignBadge as universalAssignBadge,\n  createBadge as universalCreateBadge,\n  deleteBadge as universalDeleteBadge,\n  getBadge as universalGetBadge,\n  getMemberCountsPerBadge as universalGetMemberCountsPerBadge,\n  listBadges as universalListBadges,\n  listBadgesPerMember as universalListBadgesPerMember,\n  listMembersByBadge as universalListMembersByBadge,\n  unassignBadge as universalUnassignBadge,\n  updateBadge as universalUpdateBadge,\n  updateBadgesDisplayOrder as universalUpdateBadgesDisplayOrder,\n} from './badges-v3-badge-badges.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/members' };\n\nexport function createBadge(httpClient: HttpClient): CreateBadgeSignature {\n  return (\n    badge: NonNullablePaths<Badge, `backgroundColor` | `textColor` | `title`>\n  ) =>\n    universalCreateBadge(\n      badge,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface CreateBadgeSignature {\n  /**\n   * Creates a badge.\n   *\n   * New badges do not have any badge permissions by default. Wix users can set badge permissions from the [Badges page in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-0#managing-member-badges).\n   *\n   * If `backgroundColor` or `textColor` are not specified, they default to `\"#796EFF\"` (purple) and `\"#FFFFFF\"` (white) respectively.\n   * @param - Badge to create.\n   * @returns Created badge.\n   */\n  (badge: Badge): Promise<Badge>;\n}\n\nexport function updateBadge(httpClient: HttpClient): UpdateBadgeSignature {\n  return (_id: string, badge: UpdateBadge) =>\n    universalUpdateBadge(\n      _id,\n      badge,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateBadgeSignature {\n  /**\n   * Updates a badge.\n   *\n   * Note that the badge `slug` is based on the badge `title`. If you update the `title`, the `slug` updates accordingly.\n   * @param - Badge ID.\n   * @returns Updated badge.\n   */\n  (_id: string, badge: UpdateBadge): Promise<Badge>;\n}\n\nexport function listBadges(httpClient: HttpClient): ListBadgesSignature {\n  return (options?: ListBadgesOptions) =>\n    universalListBadges(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListBadgesSignature {\n  /**\n   * Retrieves up to 1,000 badges, given the requested paging.\n   *\n   * Default `paging.limit` is `100` and `paging.offset` is `0`.\n   *\n   * This method is not universal and only runs on the backend.\n   */\n  (options?: ListBadgesOptions | undefined): Promise<ListBadgesResponse>;\n}\n\nexport function getBadge(httpClient: HttpClient): GetBadgeSignature {\n  return (_id: string) =>\n    universalGetBadge(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetBadgeSignature {\n  /**\n   * Retrieves a badge.\n   *\n   * This method is not universal and only runs on the backend.\n   * @param - Badge ID.\n   * @returns Badge.\n   */\n  (_id: string): Promise<Badge>;\n}\n\nexport function deleteBadge(httpClient: HttpClient): DeleteBadgeSignature {\n  return (_id: string) =>\n    universalDeleteBadge(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteBadgeSignature {\n  /**\n   * Deletes a badge.\n   * @param - Badge ID.\n   */\n  (_id: string): Promise<void>;\n}\n\nexport function assignBadge(httpClient: HttpClient): AssignBadgeSignature {\n  return (_id: string, memberIds: string[]) =>\n    universalAssignBadge(\n      _id,\n      memberIds,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface AssignBadgeSignature {\n  /**\n   * Assigns a badge to site members.\n   *\n   * Members inherit the badge's permissions when they receive the badge.\n   * Badge permissions are added to previous member permissions, they don't replace the existing permissions.\n   * @param - Badge ID.\n   * @param - Member IDs to assign to the badge.\n   */\n  (_id: string, memberIds: string[]): Promise<AssignBadgeResponse>;\n}\n\nexport function unassignBadge(httpClient: HttpClient): UnassignBadgeSignature {\n  return (_id: string, memberIds: string[]) =>\n    universalUnassignBadge(\n      _id,\n      memberIds,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UnassignBadgeSignature {\n  /**\n   * Removes an assigned badge from multiple site members.\n   *\n   * The members lose the badge's permissions when the badge is removed.\n   * @param - Badge ID.\n   * @param - List of members to remove.\n   */\n  (_id: string, memberIds: string[]): Promise<void>;\n}\n\nexport function listMembersByBadge(\n  httpClient: HttpClient\n): ListMembersByBadgeSignature {\n  return (_id: string, options?: ListMembersByBadgeOptions) =>\n    universalListMembersByBadge(\n      _id,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListMembersByBadgeSignature {\n  /**\n   * Retrieves up to 1,000 site members assigned to a badge.\n   *\n   * Default `paging.limit` is `100` and `paging.offset` is `0`.\n   *\n   * This method is not universal and only runs on the backend.\n   * @param - Badge ID.\n   */\n  (\n    _id: string,\n    options?: ListMembersByBadgeOptions | undefined\n  ): Promise<ListMembersResponse>;\n}\n\nexport function listBadgesPerMember(\n  httpClient: HttpClient\n): ListBadgesPerMemberSignature {\n  return (memberIds: string[]) =>\n    universalListBadgesPerMember(\n      memberIds,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListBadgesPerMemberSignature {\n  /**\n   * Retrieves badges assigned to specified members.\n   *\n   * Members are typically associated with a contact, each having a distinct `memberId` and `contactId`. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.\n   *\n   * This method is not universal and only runs on the backend.\n   * @param - Member IDs to retrieve badges for.\n   */\n  (memberIds: string[]): Promise<ListMembersBadgeIdsResponse>;\n}\n\nexport function getMemberCountsPerBadge(\n  httpClient: HttpClient\n): GetMemberCountsPerBadgeSignature {\n  return () =>\n    universalGetMemberCountsPerBadge(\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetMemberCountsPerBadgeSignature {\n  /**\n   * Retrieves a member count per badge.\n   *\n   * This method is not universal function and only runs on the backend.\n   */\n  (): Promise<GetMemberCountsPerBadgeResponse>;\n}\n\nexport function updateBadgesDisplayOrder(\n  httpClient: HttpClient\n): UpdateBadgesDisplayOrderSignature {\n  return (badgeIds: string[]) =>\n    universalUpdateBadgesDisplayOrder(\n      badgeIds,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateBadgesDisplayOrderSignature {\n  /**\n   * Updates the display order of badges.\n   *\n   * This method is not universal function and only runs on the backend\n   * @param - Badge IDs in the order to display.\n   */\n  (badgeIds: string[]): Promise<UpdateBadgesDisplayOrderResponse>;\n}\n\nexport const onBadgeAssigned = EventDefinition(\n  'wix.badges.v3.badge_badge_assigned',\n  true,\n  (event: BadgeAssignedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [{ path: 'metadata.eventTime' }],\n        },\n      ])\n    )\n)<BadgeAssignedEnvelope>();\nexport const onBadgeUnassigned = EventDefinition(\n  'wix.badges.v3.badge_badge_unassigned',\n  true,\n  (event: BadgeUnassignedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [{ path: 'metadata.eventTime' }],\n        },\n      ])\n    )\n)<BadgeUnassignedEnvelope>();\nexport const onBadgeCreated = EventDefinition(\n  'wix.badges.v3.badge_created',\n  true,\n  (event: BadgeCreatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<BadgeCreatedEnvelope>();\nexport const onBadgeDeleted = EventDefinition(\n  'wix.badges.v3.badge_deleted',\n  true,\n  (event: BadgeDeletedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'undefined.createdDate' },\n            { path: 'undefined.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<BadgeDeletedEnvelope>();\nexport const onBadgeUpdated = EventDefinition(\n  'wix.badges.v3.badge_updated',\n  true,\n  (event: BadgeUpdatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<BadgeUpdatedEnvelope>();\n\nexport {\n  ActionEvent,\n  AssignBadgeRequest,\n  AssignBadgeResponse,\n  AssignBadgesRequest,\n  AssignBadgesResponse,\n  Badge,\n  BadgeAssigned,\n  BadgeAssignedEnvelope,\n  BadgeCreatedEnvelope,\n  BadgeDeletedEnvelope,\n  BadgeMemberCount,\n  BadgeUnassigned,\n  BadgeUnassignedEnvelope,\n  BadgeUpdatedEnvelope,\n  BaseEventMetadata,\n  CountBadgesRequest,\n  CountBadgesResponse,\n  CreateBadgeRequest,\n  CreateBadgeResponse,\n  CursorPaging,\n  CursorPagingMetadata,\n  Cursors,\n  DeleteBadgeRequest,\n  DeleteBadgeResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  EventMetadata,\n  GetBadgeRequest,\n  GetBadgeResponse,\n  GetMemberCountsPerBadgeRequest,\n  GetMemberCountsPerBadgeResponse,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  ListBadgesOptions,\n  ListBadgesRequest,\n  ListBadgesResponse,\n  ListMembersBadgeIdsRequest,\n  ListMembersBadgeIdsResponse,\n  ListMembersByBadgeOptions,\n  ListMembersRequest,\n  ListMembersResponse,\n  ListMembersWithBadgesRequest,\n  ListMembersWithBadgesResponse,\n  MemberBadgeIds,\n  MessageEnvelope,\n  Paging,\n  PagingMetadata,\n  QueryBadgesRequest,\n  QueryBadgesResponse,\n  RestoreInfo,\n  SortOrder,\n  Sorting,\n  UnassignBadgeRequest,\n  UnassignBadgeResponse,\n  UpdateBadge,\n  UpdateBadgeRequest,\n  UpdateBadgeResponse,\n  UpdateBadgesDisplayOrderRequest,\n  UpdateBadgesDisplayOrderResponse,\n  WebhookIdentityType,\n} from './badges-v3-badge-badges.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixBadgesV3Badge from './badges-v3-badge-badges.http.js';\n\nexport interface Badge {\n  /**\n   * Badge ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string;\n  /** Text displayed on the badge. */\n  title?: string | null;\n  /** Badge description. */\n  description?: string | null;\n  /**\n   * Badge background color in hexadecimal RGB format. Uppercase letters only.\n   *\n   * Default: `#796EFF ` (purple).\n   * @format COLOR_HEX\n   */\n  backgroundColor?: string | null;\n  /**\n   * Badge text color in hexadecimal RGB format. Uppercase letters only.\n   *\n   * Default: `\"#FFFFFF\"` (white).\n   * @format COLOR_HEX\n   */\n  textColor?: string | null;\n  /**\n   * Badge icon as an SVG image. One of:\n   *\n   * - An external web URL in the following format: `http(s)://<image url>`.\n   * - The [`sourceUrl`](https://dev.wix.com/docs/sdk/backend-modules/media/files/get-file-descriptor) for a Wix Media Manager file. Wix Media Manager file names in a `wix:image://...` format are not supported.\n   */\n  icon?: string | null;\n  /**\n   * Whether the badge has special permissions\n   * to access specific members-only pages. <br/><br/>\n   * When `true`, members with the badge receive special permissions,\n   * and Wix users can\n   * [manage badge permissions in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-2#managing-member-badges).\n   * When `false`, members with the badge receive no special permissions.\n   */\n  permissionsEnabled?: boolean | null;\n  /**\n   * Slugified name. Used to represent the badge in a URL.\n   * @readonly\n   */\n  slug?: string | null;\n  /**\n   * Date the badge was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date the badge was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n}\n\nexport interface CreateBadgeRequest {\n  /** Badge to create. */\n  badge: Badge;\n}\n\nexport interface CreateBadgeResponse {\n  /** Created badge. */\n  badge?: Badge;\n}\n\nexport interface UpdateBadgeRequest {\n  /** Badge to update. */\n  badge: Badge;\n}\n\nexport interface UpdateBadgeResponse {\n  /** Updated badge. */\n  badge?: Badge;\n}\n\nexport interface ListBadgesRequest {\n  /** Pagination options. */\n  paging?: Paging;\n}\n\nexport interface Paging {\n  /** Number of items to load. */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface ListBadgesResponse {\n  /** Retrieved badges. */\n  badges?: Badge[];\n  /** Metadata for the paginated results. */\n  metadata?: PagingMetadata;\n}\n\nexport interface PagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Offset that was requested. */\n  offset?: number | null;\n  /** Total number of items that match the query. */\n  total?: number | null;\n  /** Flag that indicates the server failed to calculate the `total` field. */\n  tooManyToCount?: boolean | null;\n}\n\nexport interface QueryBadgesRequest {\n  /**\n   * Filter options.\n   * Currently supported fields for filtering:\n   * - `id`\n   * - `title`\n   * - `slug`\n   * For more details on how to use filter, see [API Query Language: Filters](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).\n   */\n  filter?: Record<string, any> | null;\n  /**\n   * Sorting options.\n   * For more details on how to use sorting,\n   * see [API Query Language: Sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting)\n   */\n  sort?: Sorting[];\n  /** Pagination options.  */\n  paging?: Paging;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrder;\n}\n\nexport enum SortOrder {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\nexport interface QueryBadgesResponse {\n  /** Retrieved badges. */\n  badges?: Badge[];\n  /** Metadata for the paginated results. */\n  metadata?: PagingMetadata;\n}\n\nexport interface GetBadgeRequest {\n  /**\n   * Badge ID.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface GetBadgeResponse {\n  /** Badge. */\n  badge?: Badge;\n}\n\nexport interface DeleteBadgeRequest {\n  /**\n   * Badge ID.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface DeleteBadgeResponse {}\n\nexport interface CountBadgesRequest {\n  /**\n   * Filter options.\n   * Currently supported fields for filtering:\n   * - `id`\n   * - `title`\n   * - `slug`\n   * For more details on how to use filter, see [API Query Language: Filters](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).\n   */\n  filter?: Record<string, any> | null;\n}\n\nexport interface CountBadgesResponse {\n  /** Amount of badges. */\n  count?: string;\n}\n\nexport interface AssignBadgeRequest {\n  /**\n   * Badge ID.\n   * @format GUID\n   */\n  _id: string;\n  /**\n   * Member IDs to assign to the badge.\n   * @format GUID\n   */\n  memberIds: string[];\n}\n\nexport interface AssignBadgeResponse {\n  /**\n   * Member IDs assigned to the badge.\n   * @format GUID\n   */\n  memberIds?: string[];\n}\n\nexport interface BadgeAssigned {\n  /**\n   * ID of the member who received the badge.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface AssignBadgesRequest {\n  /**\n   * Badge IDs to assign to the member.\n   * @format GUID\n   * @minSize 1\n   * @maxSize 100\n   */\n  ids?: string[];\n  /**\n   * Member ID.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface AssignBadgesResponse {\n  /**\n   * Badge IDs newly assigned to the member.\n   * @format GUID\n   */\n  ids?: string[];\n}\n\nexport interface UnassignBadgeRequest {\n  /**\n   * Badge ID.\n   * @format GUID\n   */\n  _id: string;\n  /**\n   * List of members to remove.\n   * @format GUID\n   */\n  memberIds: string[];\n}\n\nexport interface UnassignBadgeResponse {}\n\nexport interface BadgeUnassigned {\n  /**\n   * ID of the member who lost the badge.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface ListMembersRequest {\n  /**\n   * Badge ID.\n   * @format GUID\n   */\n  _id: string;\n  /** Pagination options. */\n  paging?: Paging;\n}\n\nexport interface ListMembersResponse {\n  /**\n   * Member IDs assigned to the badge.\n   * @format GUID\n   */\n  memberIds?: string[];\n  /** Metadata for the paginated results. */\n  metadata?: PagingMetadata;\n}\n\nexport interface ListMembersBadgeIdsRequest {\n  /**\n   * Member IDs to retrieve badges for.\n   * @format GUID\n   * @minSize 1\n   * @maxSize 100\n   */\n  memberIds: string[];\n}\n\nexport interface ListMembersBadgeIdsResponse {\n  /** List of members and the badges they're assigned to. */\n  memberBadgeIds?: MemberBadgeIds[];\n}\n\nexport interface MemberBadgeIds {\n  /**\n   * Member ID.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * List of badges the member is assigned to.\n   * @format GUID\n   */\n  badgeIds?: string[];\n}\n\nexport interface GetMemberCountsPerBadgeRequest {}\n\nexport interface GetMemberCountsPerBadgeResponse {\n  /** Badges and the amount of members who have each badge. */\n  badgeMemberCounts?: BadgeMemberCount[];\n}\n\nexport interface BadgeMemberCount {\n  /**\n   * Badge ID.\n   * @format GUID\n   */\n  badgeId?: string;\n  /** Badge member count. */\n  memberCount?: number;\n}\n\nexport interface UpdateBadgesDisplayOrderRequest {\n  /**\n   * Badge IDs in the order to display.\n   * @format GUID\n   * @minSize 1\n   */\n  badgeIds: string[];\n}\n\nexport interface UpdateBadgesDisplayOrderResponse {\n  /** Reordered badges list. */\n  badges?: Badge[];\n}\n\nexport interface ListMembersWithBadgesRequest {\n  /** Cursor paging options. */\n  paging?: CursorPaging;\n}\n\nexport interface CursorPaging {\n  /**\n   * Maximum number of items to return in the results.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 16000\n   */\n  cursor?: string | null;\n}\n\nexport interface ListMembersWithBadgesResponse {\n  /**\n   * List of members.\n   * @format GUID\n   */\n  memberIds?: string[];\n  /** Metadata for the paginated results. */\n  pagingMetadata?: CursorPagingMetadata;\n}\n\nexport interface CursorPagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Cursor strings that point to the next page, previous page, or both. */\n  cursors?: Cursors;\n  /**\n   * Whether there are more pages to retrieve following the current page.\n   *\n   * + `true`: Another page of results can be retrieved.\n   * + `false`: This is the last page.\n   */\n  hasNext?: boolean | null;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor string pointing to the next page in the list of results.\n   * @maxLength 16000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to the previous page in the list of results.\n   * @maxLength 16000\n   */\n  prev?: string | null;\n}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /**\n   * Unique event ID.\n   * Allows clients to ignore duplicate webhooks.\n   */\n  _id?: string;\n  /**\n   * Assumes actions are also always typed to an entity_type\n   * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction\n   */\n  entityFqdn?: string;\n  /**\n   * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\n   * This is although the created/updated/deleted notion is duplication of the oneof types\n   * Example: created/updated/deleted/started/completed/email_opened\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number defining the order of updates to the underlying entity.\n   * For example, given that some entity was updated at 16:00 and than again at 16:01,\n   * it is guaranteed that the sequence number of the second update is strictly higher than the first.\n   * As the consumer, you can use this value to ensure that you handle messages in the correct order.\n   * To do so, you will need to persist this number on your end, and compare the sequence number from the\n   * message against the one you have stored. Given that the stored number is higher, you should ignore the message.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityType;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /**\n   * Unique event ID.\n   * Allows clients to ignore duplicate webhooks.\n   */\n  _id?: string;\n  /**\n   * Assumes actions are also always typed to an entity_type\n   * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction\n   */\n  entityFqdn?: string;\n  /**\n   * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\n   * This is although the created/updated/deleted notion is duplication of the oneof types\n   * Example: created/updated/deleted/started/completed/email_opened\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number defining the order of updates to the underlying entity.\n   * For example, given that some entity was updated at 16:00 and than again at 16:01,\n   * it is guaranteed that the sequence number of the second update is strictly higher than the first.\n   * As the consumer, you can use this value to ensure that you handle messages in the correct order.\n   * To do so, you will need to persist this number on your end, and compare the sequence number from the\n   * message against the one you have stored. Given that the stored number is higher, you should ignore the message.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface BadgeAssignedEnvelope {\n  data: BadgeAssigned;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a member receives a badge.\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @permissionId BADGES.BADGE_READ\n * @webhook\n * @eventType wix.badges.v3.badge_badge_assigned\n * @serviceIdentifier com.wixpress.badges.v3.BadgesServiceV3\n * @slug badge_assigned\n */\nexport declare function onBadgeAssigned(\n  handler: (event: BadgeAssignedEnvelope) => void | Promise<void>\n): void;\n\nexport interface BadgeUnassignedEnvelope {\n  data: BadgeUnassigned;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a member's badge is removed.\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @permissionId BADGES.BADGE_READ\n * @webhook\n * @eventType wix.badges.v3.badge_badge_unassigned\n * @serviceIdentifier com.wixpress.badges.v3.BadgesServiceV3\n * @slug badge_unassigned\n */\nexport declare function onBadgeUnassigned(\n  handler: (event: BadgeUnassignedEnvelope) => void | Promise<void>\n): void;\n\nexport interface BadgeCreatedEnvelope {\n  entity: Badge;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a badge is created.\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @permissionId BADGES.BADGE_READ\n * @webhook\n * @eventType wix.badges.v3.badge_created\n * @serviceIdentifier com.wixpress.badges.v3.BadgesServiceV3\n * @slug created\n */\nexport declare function onBadgeCreated(\n  handler: (event: BadgeCreatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface BadgeDeletedEnvelope {\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a badge is deleted.\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @permissionId BADGES.BADGE_READ\n * @webhook\n * @eventType wix.badges.v3.badge_deleted\n * @serviceIdentifier com.wixpress.badges.v3.BadgesServiceV3\n * @slug deleted\n */\nexport declare function onBadgeDeleted(\n  handler: (event: BadgeDeletedEnvelope) => void | Promise<void>\n): void;\n\nexport interface BadgeUpdatedEnvelope {\n  entity: Badge;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a badge is updated.\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @permissionId BADGES.BADGE_READ\n * @webhook\n * @eventType wix.badges.v3.badge_updated\n * @serviceIdentifier com.wixpress.badges.v3.BadgesServiceV3\n * @slug updated\n */\nexport declare function onBadgeUpdated(\n  handler: (event: BadgeUpdatedEnvelope) => void | Promise<void>\n): void;\n\ntype BadgeNonNullablePaths = `_id`;\n\n/**\n * Creates a badge.\n *\n * New badges do not have any badge permissions by default. Wix users can set badge permissions from the [Badges page in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-0#managing-member-badges).\n *\n * If `backgroundColor` or `textColor` are not specified, they default to `\"#796EFF\"` (purple) and `\"#FFFFFF\"` (white) respectively.\n * @param badge - Badge to create.\n * @public\n * @requiredField badge\n * @requiredField badge.backgroundColor\n * @requiredField badge.textColor\n * @requiredField badge.title\n * @permissionId BADGES.BADGE_CREATE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @applicableIdentity APP\n * @returns Created badge.\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.CreateBadge\n */\nexport async function createBadge(\n  badge: NonNullablePaths<Badge, `backgroundColor` | `textColor` | `title`>\n): Promise<NonNullablePaths<Badge, BadgeNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ badge: badge });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.createBadge(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.badge!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { badge: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['badge']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates a badge.\n *\n * Note that the badge `slug` is based on the badge `title`. If you update the `title`, the `slug` updates accordingly.\n * @param _id - Badge ID.\n * @public\n * @requiredField _id\n * @requiredField badge\n * @permissionId BADGES.BADGE_UPDATE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @applicableIdentity APP\n * @returns Updated badge.\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.UpdateBadge\n */\nexport async function updateBadge(\n  _id: string,\n  badge: UpdateBadge\n): Promise<NonNullablePaths<Badge, BadgeNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    badge: { ...badge, id: _id },\n  });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.updateBadge(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.badge!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { badge: '$[1]' },\n        explicitPathsToArguments: { 'badge.id': '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'badge']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateBadge {\n  /**\n   * Badge ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string;\n  /** Text displayed on the badge. */\n  title?: string | null;\n  /** Badge description. */\n  description?: string | null;\n  /**\n   * Badge background color in hexadecimal RGB format. Uppercase letters only.\n   *\n   * Default: `#796EFF ` (purple).\n   * @format COLOR_HEX\n   */\n  backgroundColor?: string | null;\n  /**\n   * Badge text color in hexadecimal RGB format. Uppercase letters only.\n   *\n   * Default: `\"#FFFFFF\"` (white).\n   * @format COLOR_HEX\n   */\n  textColor?: string | null;\n  /**\n   * Badge icon as an SVG image. One of:\n   *\n   * - An external web URL in the following format: `http(s)://<image url>`.\n   * - The [`sourceUrl`](https://dev.wix.com/docs/sdk/backend-modules/media/files/get-file-descriptor) for a Wix Media Manager file. Wix Media Manager file names in a `wix:image://...` format are not supported.\n   */\n  icon?: string | null;\n  /**\n   * Whether the badge has special permissions\n   * to access specific members-only pages. <br/><br/>\n   * When `true`, members with the badge receive special permissions,\n   * and Wix users can\n   * [manage badge permissions in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-2#managing-member-badges).\n   * When `false`, members with the badge receive no special permissions.\n   */\n  permissionsEnabled?: boolean | null;\n  /**\n   * Slugified name. Used to represent the badge in a URL.\n   * @readonly\n   */\n  slug?: string | null;\n  /**\n   * Date the badge was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date the badge was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n}\n\n/**\n * Retrieves up to 1,000 badges, given the requested paging.\n *\n * Default `paging.limit` is `100` and `paging.offset` is `0`.\n *\n * This method is not universal and only runs on the backend.\n * @public\n * @permissionId BADGES.BADGE_READ\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.ListBadges\n */\nexport async function listBadges(\n  options?: ListBadgesOptions\n): Promise<\n  NonNullablePaths<\n    ListBadgesResponse,\n    {\n      [P in BadgeNonNullablePaths]: `badges.${number}.${P}`;\n    }[BadgeNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    paging: options?.paging,\n  });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.listBadges(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { paging: '$[0].paging' },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ListBadgesOptions {\n  /** Pagination options.  */\n  paging?: Paging;\n}\n\n/**\n * Retrieves a badge.\n *\n * This method is not universal and only runs on the backend.\n * @param _id - Badge ID.\n * @public\n * @requiredField _id\n * @permissionId BADGES.BADGE_READ\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @returns Badge.\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.GetBadge\n */\nexport async function getBadge(\n  _id: string\n): Promise<NonNullablePaths<Badge, BadgeNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.getBadge(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.badge!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Deletes a badge.\n * @param _id - Badge ID.\n * @public\n * @requiredField _id\n * @permissionId BADGES.BADGE_DELETE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @applicableIdentity APP\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.DeleteBadge\n */\nexport async function deleteBadge(_id: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.deleteBadge(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Assigns a badge to site members.\n *\n * Members inherit the badge's permissions when they receive the badge.\n * Badge permissions are added to previous member permissions, they don't replace the existing permissions.\n * @param _id - Badge ID.\n * @param memberIds - Member IDs to assign to the badge.\n * @public\n * @requiredField _id\n * @requiredField memberIds\n * @permissionId BADGES.BADGE_ASSIGN\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @applicableIdentity APP\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.AssignBadge\n */\nexport async function assignBadge(\n  _id: string,\n  memberIds: string[]\n): Promise<NonNullablePaths<AssignBadgeResponse, `memberIds`>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    memberIds: memberIds,\n  });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.assignBadge(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', memberIds: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'memberIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Removes an assigned badge from multiple site members.\n *\n * The members lose the badge's permissions when the badge is removed.\n * @param _id - Badge ID.\n * @param memberIds - List of members to remove.\n * @public\n * @requiredField _id\n * @requiredField memberIds\n * @permissionId BADGES.BADGE_ASSIGN\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @applicableIdentity APP\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.UnassignBadge\n */\nexport async function unassignBadge(\n  _id: string,\n  memberIds: string[]\n): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    memberIds: memberIds,\n  });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.unassignBadge(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', memberIds: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'memberIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves up to 1,000 site members assigned to a badge.\n *\n * Default `paging.limit` is `100` and `paging.offset` is `0`.\n *\n * This method is not universal and only runs on the backend.\n * @param _id - Badge ID.\n * @public\n * @requiredField _id\n * @permissionId BADGES.BADGE_READ_MEMBERS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.ListMembers\n */\nexport async function listMembersByBadge(\n  _id: string,\n  options?: ListMembersByBadgeOptions\n): Promise<NonNullablePaths<ListMembersResponse, `memberIds`>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    paging: options?.paging,\n  });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.listMembers(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', paging: '$[1].paging' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ListMembersByBadgeOptions {\n  /** Pagination options. */\n  paging?: Paging;\n}\n\n/**\n * Retrieves badges assigned to specified members.\n *\n * Members are typically associated with a contact, each having a distinct `memberId` and `contactId`. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.\n *\n * This method is not universal and only runs on the backend.\n * @param memberIds - Member IDs to retrieve badges for.\n * @public\n * @requiredField memberIds\n * @permissionId BADGES.BADGE_READ_MEMBERS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.ListMembersBadgeIds\n */\nexport async function listBadgesPerMember(\n  memberIds: string[]\n): Promise<\n  NonNullablePaths<\n    ListMembersBadgeIdsResponse,\n    | `memberBadgeIds`\n    | `memberBadgeIds.${number}.memberId`\n    | `memberBadgeIds.${number}.badgeIds`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    memberIds: memberIds,\n  });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.listMembersBadgeIds(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { memberIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['memberIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a member count per badge.\n *\n * This method is not universal function and only runs on the backend.\n * @public\n * @permissionId BADGES.BADGE_READ_MEMBERS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @permissionScope Read Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-BADGES\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.GetMemberCountsPerBadge\n */\nexport async function getMemberCountsPerBadge(): Promise<\n  NonNullablePaths<\n    GetMemberCountsPerBadgeResponse,\n    | `badgeMemberCounts`\n    | `badgeMemberCounts.${number}.badgeId`\n    | `badgeMemberCounts.${number}.memberCount`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts = ambassadorWixBadgesV3Badge.getMemberCountsPerBadge(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates the display order of badges.\n *\n * This method is not universal function and only runs on the backend\n * @param badgeIds - Badge IDs in the order to display.\n * @public\n * @requiredField badgeIds\n * @permissionId BADGES.BADGE_UPDATE_DISPLAY_ORDER\n * @permissionScope Manage Badges\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-BADGES\n * @applicableIdentity APP\n * @fqn com.wixpress.badges.v3.BadgesServiceV3.UpdateBadgesDisplayOrder\n */\nexport async function updateBadgesDisplayOrder(\n  badgeIds: string[]\n): Promise<\n  NonNullablePaths<\n    UpdateBadgesDisplayOrderResponse,\n    {\n      [P in BadgeNonNullablePaths]: `badges.${number}.${P}`;\n    }[BadgeNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ badgeIds: badgeIds });\n\n  const reqOpts = ambassadorWixBadgesV3Badge.updateBadgesDisplayOrder(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { badgeIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['badgeIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressBadgesV3BadgesServiceV3Url(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/members/v3/badges',\n        destPath: '/v3/badges',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/members-badges-server/v3',\n        destPath: '/v3',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_members_badges';\n\n/**\n * Creates a badge.\n *\n * New badges do not have any badge permissions by default. Wix users can set badge permissions from the [Badges page in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-0#managing-member-badges).\n *\n * If `backgroundColor` or `textColor` are not specified, they default to `\"#796EFF\"` (purple) and `\"#FFFFFF\"` (white) respectively.\n */\nexport function createBadge(payload: object): RequestOptionsFactory<any> {\n  function __createBadge({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'badge.createdDate' }, { path: 'badge.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.CreateBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badge.createdDate' },\n              { path: 'badge.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createBadge;\n}\n\n/**\n * Updates a badge.\n *\n * Note that the badge `slug` is based on the badge `title`. If you update the `title`, the `slug` updates accordingly.\n */\nexport function updateBadge(payload: object): RequestOptionsFactory<any> {\n  function __updateBadge({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'badge.createdDate' }, { path: 'badge.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'PATCH' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.UpdateBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{badge.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badge.createdDate' },\n              { path: 'badge.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateBadge;\n}\n\n/**\n * Retrieves up to 1,000 badges, given the requested paging.\n *\n * Default `paging.limit` is `100` and `paging.offset` is `0`.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function listBadges(payload: object): RequestOptionsFactory<any> {\n  function __listBadges({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.ListBadges',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badges.createdDate' },\n              { path: 'badges.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listBadges;\n}\n\n/**\n * Retrieves a badge.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function getBadge(payload: object): RequestOptionsFactory<any> {\n  function __getBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.GetBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badge.createdDate' },\n              { path: 'badge.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getBadge;\n}\n\n/** Deletes a badge. */\nexport function deleteBadge(payload: object): RequestOptionsFactory<any> {\n  function __deleteBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.DeleteBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteBadge;\n}\n\n/**\n * Assigns a badge to site members.\n *\n * Members inherit the badge's permissions when they receive the badge.\n * Badge permissions are added to previous member permissions, they don't replace the existing permissions.\n */\nexport function assignBadge(payload: object): RequestOptionsFactory<any> {\n  function __assignBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.AssignBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}/members',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __assignBadge;\n}\n\n/**\n * Removes an assigned badge from multiple site members.\n *\n * The members lose the badge's permissions when the badge is removed.\n */\nexport function unassignBadge(payload: object): RequestOptionsFactory<any> {\n  function __unassignBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.UnassignBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}/members',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __unassignBadge;\n}\n\n/**\n * Retrieves up to 1,000 site members assigned to a badge.\n *\n * Default `paging.limit` is `100` and `paging.offset` is `0`.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function listMembers(payload: object): RequestOptionsFactory<any> {\n  function __listMembers({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.ListMembers',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/{id}/members',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __listMembers;\n}\n\n/**\n * Retrieves badges assigned to specified members.\n *\n * Members are typically associated with a contact, each having a distinct `memberId` and `contactId`. When passing the ID as a parameter, avoid presuming the IDs are identical since they represent separate entities.\n *\n * This method is not universal and only runs on the backend.\n */\nexport function listMembersBadgeIds(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __listMembersBadgeIds({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.badges.v3.BadgesServiceV3.ListMembersBadgeIds',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/members',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __listMembersBadgeIds;\n}\n\n/**\n * Retrieves a member count per badge.\n *\n * This method is not universal function and only runs on the backend.\n */\nexport function getMemberCountsPerBadge(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __getMemberCountsPerBadge({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.badges.v3.BadgesServiceV3.GetMemberCountsPerBadge',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/members/count',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __getMemberCountsPerBadge;\n}\n\n/**\n * Updates the display order of badges.\n *\n * This method is not universal function and only runs on the backend\n */\nexport function updateBadgesDisplayOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updateBadgesDisplayOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.badges.v3.badge',\n      method: 'PATCH' as any,\n      methodFqn:\n        'com.wixpress.badges.v3.BadgesServiceV3.UpdateBadgesDisplayOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressBadgesV3BadgesServiceV3Url({\n        protoPath: '/v3/badges/order',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'badges.createdDate' },\n              { path: 'badges.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateBadgesDisplayOrder;\n}\n","import {\n  createBadge as publicCreateBadge,\n  updateBadge as publicUpdateBadge,\n  listBadges as publicListBadges,\n  getBadge as publicGetBadge,\n  deleteBadge as publicDeleteBadge,\n  assignBadge as publicAssignBadge,\n  unassignBadge as publicUnassignBadge,\n  listMembersByBadge as publicListMembersByBadge,\n  listBadgesPerMember as publicListBadgesPerMember,\n  getMemberCountsPerBadge as publicGetMemberCountsPerBadge,\n  updateBadgesDisplayOrder as publicUpdateBadgesDisplayOrder,\n} from './badges-v3-badge-badges.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { createEventModule } from '@wix/sdk-runtime/event-definition-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\nimport { onBadgeAssigned as publicOnBadgeAssigned } from './badges-v3-badge-badges.public.js';\nimport { onBadgeUnassigned as publicOnBadgeUnassigned } from './badges-v3-badge-badges.public.js';\nimport { onBadgeCreated as publicOnBadgeCreated } from './badges-v3-badge-badges.public.js';\nimport { onBadgeDeleted as publicOnBadgeDeleted } from './badges-v3-badge-badges.public.js';\nimport { onBadgeUpdated as publicOnBadgeUpdated } from './badges-v3-badge-badges.public.js';\n\nexport const createBadge: MaybeContext<\n  BuildRESTFunction<typeof publicCreateBadge> & typeof publicCreateBadge\n> = /*#__PURE__*/ createRESTModule(publicCreateBadge);\nexport const updateBadge: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateBadge> & typeof publicUpdateBadge\n> = /*#__PURE__*/ createRESTModule(publicUpdateBadge);\nexport const listBadges: MaybeContext<\n  BuildRESTFunction<typeof publicListBadges> & typeof publicListBadges\n> = /*#__PURE__*/ createRESTModule(publicListBadges);\nexport const getBadge: MaybeContext<\n  BuildRESTFunction<typeof publicGetBadge> & typeof publicGetBadge\n> = /*#__PURE__*/ createRESTModule(publicGetBadge);\nexport const deleteBadge: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteBadge> & typeof publicDeleteBadge\n> = /*#__PURE__*/ createRESTModule(publicDeleteBadge);\nexport const assignBadge: MaybeContext<\n  BuildRESTFunction<typeof publicAssignBadge> & typeof publicAssignBadge\n> = /*#__PURE__*/ createRESTModule(publicAssignBadge);\nexport const unassignBadge: MaybeContext<\n  BuildRESTFunction<typeof publicUnassignBadge> & typeof publicUnassignBadge\n> = /*#__PURE__*/ createRESTModule(publicUnassignBadge);\nexport const listMembersByBadge: MaybeContext<\n  BuildRESTFunction<typeof publicListMembersByBadge> &\n    typeof publicListMembersByBadge\n> = /*#__PURE__*/ createRESTModule(publicListMembersByBadge);\nexport const listBadgesPerMember: MaybeContext<\n  BuildRESTFunction<typeof publicListBadgesPerMember> &\n    typeof publicListBadgesPerMember\n> = /*#__PURE__*/ createRESTModule(publicListBadgesPerMember);\nexport const getMemberCountsPerBadge: MaybeContext<\n  BuildRESTFunction<typeof publicGetMemberCountsPerBadge> &\n    typeof publicGetMemberCountsPerBadge\n> = /*#__PURE__*/ createRESTModule(publicGetMemberCountsPerBadge);\nexport const updateBadgesDisplayOrder: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateBadgesDisplayOrder> &\n    typeof publicUpdateBadgesDisplayOrder\n> = /*#__PURE__*/ createRESTModule(publicUpdateBadgesDisplayOrder);\n/**\n * Triggered when a member receives a badge.\n */\nexport const onBadgeAssigned: ReturnType<\n  typeof createEventModule<typeof publicOnBadgeAssigned>\n> = createEventModule(publicOnBadgeAssigned);\n/**\n * Triggered when a member's badge is removed.\n */\nexport const onBadgeUnassigned: ReturnType<\n  typeof createEventModule<typeof publicOnBadgeUnassigned>\n> = createEventModule(publicOnBadgeUnassigned);\n/**\n * Triggered when a badge is created.\n */\nexport const onBadgeCreated: ReturnType<\n  typeof createEventModule<typeof publicOnBadgeCreated>\n> = createEventModule(publicOnBadgeCreated);\n/**\n * Triggered when a badge is deleted.\n */\nexport const onBadgeDeleted: ReturnType<\n  typeof createEventModule<typeof publicOnBadgeDeleted>\n> = createEventModule(publicOnBadgeDeleted);\n/**\n * Triggered when a badge is updated.\n */\nexport const onBadgeUpdated: ReturnType<\n  typeof createEventModule<typeof publicOnBadgeUpdated>\n> = createEventModule(publicOnBadgeUpdated);\n\nexport {\n  SortOrder,\n  WebhookIdentityType,\n} from './badges-v3-badge-badges.universal.js';\nexport {\n  Badge,\n  CreateBadgeRequest,\n  CreateBadgeResponse,\n  UpdateBadgeRequest,\n  UpdateBadgeResponse,\n  ListBadgesRequest,\n  Paging,\n  ListBadgesResponse,\n  PagingMetadata,\n  QueryBadgesRequest,\n  Sorting,\n  QueryBadgesResponse,\n  GetBadgeRequest,\n  GetBadgeResponse,\n  DeleteBadgeRequest,\n  DeleteBadgeResponse,\n  CountBadgesRequest,\n  CountBadgesResponse,\n  AssignBadgeRequest,\n  AssignBadgeResponse,\n  BadgeAssigned,\n  AssignBadgesRequest,\n  AssignBadgesResponse,\n  UnassignBadgeRequest,\n  UnassignBadgeResponse,\n  BadgeUnassigned,\n  ListMembersRequest,\n  ListMembersResponse,\n  ListMembersBadgeIdsRequest,\n  ListMembersBadgeIdsResponse,\n  MemberBadgeIds,\n  GetMemberCountsPerBadgeRequest,\n  GetMemberCountsPerBadgeResponse,\n  BadgeMemberCount,\n  UpdateBadgesDisplayOrderRequest,\n  UpdateBadgesDisplayOrderResponse,\n  ListMembersWithBadgesRequest,\n  CursorPaging,\n  ListMembersWithBadgesResponse,\n  CursorPagingMetadata,\n  Cursors,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  BaseEventMetadata,\n  EventMetadata,\n  BadgeAssignedEnvelope,\n  BadgeUnassignedEnvelope,\n  BadgeCreatedEnvelope,\n  BadgeDeletedEnvelope,\n  BadgeUpdatedEnvelope,\n  UpdateBadge,\n  ListBadgesOptions,\n  ListMembersByBadgeOptions,\n} from './badges-v3-badge-badges.universal.js';\n"],"mappings":"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","names":["assignBadge","createBadge","deleteBadge","getBadge","getMemberCountsPerBadge","listBadges","listBadgesPerMember","listMembersByBadge","onBadgeAssigned","onBadgeCreated","onBadgeDeleted","onBadgeUnassigned","onBadgeUpdated","unassignBadge","updateBadge","updateBadgesDisplayOrder","import_rename_all_nested_keys","import_timestamp","import_transform_paths","import_timestamp","import_rest_modules","payload","SortOrder","WebhookIdentityType","createBadge","sdkTransformError","updateBadge","listBadges","getBadge","deleteBadge","assignBadge","unassignBadge","getMemberCountsPerBadge","updateBadgesDisplayOrder","createBadge","updateBadge","listBadges","getBadge","deleteBadge","assignBadge","unassignBadge","listMembersByBadge","listBadgesPerMember","getMemberCountsPerBadge","updateBadgesDisplayOrder","import_rest_modules","createBadge","updateBadge","listBadges","getBadge","deleteBadge","assignBadge","unassignBadge","listMembersByBadge","listBadgesPerMember","getMemberCountsPerBadge","updateBadgesDisplayOrder","onBadgeAssigned","onBadgeUnassigned","onBadgeCreated","onBadgeDeleted","onBadgeUpdated"]}