interface Badge {
    /**
     * Badge ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /** Text displayed on the badge. */
    title?: string | null;
    /** Badge description. */
    description?: string | null;
    /**
     * Badge background color in hexadecimal RGB format. Uppercase letters only.
     *
     * Default: `#796EFF ` (purple).
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Badge text color in hexadecimal RGB format. Uppercase letters only.
     *
     * Default: `"#FFFFFF"` (white).
     * @format COLOR_HEX
     */
    textColor?: string | null;
    /**
     * Badge icon as an SVG image. One of:
     *
     * - An external web URL in the following format: `http(s)://<image url>`.
     * - The [`sourceUrl`](https://dev.wix.com/docs/sdk/backend-modules/media/files/get-file-descriptor) for a Wix Media Manager file. Wix Media Manager file names in a `wix:image://...` format are not supported.
     */
    icon?: string | null;
    /**
     * Whether the badge has special permissions
     * to access specific members-only pages. <br/><br/>
     * When `true`, members with the badge receive special permissions,
     * and Wix users can
     * [manage badge permissions in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-2#managing-member-badges).
     * When `false`, members with the badge receive no special permissions.
     */
    permissionsEnabled?: boolean | null;
    /**
     * Slugified name. Used to represent the badge in a URL.
     * @readonly
     */
    slug?: string | null;
    /**
     * Date the badge was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date the badge was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface CreateBadgeRequest {
    /** Badge to create. */
    badge: Badge;
}
interface CreateBadgeResponse {
    /** Created badge. */
    badge?: Badge;
}
interface UpdateBadgeRequest {
    /** Badge to update. */
    badge: Badge;
}
interface UpdateBadgeResponse {
    /** Updated badge. */
    badge?: Badge;
}
interface ListBadgesRequest {
    /** Pagination options. */
    paging?: Paging;
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface ListBadgesResponse {
    /** Retrieved badges. */
    badges?: Badge[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface QueryBadgesRequest {
    /**
     * Filter options.
     * Currently supported fields for filtering:
     * - `id`
     * - `title`
     * - `slug`
     * For more details on how to use filter, see [API Query Language: Filters](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
    /**
     * Sorting options.
     * For more details on how to use sorting,
     * see [API Query Language: Sorting](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#sorting)
     */
    sort?: Sorting[];
    /** Pagination options.  */
    paging?: Paging;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface QueryBadgesResponse {
    /** Retrieved badges. */
    badges?: Badge[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface GetBadgeRequest {
    /**
     * Badge ID.
     * @format GUID
     */
    _id: string;
}
interface GetBadgeResponse {
    /** Badge. */
    badge?: Badge;
}
interface DeleteBadgeRequest {
    /**
     * Badge ID.
     * @format GUID
     */
    _id: string;
}
interface DeleteBadgeResponse {
}
interface CountBadgesRequest {
    /**
     * Filter options.
     * Currently supported fields for filtering:
     * - `id`
     * - `title`
     * - `slug`
     * For more details on how to use filter, see [API Query Language: Filters](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#filters).
     */
    filter?: Record<string, any> | null;
}
interface CountBadgesResponse {
    /** Amount of badges. */
    count?: string;
}
interface AssignBadgeRequest {
    /**
     * Badge ID.
     * @format GUID
     */
    _id: string;
    /**
     * Member IDs to assign to the badge.
     * @format GUID
     */
    memberIds: string[];
}
interface AssignBadgeResponse {
    /**
     * Member IDs assigned to the badge.
     * @format GUID
     */
    memberIds?: string[];
}
interface BadgeAssigned {
    /**
     * ID of the member who received the badge.
     * @format GUID
     */
    memberId?: string;
}
interface AssignBadgesRequest {
    /**
     * Badge IDs to assign to the member.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    ids?: string[];
    /**
     * Member ID.
     * @format GUID
     */
    memberId?: string;
}
interface AssignBadgesResponse {
    /**
     * Badge IDs newly assigned to the member.
     * @format GUID
     */
    ids?: string[];
}
interface UnassignBadgeRequest {
    /**
     * Badge ID.
     * @format GUID
     */
    _id: string;
    /**
     * List of members to remove.
     * @format GUID
     */
    memberIds: string[];
}
interface UnassignBadgeResponse {
}
interface BadgeUnassigned {
    /**
     * ID of the member who lost the badge.
     * @format GUID
     */
    memberId?: string;
}
interface ListMembersRequest {
    /**
     * Badge ID.
     * @format GUID
     */
    _id: string;
    /** Pagination options. */
    paging?: Paging;
}
interface ListMembersResponse {
    /**
     * Member IDs assigned to the badge.
     * @format GUID
     */
    memberIds?: string[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface ListMembersBadgeIdsRequest {
    /**
     * Member IDs to retrieve badges for.
     * @format GUID
     * @minSize 1
     * @maxSize 100
     */
    memberIds: string[];
}
interface ListMembersBadgeIdsResponse {
    /** List of members and the badges they're assigned to. */
    memberBadgeIds?: MemberBadgeIds[];
}
interface MemberBadgeIds {
    /**
     * Member ID.
     * @format GUID
     */
    memberId?: string;
    /**
     * List of badges the member is assigned to.
     * @format GUID
     */
    badgeIds?: string[];
}
interface GetMemberCountsPerBadgeRequest {
}
interface GetMemberCountsPerBadgeResponse {
    /** Badges and the amount of members who have each badge. */
    badgeMemberCounts?: BadgeMemberCount[];
}
interface BadgeMemberCount {
    /**
     * Badge ID.
     * @format GUID
     */
    badgeId?: string;
    /** Badge member count. */
    memberCount?: number;
}
interface UpdateBadgesDisplayOrderRequest {
    /**
     * Badge IDs in the order to display.
     * @format GUID
     * @minSize 1
     */
    badgeIds: string[];
}
interface UpdateBadgesDisplayOrderResponse {
    /** Reordered badges list. */
    badges?: Badge[];
}
interface ListMembersWithBadgesRequest {
    /** Cursor paging options. */
    paging?: CursorPaging;
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface ListMembersWithBadgesResponse {
    /**
     * List of members.
     * @format GUID
     */
    memberIds?: string[];
    /** Metadata for the paginated results. */
    pagingMetadata?: CursorPagingMetadata;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface BadgeAssignedEnvelope {
    data: BadgeAssigned;
    metadata: EventMetadata;
}
interface BadgeUnassignedEnvelope {
    data: BadgeUnassigned;
    metadata: EventMetadata;
}
interface BadgeCreatedEnvelope {
    entity: Badge;
    metadata: EventMetadata;
}
interface BadgeDeletedEnvelope {
    metadata: EventMetadata;
}
interface BadgeUpdatedEnvelope {
    entity: Badge;
    metadata: EventMetadata;
}
interface UpdateBadge {
    /**
     * Badge ID.
     * @format GUID
     * @readonly
     */
    _id?: string;
    /** Text displayed on the badge. */
    title?: string | null;
    /** Badge description. */
    description?: string | null;
    /**
     * Badge background color in hexadecimal RGB format. Uppercase letters only.
     *
     * Default: `#796EFF ` (purple).
     * @format COLOR_HEX
     */
    backgroundColor?: string | null;
    /**
     * Badge text color in hexadecimal RGB format. Uppercase letters only.
     *
     * Default: `"#FFFFFF"` (white).
     * @format COLOR_HEX
     */
    textColor?: string | null;
    /**
     * Badge icon as an SVG image. One of:
     *
     * - An external web URL in the following format: `http(s)://<image url>`.
     * - The [`sourceUrl`](https://dev.wix.com/docs/sdk/backend-modules/media/files/get-file-descriptor) for a Wix Media Manager file. Wix Media Manager file names in a `wix:image://...` format are not supported.
     */
    icon?: string | null;
    /**
     * Whether the badge has special permissions
     * to access specific members-only pages. <br/><br/>
     * When `true`, members with the badge receive special permissions,
     * and Wix users can
     * [manage badge permissions in the dashboard](https://support.wix.com/en/article/site-members-creating-and-managing-member-badges?tabs=Dashboard-2#managing-member-badges).
     * When `false`, members with the badge receive no special permissions.
     */
    permissionsEnabled?: boolean | null;
    /**
     * Slugified name. Used to represent the badge in a URL.
     * @readonly
     */
    slug?: string | null;
    /**
     * Date the badge was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date the badge was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
}
interface ListBadgesOptions {
    /** Pagination options.  */
    paging?: Paging;
}
interface ListMembersByBadgeOptions {
    /** Pagination options. */
    paging?: Paging;
}

export { type MessageEnvelope as $, type AssignBadgeResponse as A, type Badge as B, type CreateBadgeRequest as C, type DeleteBadgeRequest as D, type GetMemberCountsPerBadgeRequest as E, type BadgeMemberCount as F, type GetMemberCountsPerBadgeResponse as G, type UpdateBadgesDisplayOrderRequest as H, type ListMembersWithBadgesRequest as I, type CursorPaging as J, type ListMembersWithBadgesResponse as K, type ListBadgesOptions as L, type MemberBadgeIds as M, type CursorPagingMetadata as N, type Cursors as O, type Paging as P, type QueryBadgesRequest as Q, type DomainEvent as R, SortOrder as S, type DomainEventBodyOneOf as T, type UpdateBadge as U, type EntityCreatedEvent as V, WebhookIdentityType as W, type RestoreInfo as X, type EntityUpdatedEvent as Y, type EntityDeletedEvent as Z, type ActionEvent as _, type ListBadgesResponse as a, type IdentificationData as a0, type IdentificationDataIdOneOf as a1, type BaseEventMetadata as a2, type EventMetadata as a3, type BadgeAssignedEnvelope as a4, type BadgeUnassignedEnvelope as a5, type BadgeCreatedEnvelope as a6, type BadgeDeletedEnvelope as a7, type BadgeUpdatedEnvelope as a8, type ListMembersByBadgeOptions as b, type ListMembersResponse as c, type ListMembersBadgeIdsResponse as d, type UpdateBadgesDisplayOrderResponse as e, type CreateBadgeResponse as f, type UpdateBadgeRequest as g, type UpdateBadgeResponse as h, type ListBadgesRequest as i, type PagingMetadata as j, type Sorting as k, type QueryBadgesResponse as l, type GetBadgeRequest as m, type GetBadgeResponse as n, type DeleteBadgeResponse as o, type CountBadgesRequest as p, type CountBadgesResponse as q, type AssignBadgeRequest as r, type BadgeAssigned as s, type AssignBadgesRequest as t, type AssignBadgesResponse as u, type UnassignBadgeRequest as v, type UnassignBadgeResponse as w, type BadgeUnassigned as x, type ListMembersRequest as y, type ListMembersBadgeIdsRequest as z };
