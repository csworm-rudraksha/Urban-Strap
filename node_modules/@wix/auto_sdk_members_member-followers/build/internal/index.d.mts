import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { L as ListCurrentMemberFollowingOptions, a as ListCurrentMemberFollowingResult, b as ListMemberFollowingOptions, c as ListMemberFollowingResult, d as ListCurrentMemberFollowersOptions, e as ListCurrentMemberFollowersResult, f as ListMemberFollowersOptions, g as ListMemberFollowersResult, Q as QueryMyMemberConnectionsResponse, h as QueryMemberConnectionsResponse } from './members-v3-follow-member-followers.universal-CSI8Y3ix.mjs';
export { N as ActionEvent, A as App, X as BaseEventMetadata, B as ConnectedMembers, C as CursorPaging, s as Cursors, E as DomainEvent, G as DomainEventBodyOneOf, O as Empty, H as EntityCreatedEvent, K as EntityDeletedEvent, J as EntityUpdatedEvent, Y as EventMetadata, j as File, Z as FollowMemberFollowedEnvelope, k as FollowMemberRequest, l as FollowMemberResponse, _ as FollowMemberUnfollowedEnvelope, F as Follower, T as IdentificationData, V as IdentificationDataIdOneOf, I as InvalidateCache, i as InvalidateCacheGetByOneOf, x as ListMemberFollowersRequest, y as ListMemberFollowersResponse, t as ListMemberFollowingRequest, u as ListMemberFollowingResponse, v as ListMyMemberFollowersRequest, w as ListMyMemberFollowersResponse, p as ListMyMemberFollowingRequest, q as ListMyMemberFollowingResponse, M as MemberFollowed, o as MemberUnfollowed, S as MessageEnvelope, P as Page, r as PagingMetadataV2, D as QueryMemberConnectionsRequest, z as QueryMyMemberConnectionsRequest, R as RestoreInfo, U as URI, m as UnfollowMemberRequest, n as UnfollowMemberResponse, W as WebhookIdentityType } from './members-v3-follow-member-followers.universal-CSI8Y3ix.mjs';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';

declare function followMember$1(httpClient: HttpClient): FollowMemberSignature;
interface FollowMemberSignature {
    /**
     * Sets the current member to follow another, specified member.
     * @param - ID of the member to follow.
     */
    (memberId: string): Promise<void>;
}
declare function unfollowMember$1(httpClient: HttpClient): UnfollowMemberSignature;
interface UnfollowMemberSignature {
    /**
     * Sets the current member to unfollow another, specified member.
     * @param - ID of the member to unfollow.
     */
    (memberId: string): Promise<void>;
}
declare function listCurrentMemberFollowing$1(httpClient: HttpClient): ListCurrentMemberFollowingSignature;
interface ListCurrentMemberFollowingSignature {
    /**
     * Retrieves a list of members who are followed by the current member.
     */
    (options?: ListCurrentMemberFollowingOptions | undefined): Promise<ListCurrentMemberFollowingResult>;
}
declare function listMemberFollowing$1(httpClient: HttpClient): ListMemberFollowingSignature;
interface ListMemberFollowingSignature {
    /**
     * Retrieves a list of members who are followed by the given member.
     * @param - ID of the member whose followers to list.
     */
    (memberId: string, options?: ListMemberFollowingOptions | undefined): Promise<ListMemberFollowingResult>;
}
declare function listCurrentMemberFollowers$1(httpClient: HttpClient): ListCurrentMemberFollowersSignature;
interface ListCurrentMemberFollowersSignature {
    /**
     * Retrieves a list of members who are following the current member.
     */
    (options?: ListCurrentMemberFollowersOptions | undefined): Promise<ListCurrentMemberFollowersResult>;
}
declare function listMemberFollowers$1(httpClient: HttpClient): ListMemberFollowersSignature;
interface ListMemberFollowersSignature {
    /**
     * Retrieves a list of members who are following the given member.
     * @param - ID of the member whose followed members to list.
     */
    (memberId: string, options?: ListMemberFollowersOptions | undefined): Promise<ListMemberFollowersResult>;
}
declare function queryCurrentMemberConnections$1(httpClient: HttpClient): QueryCurrentMemberConnectionsSignature;
interface QueryCurrentMemberConnectionsSignature {
    /**
     * Retrieves a list of members and their connections to the current member.
     * @param - List of member IDs whose connections to the current member will be retrieved.
     */
    (connectedMemberIds: string[]): Promise<QueryMyMemberConnectionsResponse>;
}
declare function queryMemberConnections$1(httpClient: HttpClient): QueryMemberConnectionsSignature;
interface QueryMemberConnectionsSignature {
    /**
     * Retrieves a list of members and their connections to the given member.
     * > **Note:** If an empty array is passed as `connectedMemberIds`, the call will succeed, but it will not return any data.
     * @param - Member ID.
     * @param - List of member IDs whose connections to the given member will be retrieved.
     */
    (memberId: string, connectedMemberIds: string[]): Promise<QueryMemberConnectionsResponse>;
}

declare const followMember: MaybeContext<BuildRESTFunction<typeof followMember$1> & typeof followMember$1>;
declare const unfollowMember: MaybeContext<BuildRESTFunction<typeof unfollowMember$1> & typeof unfollowMember$1>;
declare const listCurrentMemberFollowing: MaybeContext<BuildRESTFunction<typeof listCurrentMemberFollowing$1> & typeof listCurrentMemberFollowing$1>;
declare const listMemberFollowing: MaybeContext<BuildRESTFunction<typeof listMemberFollowing$1> & typeof listMemberFollowing$1>;
declare const listCurrentMemberFollowers: MaybeContext<BuildRESTFunction<typeof listCurrentMemberFollowers$1> & typeof listCurrentMemberFollowers$1>;
declare const listMemberFollowers: MaybeContext<BuildRESTFunction<typeof listMemberFollowers$1> & typeof listMemberFollowers$1>;
declare const queryCurrentMemberConnections: MaybeContext<BuildRESTFunction<typeof queryCurrentMemberConnections$1> & typeof queryCurrentMemberConnections$1>;
declare const queryMemberConnections: MaybeContext<BuildRESTFunction<typeof queryMemberConnections$1> & typeof queryMemberConnections$1>;
/**
 * Triggered when a member follows another member.
 */
declare const onFollowMemberFollowed: ReturnType<typeof createEventModule<typeof publicOnFollowMemberFollowed>>;
/**
 * Triggered when a member unfollows another member.
 */
declare const onFollowMemberUnfollowed: ReturnType<typeof createEventModule<typeof publicOnFollowMemberUnfollowed>>;

export { ListCurrentMemberFollowersOptions, ListCurrentMemberFollowersResult, ListCurrentMemberFollowingOptions, ListCurrentMemberFollowingResult, ListMemberFollowersOptions, ListMemberFollowersResult, ListMemberFollowingOptions, ListMemberFollowingResult, QueryMemberConnectionsResponse, QueryMyMemberConnectionsResponse, followMember, listCurrentMemberFollowers, listCurrentMemberFollowing, listMemberFollowers, listMemberFollowing, onFollowMemberFollowed, onFollowMemberUnfollowed, queryCurrentMemberConnections, queryMemberConnections, unfollowMember };
