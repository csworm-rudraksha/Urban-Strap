import { k as FollowMemberRequest$1, l as FollowMemberResponse$1, m as UnfollowMemberRequest$1, n as UnfollowMemberResponse$1, p as ListMyMemberFollowingRequest$1, q as ListMyMemberFollowingResponse$1, t as ListMemberFollowingRequest$1, u as ListMemberFollowingResponse$1, v as ListMyMemberFollowersRequest$1, w as ListMyMemberFollowersResponse$1, x as ListMemberFollowersRequest$1, y as ListMemberFollowersResponse$1, z as QueryMyMemberConnectionsRequest$1, Q as QueryMyMemberConnectionsResponse$1, D as QueryMemberConnectionsRequest$1, h as QueryMemberConnectionsResponse$1 } from './members-v3-follow-member-followers.universal-CSI8Y3ix.js';

interface FollowMemberRequest {
    /**
     * ID of the member to follow.
     * @format GUID
     */
    memberId: string;
}
interface FollowMemberResponse {
}
interface UnfollowMemberRequest {
    /**
     * ID of the member to unfollow.
     * @format GUID
     */
    memberId: string;
}
interface UnfollowMemberResponse {
}
interface ListMyMemberFollowingRequest {
    /**
     * Pagination options. For more information, see
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    paging?: CursorPaging;
}
interface CursorPaging {
    /**
     * Number of items to return. See [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     * @min 1
     * @max 100
     */
    limit?: number | null;
    /** Cursor returned from last query response. */
    cursor?: string | null;
}
interface ListMyMemberFollowingResponse {
    /**
     * Retrieved list of members followed by the current member.
     * @format GUID
     */
    memberIds?: string[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
interface PagingMetadataV2 {
    /** Number of items starting from given cursor. */
    count?: number | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. */
    cursors?: Cursors;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface ListMemberFollowingRequest {
    /**
     * ID of the member whose followers to list.
     * @format GUID
     */
    memberId: string;
    /**
     * Pagination options. For more information, see
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    paging?: CursorPaging;
}
interface ListMemberFollowingResponse {
    /**
     * Retrieved list of members who are followed by the given member.
     * @format GUID
     */
    memberIds?: string[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
interface ListMyMemberFollowersRequest {
    /**
     * Pagination options. For more information, see
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    paging?: CursorPaging;
}
interface ListMyMemberFollowersResponse {
    /**
     * Retrieved list of members who are following the current member.
     * @format GUID
     */
    memberIds?: string[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
interface ListMemberFollowersRequest {
    /**
     * ID of the member whose followed members to list.
     * @format GUID
     */
    memberId: string;
    /**
     * Pagination options. For more information, see
     * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
     */
    paging?: CursorPaging;
}
interface ListMemberFollowersResponse {
    /**
     * Retrieved list of members who are following the given member.
     * @format GUID
     */
    memberIds?: string[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PagingMetadataV2;
}
interface QueryMyMemberConnectionsRequest {
    /**
     * List of member IDs whose connections to the current member will be retrieved.
     * @format GUID
     * @maxSize 100
     */
    connectedMemberIds: string[];
}
interface QueryMyMemberConnectionsResponse {
    /** Retrieved list of members whose connections to the current member were retrieved. */
    connectedMembers?: ConnectedMembers[];
}
interface ConnectedMembers {
    /**
     * Site member ID.
     * @format GUID
     */
    connectedMemberId?: string;
    /** Whether the listed member is followed by the given member. */
    followedByMember?: boolean;
    /** Whether the listed member follows the given member. */
    followingMember?: boolean;
}
interface QueryMemberConnectionsRequest {
    /**
     * List of member IDs whose connections to the given member will be retrieved.
     * @format GUID
     * @maxSize 100
     */
    connectedMemberIds: string[];
    /**
     * Member ID.
     * @format GUID
     */
    memberId: string;
}
interface QueryMemberConnectionsResponse {
    /** Retrieved list of members whose connections to the given member were retrieved. */
    connectedMembers?: ConnectedMembers[];
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function followMember(): __PublicMethodMetaInfo<'POST', {
    memberId: string;
}, FollowMemberRequest$1, FollowMemberRequest, FollowMemberResponse$1, FollowMemberResponse>;
declare function unfollowMember(): __PublicMethodMetaInfo<'DELETE', {
    memberId: string;
}, UnfollowMemberRequest$1, UnfollowMemberRequest, UnfollowMemberResponse$1, UnfollowMemberResponse>;
declare function listCurrentMemberFollowing(): __PublicMethodMetaInfo<'GET', {}, ListMyMemberFollowingRequest$1, ListMyMemberFollowingRequest, ListMyMemberFollowingResponse$1, ListMyMemberFollowingResponse>;
declare function listMemberFollowing(): __PublicMethodMetaInfo<'GET', {
    memberId: string;
}, ListMemberFollowingRequest$1, ListMemberFollowingRequest, ListMemberFollowingResponse$1, ListMemberFollowingResponse>;
declare function listCurrentMemberFollowers(): __PublicMethodMetaInfo<'GET', {}, ListMyMemberFollowersRequest$1, ListMyMemberFollowersRequest, ListMyMemberFollowersResponse$1, ListMyMemberFollowersResponse>;
declare function listMemberFollowers(): __PublicMethodMetaInfo<'GET', {
    memberId: string;
}, ListMemberFollowersRequest$1, ListMemberFollowersRequest, ListMemberFollowersResponse$1, ListMemberFollowersResponse>;
declare function queryCurrentMemberConnections(): __PublicMethodMetaInfo<'POST', {}, QueryMyMemberConnectionsRequest$1, QueryMyMemberConnectionsRequest, QueryMyMemberConnectionsResponse$1, QueryMyMemberConnectionsResponse>;
declare function queryMemberConnections(): __PublicMethodMetaInfo<'POST', {
    memberId: string;
}, QueryMemberConnectionsRequest$1, QueryMemberConnectionsRequest, QueryMemberConnectionsResponse$1, QueryMemberConnectionsResponse>;

export { type __PublicMethodMetaInfo, followMember, listCurrentMemberFollowers, listCurrentMemberFollowing, listMemberFollowers, listMemberFollowing, queryCurrentMemberConnections, queryMemberConnections, unfollowMember };
