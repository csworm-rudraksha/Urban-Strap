import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixGatewaysBillingV1TaxCalculationGateway from './gateways-billing-v1-tax-calculation-gateway-tax-calculation.http.js';
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
/** Type of jurisdiction that taxes were calculated for. For example, `"State"`, `"County"`, `"City"`, `"Special"`, etc. */
export var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (JurisdictionType = {}));
/**
 * Calculates tax for the provided line items.
 *
 * Tax is calculated for each line item based on the tax region
 * that corresponds to the address provided in `lineItems.addressIndex` and the tax group in `taxGroupId`. If no tax region is found for
 * the line item's address then no tax will be calculated for this line item. If no tax group with that `taxGroupId` is found then the
 * default tax group is used to calculate tax. Call List Default Tax Groups to retrieve a site's default tax groups.
 *
 * The tax is calculated by a tax calculator app installed on the site.
 * Call List Tax Calculators to see which tax calculators are available.
 * To provide your own tax calculations, use the Tax Calculation service plugin.
 *
 * The breakdown of calculated tax returned, includes:
 * + `taxSummary`: The overall total tax calculated.
 * + `taxSummary.aggregatedTaxBreakdown`: The total tax calculated for each jurisdiction.
 * + `lineItemTaxDetails.taxSummary`: The total tax calculated for each line item.
 * + `lineItemTaxDetails.taxBreakdown`: The tax calculated for each line item in each jurisdiction.
 * @public
 * @documentationMaturity preview
 * @requiredField options.addresses
 * @requiredField options.lineItems
 * @requiredField options.lineItems._id
 * @requiredField options.lineItems.addressIndex
 * @requiredField options.lineItems.price
 * @param options - Calculate tax options.
 * @permissionId BILLING.CALCULATE_TAX
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.billing.v1.TaxCalculation.CalculateTax
 */
export async function calculateTax(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        externalId: options?.externalId,
        currency: options?.currency,
        addresses: options?.addresses,
        lineItems: options?.lineItems,
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'addresses', isRepeated: true }],
        },
    ]);
    const reqOpts = ambassadorWixGatewaysBillingV1TaxCalculationGateway.calculateTax(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'addresses', isRepeated: true }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                externalId: '$[0].externalId',
                currency: '$[0].currency',
                addresses: '$[0].addresses',
                lineItems: '$[0].lineItems',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of installed tax calculators.
 *
 * Wix uses these calculators to calculate tax.
 * @public
 * @documentationMaturity preview
 * @permissionId BILLING.TAX_CALCULATORS_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn wix.billing.v1.TaxCalculation.ListTaxCalculators
 */
export async function listTaxCalculators() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixGatewaysBillingV1TaxCalculationGateway.listTaxCalculators(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=gateways-billing-v1-tax-calculation-gateway-tax-calculation.universal.js.map