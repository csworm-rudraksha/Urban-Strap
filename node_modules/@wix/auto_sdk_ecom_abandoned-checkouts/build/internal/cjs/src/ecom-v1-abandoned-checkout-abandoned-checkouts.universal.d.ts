import { NonNullablePaths } from '@wix/sdk-types';
export interface AbandonedCheckout {
    /**
     * Abandoned checkout ID.
     * @format GUID
     */
    _id?: string;
    /** Date and time the abandoned checkout was created. */
    _createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    _updatedDate?: Date | null;
    /**
     * The associated checkout ID.
     * @format GUID
     */
    checkoutId?: string | null;
    /**
     * The associated cart ID.
     * @format GUID
     */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
    /**
     * The store's currency.
     * @format CURRENCY
     */
    currency?: string;
    /**
     * Currency the buyer used in checkout.
     * @format CURRENCY
     */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice;
    /**
     * List of all automation activities performed by [Wix Automations](https://dev.wix.com/docs/rest/business-management/automations/introduction) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each activity in the automation flow. Only relevant if you've set up [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-a-new-automation). Read more about `activities` in the [introduction](https://www.wix.com/velo/reference/wix-ecom-backend/abandonedcheckout/introduction).
     */
    activities?: Activity[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /**
     * Checkout URL.
     * @format WEB_URL
     */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice;
}
export declare enum ActivityType {
    /** Not implemented. */
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    /** Scheduled. */
    SCHEDULED = "SCHEDULED",
    /** Email sent. */
    EMAIL_SENT = "EMAIL_SENT",
    /** Email not sent. */
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    /** Notification sent. */
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    /** Task created. */
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
export declare enum Status {
    /** Abandoned. */
    ABANDONED = "ABANDONED",
    /** Recovered. */
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
export interface V1BuyerInfo extends V1BuyerInfoIdOneOf {
    /**
     * Visitor ID (if the site visitor is **not** a site member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if the site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
    /**
     * User ID (if the site visitor is a site owner or collaborator).
     * @format GUID
     */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://www.wix.com/velo/reference/wix-crm-v2/contacts).
     * @format GUID
     * @readonly
     */
    contactId?: string | null;
    /**
     * Buyer email address.
     * Max: `50`
     * @maxLength 50
     * @format EMAIL
     */
    email?: string | null;
}
/** @oneof */
export interface V1BuyerInfoIdOneOf {
    /**
     * Visitor ID (if the site visitor is **not** a site member).
     * @format GUID
     */
    visitorId?: string;
    /**
     * Member ID (if the site visitor is a site member).
     * @format GUID
     */
    memberId?: string;
    /**
     * User ID (if the site visitor is a site owner or collaborator).
     * @format GUID
     */
    userId?: string;
}
/** Full contact details for an address */
export interface FullAddressContactDetails {
    /**
     * First name.
     * Max length: `100`
     * @maxLength 100
     */
    firstName?: string | null;
    /**
     * Last name.
     * Max length: `100`
     * @maxLength 100
     */
    lastName?: string | null;
    /**
     * Phone number.
     * @format PHONE
     */
    phone?: string | null;
    /**
     * Company name.
     * Max length: `50`
     * @maxLength 1000
     */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
export interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
export declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
export interface MultiCurrencyPrice {
    /**
     * Amount.
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     * @decimalValue options { gte:0, lte:1000000000000000 }
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
export interface Activity {
    /** Date and time the automation activity was created. */
    _createdDate?: Date | null;
    /**
     * Automation activity type.
     *
     * Supported properties: `UNKNOWN_TYPE`, `SCHEDULED`, `EMAIL_SENT`, `EMAIL_NOT_SENT`, `NOTIFICATION_SENT`, `TASK_CREATED`
     */
    type?: ActivityType;
}
export interface CartAbandonedEvent {
    /** @format GUID */
    cartId?: string;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonTime?: Date | null;
    /** Buyer information */
    buyerInfo?: BuyerInfo;
    /** Amount of items in cart */
    itemsCount?: number;
    /** Coupon ID (if relevant) */
    couponId?: string;
    /** Subtotal of all line items in cart, not before shipping and taxes */
    totals?: Totals;
    /**
     * Checkout URL - checkout with the abandoned cart details
     * @format WEB_URL
     */
    checkoutUrl?: string;
}
export interface BuyerInfo {
    /**
     * Wix customer ID
     * @format GUID
     */
    _id?: string;
    /** Customer information */
    identityType?: Identity;
    /**
     * Customer's email address
     * @maxLength 50
     * @format EMAIL
     */
    email?: string | null;
    /**
     * Customer's phone number
     * @format PHONE
     */
    phone?: string | null;
    /** Customer's first name */
    firstName?: string | null;
    /** Customer's last name */
    lastName?: string | null;
}
export declare enum Identity {
    /** Customer is the site owner */
    ADMIN = "ADMIN",
    /** Customer is logged in */
    MEMBER = "MEMBER",
    /** Customer is not logged in */
    VISITOR = "VISITOR",
    /** Contact was created for the customer */
    CONTACT = "CONTACT"
}
export interface Totals {
    /**
     * Subtotal of all line items in cart, without shipping and taxes
     * @max 999999999.99
     */
    subtotal?: number | null;
    /**
     * Total cart price
     * @max 999999999.99
     */
    total?: number | null;
    /** Formatted total cart price includes currency symbol */
    formattedTotal?: string;
}
export interface CartRecoveredEvent {
    /** @format GUID */
    cartId?: string;
    /**
     * Time the cart was recovered
     * @readonly
     */
    recoveredTime?: Date | null;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonedTime?: Date | null;
}
/** Triggered when an abandoned checkout is recovered (the customer completes the checkout). */
export interface AbandonedCheckoutRecovered {
    /** The abandoned checkout that was recovered. */
    abandonedCheckout?: AbandonedCheckout;
}
export interface GetAbandonedCheckoutRequest {
    /**
     * Abandoned checkout ID.
     * @format GUID
     */
    abandonedCheckoutId: string;
}
export interface GetAbandonedCheckoutResponse {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout;
}
export interface DeleteAbandonedCheckoutRequest {
    /**
     * Id of the abandoned checkout to delete
     * @format GUID
     */
    abandonedCheckoutId: string;
}
export interface DeleteAbandonedCheckoutResponse {
}
export interface QueryAbandonedCheckoutsRequest {
    /** Query options. */
    query: QueryV2;
}
export interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
export interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
export interface QueryAbandonedCheckoutsResponse {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface SearchAbandonedCheckoutsRequest {
    /** WQL query expression. */
    search?: Search;
}
export interface Search extends SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]
     * @maxSize 4
     */
    sort?: CommonSorting[];
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
/** @oneof */
export interface SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
}
export interface CommonSorting {
    /**
     * Name of the field to sort by.
     * @maxLength 40
     */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
export declare enum CommonSortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
export interface SearchDetails {
    /** boolean search mode */
    mode?: Mode;
    /**
     * search term or expression
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * fields to search in. if empty - server will search in own default fields
     * @maxLength 100
     * @maxSize 20
     */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
export declare enum Mode {
    /** Any */
    OR = "OR",
    /** All */
    AND = "AND"
}
export interface CommonPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CommonCursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface SearchAbandonedCheckoutsResponse {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2;
}
export interface CommonPagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors;
}
export interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface AddAbandonedCheckoutActivityRequest {
    /**
     * Id of the abandoned checkout to update
     * @format GUID
     */
    abandonedCheckoutId: string | null;
    /** The type of the activity to add */
    activityType?: ActivityType;
}
export interface AddAbandonedCheckoutActivityResponse {
    /** The updated abandoned checkout with the added activity */
    abandonedCheckout?: AbandonedCheckout;
}
export interface Task {
    key?: TaskKey;
    executeAt?: Date | null;
    payload?: string | null;
}
export interface TaskKey {
    appId?: string;
    instanceId?: string;
    subjectId?: string | null;
}
export interface TaskAction extends TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
/** @oneof */
export interface TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
export interface Complete {
}
export interface Cancel {
}
export interface Reschedule {
    executeAt?: Date | null;
    payload?: string | null;
}
export interface RedirectToCheckoutRequest {
    /**
     * ID of the abandoned checkout.
     * @format GUID
     */
    abandonedCheckoutId: string;
    /**
     * Metasite ID of the site associated with the abandoned checkout.
     * @format GUID
     */
    metasiteId: string;
}
export interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
export interface HeadersEntry {
    key?: string;
    value?: string;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface Empty {
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface AbandonedCheckoutCreatedEnvelope {
    entity: AbandonedCheckout;
    metadata: EventMetadata;
}
/**
 * Triggered when an abandoned checkout is created.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @webhook
 * @eventType wix.ecom.v1.abandoned_checkout_created
 * @slug created
 */
export declare function onAbandonedCheckoutCreated(handler: (event: AbandonedCheckoutCreatedEnvelope) => void | Promise<void>): void;
export interface AbandonedCheckoutDeletedEnvelope {
    metadata: EventMetadata;
}
/**
 * Triggerred when an abandoned checkout is deleted.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @webhook
 * @eventType wix.ecom.v1.abandoned_checkout_deleted
 * @slug deleted
 */
export declare function onAbandonedCheckoutDeleted(handler: (event: AbandonedCheckoutDeletedEnvelope) => void | Promise<void>): void;
export interface AbandonedCheckoutRecoveredEnvelope {
    data: AbandonedCheckoutRecovered;
    metadata: EventMetadata;
}
/**
 * Triggered when an abandoned checkout is recovered.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @webhook
 * @eventType wix.ecom.v1.abandoned_checkout_recovered
 * @slug recovered
 */
export declare function onAbandonedCheckoutRecovered(handler: (event: AbandonedCheckoutRecoveredEnvelope) => void | Promise<void>): void;
export interface AbandonedCheckoutUpdatedEnvelope {
    entity: AbandonedCheckout;
    metadata: EventMetadata;
}
/**
 * Triggered when an abandoned checkout is updated.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @webhook
 * @eventType wix.ecom.v1.abandoned_checkout_updated
 * @slug updated
 */
export declare function onAbandonedCheckoutUpdated(handler: (event: AbandonedCheckoutUpdatedEnvelope) => void | Promise<void>): void;
type AbandonedCheckoutNonNullablePaths = `_id` | `status` | `buyerInfo.visitorId` | `buyerInfo.memberId` | `buyerInfo.userId` | `contactDetails.vatId._id` | `contactDetails.vatId.type` | `currency` | `totalPrice.amount` | `totalPrice.convertedAmount` | `totalPrice.formattedAmount` | `totalPrice.formattedConvertedAmount` | `activities` | `activities.${number}.type` | `checkoutUrl` | `subtotalPrice.amount` | `subtotalPrice.convertedAmount` | `subtotalPrice.formattedAmount` | `subtotalPrice.formattedConvertedAmount`;
/**
 * Retrieves an abandoned checkout.
 * @param abandonedCheckoutId - Abandoned checkout ID.
 * @public
 * @requiredField abandonedCheckoutId
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns The requested abandoned checkout.
 * @fqn wix.ecom.abandoned_checkout.api.v1.AbandonedCheckoutService.GetAbandonedCheckout
 */
export declare function getAbandonedCheckout(abandonedCheckoutId: string): Promise<NonNullablePaths<AbandonedCheckout, AbandonedCheckoutNonNullablePaths>>;
/**
 * Deletes an abandoned checkout.
 * @param abandonedCheckoutId - Id of the abandoned checkout to delete
 * @public
 * @requiredField abandonedCheckoutId
 * @permissionId ECOM.ABANDONED_CHECKOUT_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn wix.ecom.abandoned_checkout.api.v1.AbandonedCheckoutService.DeleteAbandonedCheckout
 */
export declare function deleteAbandonedCheckout(abandonedCheckoutId: string): Promise<void>;
/**
 * Creates a query to retrieve a list of abandoned checkouts.
 *
 * The `queryAbandonedCheckouts()` function builds a query to retrieve a list of abandoned checkouts and returns a `ResultsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `ResultsQueryBuilder` functions onto the query. `ResultsQueryBuilder` functions enable you to sort, filter, and control the results `queryAbandonedCheckouts()` returns.
 * @public
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.abandoned_checkout.api.v1.AbandonedCheckoutService.QueryAbandonedCheckouts
 */
export declare function queryAbandonedCheckouts(): AbandonedCheckoutsQueryBuilder;
interface QueryCursorResult {
    cursors: CommonCursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface AbandonedCheckoutsQueryResult extends QueryCursorResult {
    items: AbandonedCheckout[];
    query: AbandonedCheckoutsQueryBuilder;
    next: () => Promise<AbandonedCheckoutsQueryResult>;
    prev: () => Promise<AbandonedCheckoutsQueryResult>;
}
export interface AbandonedCheckoutsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: string) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any[]) => AbandonedCheckoutsQueryBuilder;
    in: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: any) => AbandonedCheckoutsQueryBuilder;
    exists: (propertyName: '_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email', value: boolean) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email'>) => AbandonedCheckoutsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | '_createdDate' | '_updatedDate' | 'status' | 'buyerInfo.visitorId' | 'buyerInfo.memberId' | 'buyerInfo.userId' | 'buyerInfo.contactId' | 'buyerInfo.email'>) => AbandonedCheckoutsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => AbandonedCheckoutsQueryBuilder;
    /** @param cursor - A pointer to specific record */
    skipTo: (cursor: string) => AbandonedCheckoutsQueryBuilder;
    find: () => Promise<AbandonedCheckoutsQueryResult>;
}
/**
 * Retrieves a list of abandoned checkouts, given the provided paging, filtering, search details and sorting. Up to 100 abandoned checkouts can be returned per request.
 * @public
 * @permissionId ECOM.ABANDONED_CHECKOUT_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn wix.ecom.abandoned_checkout.api.v1.AbandonedCheckoutService.SearchAbandonedCheckouts
 */
export declare function searchAbandonedCheckouts(options?: SearchAbandonedCheckoutsOptions): Promise<NonNullablePaths<SearchAbandonedCheckoutsResponse, {
    [P in AbandonedCheckoutNonNullablePaths]: `abandonedCheckouts.${number}.${P}`;
}[AbandonedCheckoutNonNullablePaths]>>;
export interface SearchAbandonedCheckoutsOptions {
    /** WQL query expression. */
    search?: Search;
}
/**
 * Adds a new abandoned checkout activity.
 * @param abandonedCheckoutId - Id of the abandoned checkout to update
 * @internal
 * @documentationMaturity preview
 * @requiredField abandonedCheckoutId
 * @permissionId ECOM.ABANDONED_CHECKOUT_UPDATE
 * @fqn wix.ecom.abandoned_checkout.api.v1.AbandonedCheckoutService.AddAbandonedCheckoutActivity
 */
export declare function addAbandonedCheckoutActivity(abandonedCheckoutId: string, options?: AddAbandonedCheckoutActivityOptions): Promise<NonNullablePaths<AddAbandonedCheckoutActivityResponse, {
    [P in AbandonedCheckoutNonNullablePaths]: `abandonedCheckout.${P}`;
}[AbandonedCheckoutNonNullablePaths]>>;
export interface AddAbandonedCheckoutActivityOptions {
    /** The type of the activity to add */
    activityType?: ActivityType;
}
/**
 * Redirects an abandoned checkout to its checkout page.
 * @param abandonedCheckoutId - ID of the abandoned checkout.
 * @param metasiteId - Metasite ID of the site associated with the abandoned checkout.
 * @public
 * @requiredField abandonedCheckoutId
 * @requiredField metasiteId
 * @fqn wix.ecom.abandoned_checkout.api.v1.AbandonedCheckoutService.RedirectToCheckout
 */
export declare function redirectToCheckout(abandonedCheckoutId: string, metasiteId: string): Promise<NonNullablePaths<RawHttpResponse, `body` | `headers` | `headers.${number}.key` | `headers.${number}.value`>>;
export {};
