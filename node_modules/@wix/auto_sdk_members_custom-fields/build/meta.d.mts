import { g as CreateCustomFieldRequest$1, h as CreateCustomFieldResponse$1, k as GetCustomFieldRequest$1, G as GetCustomFieldResponse$1, l as ListCustomFieldsRequest$1, a as ListCustomFieldsResponse$1, o as UpdateCustomFieldRequest$1, p as UpdateCustomFieldResponse$1, r as DeleteCustomFieldRequest$1, s as DeleteCustomFieldResponse$1, H as HideCustomFieldRequest$1, t as HideCustomFieldResponse$1, u as UpdateCustomFieldsOrderRequest$1, c as UpdateCustomFieldsOrderResponse$1 } from './members-v1-custom-field-custom-fields.universal-wLUe-xOh.mjs';

interface CustomField {
    /**
     * Custom field ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Custom field title.
     * @minLength 1
     * @maxLength 150
     */
    name?: string | null;
    /**
     * Custom field key.
     * @readonly
     */
    key?: string | null;
    /** Privacy level of the custom field. */
    defaultPrivacy?: Privacy;
    /** Type of information to provide for members. */
    fieldType?: Type;
    /** Social network type. */
    socialType?: SocialTypeType;
    /**
     * Field origin.
     * @readonly
     */
    fieldOrigin?: Origin;
    /**
     * Which members will have the custom field in their profile.
     * @readonly
     */
    appliesTo?: AppliesTo;
    /**
     * A section which the field belongs to.
     * @readonly
     */
    section?: Section;
    /**
     * Date and time when the field was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time when the field was updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */
    revision?: string | null;
}
declare enum Privacy {
    /** Unknown privacy. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** The information appears on the members' public profile pages. */
    PUBLIC = "PUBLIC",
    /** Only the member can see this information. */
    PRIVATE = "PRIVATE"
}
declare enum Type {
    /** Unknown field type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** A text box to write text. */
    TEXT = "TEXT",
    /** Only a number can be entered into the field. */
    NUMBER = "NUMBER",
    /** Only a date can be entered into the field. */
    DATE = "DATE",
    /** Only a URL can be entered into the field. */
    URL = "URL",
    /** Only a link from the selected social media platform can be entered into the field. */
    SOCIAL = "SOCIAL"
}
declare enum SocialTypeType {
    /** Unknown social type. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Facebook social media platform. */
    FACEBOOK = "FACEBOOK",
    /** Instagram social media platform. */
    INSTAGRAM = "INSTAGRAM",
    /** LinkedIn social media platform. */
    LINKEDIN = "LINKEDIN",
    /** X (formerly Twitter) social media platform. */
    TWITTER = "TWITTER",
    /** Youtube social media platform. */
    YOUTUBE = "YOUTUBE",
    /** Pinterest social media platform. */
    PINTEREST = "PINTEREST",
    /** TikTok social media platform. */
    TIKTOK = "TIKTOK",
    /** DeviantArt social media platform. */
    DEVIANTART = "DEVIANTART",
    /** SoundCloud social media platform. */
    SOUNDCLOUD = "SOUNDCLOUD",
    /** Tumblr social media platform. */
    TUMBLR = "TUMBLR",
    /** Vimeo social media platform. */
    VIMEO = "VIMEO",
    /** VKontakte social media platform. */
    VKONTAKTE = "VKONTAKTE",
    /** Odnoklassniki social media platform. */
    ODNOKLASSNIKI = "ODNOKLASSNIKI",
    /** Other social media platform. */
    OTHER = "OTHER"
}
declare enum Origin {
    /** Unknown field origin. This value isn't used. */
    UNKNOWN = "UNKNOWN",
    /** Custom field created by a Wix user. */
    CUSTOM = "CUSTOM",
    /** Contact type of field. These are default fields that are already provided by Members Area, such as: "birth date", "position", "company". */
    CONTACT = "CONTACT",
    /** System fields, such as: "first name", "last name", "email", "phone", "address", and  "title". Some system fields are only available from the dashboard. */
    SYSTEM = "SYSTEM"
}
declare enum AppliesTo {
    /** Everyone will have this field. */
    ALL_MEMBERS = "ALL_MEMBERS",
    /** Only selected members will have this field. See the Custom Field Application API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/custom-field-applications/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/custom-fields/custom-field-applications/introduction)) for more information. */
    SELECTED_MEMBERS = "SELECTED_MEMBERS"
}
declare enum Section {
    /** General section. All custom fields and the following default fields are assigned to this section: "first name", "last name", "email", "phone", "birth date", "position", "company". */
    GENERAL = "GENERAL",
    /** Social media section. The "social media" field is assigned to this section. */
    SOCIAL = "SOCIAL",
    /** Display info section. The default "title" field is assigned to this section. */
    DISPLAY_INFO = "DISPLAY_INFO",
    /** Address section. The default "address" field is assigned to this section. */
    ADDRESS = "ADDRESS"
}
interface CreateCustomFieldRequest {
    /** Custom field to create. */
    field: CustomField;
}
interface CreateCustomFieldResponse {
    /** Created custom field. */
    field?: CustomField;
}
interface GetCustomFieldRequest {
    /**
     * Custom field ID.
     * @format GUID
     */
    id: string | null;
}
interface GetCustomFieldResponse {
    /** The retrieved custom field. */
    field?: CustomField;
}
interface ListCustomFieldsRequest {
    paging?: Paging;
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface ListCustomFieldsResponse {
    /** Retrieved fields. */
    fields?: CustomField[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface UpdateCustomFieldRequest {
    /** Custom field details to update. */
    field: CustomField;
}
interface UpdateCustomFieldResponse {
    /** Updated custom field. */
    field?: CustomField;
}
interface DeleteCustomFieldRequest {
    /**
     * ID of the custom field to delete.
     * @format GUID
     */
    id: string | null;
    /** Revision number. */
    revision: string | null;
}
interface DeleteCustomFieldResponse {
}
interface HideCustomFieldRequest {
    /**
     * ID of the custom field to hide.
     * @format GUID
     */
    id: string | null;
    /** Revision number. */
    revision: string | null;
}
interface HideCustomFieldResponse {
}
interface UpdateCustomFieldsOrderRequest {
    /**
     * IDs of the custom fields to be reordered.
     * @minSize 1
     * @maxSize 100
     */
    fieldIds: string[];
    /** The section which the fields belong to. */
    section?: Section;
}
interface UpdateCustomFieldsOrderResponse {
    /** Reordered custom fields. */
    fields?: CustomField[];
    /** The section which the fields belong to. */
    section?: Section;
}

type __PublicMethodMetaInfo<K = string, M = unknown, T = unknown, S = unknown, Q = unknown, R = unknown> = {
    getUrl: (context: any) => string;
    httpMethod: K;
    path: string;
    pathParams: M;
    __requestType: T;
    __originalRequestType: S;
    __responseType: Q;
    __originalResponseType: R;
};
declare function createCustomField(): __PublicMethodMetaInfo<'POST', {}, CreateCustomFieldRequest$1, CreateCustomFieldRequest, CreateCustomFieldResponse$1, CreateCustomFieldResponse>;
declare function getCustomField(): __PublicMethodMetaInfo<'GET', {
    id: string;
}, GetCustomFieldRequest$1, GetCustomFieldRequest, GetCustomFieldResponse$1, GetCustomFieldResponse>;
declare function listCustomFields(): __PublicMethodMetaInfo<'GET', {}, ListCustomFieldsRequest$1, ListCustomFieldsRequest, ListCustomFieldsResponse$1, ListCustomFieldsResponse>;
declare function updateCustomField(): __PublicMethodMetaInfo<'PATCH', {
    fieldId: string;
}, UpdateCustomFieldRequest$1, UpdateCustomFieldRequest, UpdateCustomFieldResponse$1, UpdateCustomFieldResponse>;
declare function deleteCustomField(): __PublicMethodMetaInfo<'DELETE', {
    id: string;
}, DeleteCustomFieldRequest$1, DeleteCustomFieldRequest, DeleteCustomFieldResponse$1, DeleteCustomFieldResponse>;
declare function hideCustomField(): __PublicMethodMetaInfo<'POST', {
    id: string;
}, HideCustomFieldRequest$1, HideCustomFieldRequest, HideCustomFieldResponse$1, HideCustomFieldResponse>;
declare function updateCustomFieldsOrder(): __PublicMethodMetaInfo<'POST', {}, UpdateCustomFieldsOrderRequest$1, UpdateCustomFieldsOrderRequest, UpdateCustomFieldsOrderResponse$1, UpdateCustomFieldsOrderResponse>;

export { type __PublicMethodMetaInfo, createCustomField, deleteCustomField, getCustomField, hideCustomField, listCustomFields, updateCustomField, updateCustomFieldsOrder };
