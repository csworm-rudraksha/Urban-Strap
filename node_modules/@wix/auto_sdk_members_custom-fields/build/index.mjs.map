{"version":3,"sources":["../src/members-v1-custom-field-custom-fields.universal.ts","../src/members-v1-custom-field-custom-fields.http.ts","../src/members-v1-custom-field-custom-fields.public.ts","../src/members-v1-custom-field-custom-fields.context.ts"],"sourcesContent":["import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixMembersV1CustomField from './members-v1-custom-field-custom-fields.http.js';\n\nexport interface CustomField {\n  /**\n   * Custom field ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Custom field title.\n   * @minLength 1\n   * @maxLength 150\n   */\n  name?: string | null;\n  /**\n   * Custom field key.\n   * @readonly\n   */\n  key?: string | null;\n  /** Privacy level of the custom field. */\n  defaultPrivacy?: Privacy;\n  /** Type of information to provide for members. */\n  fieldType?: Type;\n  /** Social network type. */\n  socialType?: SocialTypeType;\n  /**\n   * Field origin.\n   * @readonly\n   */\n  fieldOrigin?: Origin;\n  /**\n   * Which members will have the custom field in their profile.\n   * @readonly\n   */\n  appliesTo?: AppliesTo;\n  /**\n   * A section which the field belongs to.\n   * @readonly\n   */\n  section?: Section;\n  /**\n   * Date and time when the field was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time when the field was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */\n  revision?: string | null;\n}\n\nexport enum Privacy {\n  /** Unknown privacy. This value isn't used. */\n  UNKNOWN = 'UNKNOWN',\n  /** The information appears on the members' public profile pages. */\n  PUBLIC = 'PUBLIC',\n  /** Only the member can see this information. */\n  PRIVATE = 'PRIVATE',\n}\n\nexport enum Type {\n  /** Unknown field type. This value isn't used. */\n  UNKNOWN = 'UNKNOWN',\n  /** A text box to write text. */\n  TEXT = 'TEXT',\n  /** Only a number can be entered into the field. */\n  NUMBER = 'NUMBER',\n  /** Only a date can be entered into the field. */\n  DATE = 'DATE',\n  /** Only a URL can be entered into the field. */\n  URL = 'URL',\n  /** Only a link from the selected social media platform can be entered into the field. */\n  SOCIAL = 'SOCIAL',\n}\n\nexport enum SocialTypeType {\n  /** Unknown social type. This value isn't used. */\n  UNKNOWN = 'UNKNOWN',\n  /** Facebook social media platform. */\n  FACEBOOK = 'FACEBOOK',\n  /** Instagram social media platform. */\n  INSTAGRAM = 'INSTAGRAM',\n  /** LinkedIn social media platform. */\n  LINKEDIN = 'LINKEDIN',\n  /** X (formerly Twitter) social media platform. */\n  TWITTER = 'TWITTER',\n  /** Youtube social media platform. */\n  YOUTUBE = 'YOUTUBE',\n  /** Pinterest social media platform. */\n  PINTEREST = 'PINTEREST',\n  /** TikTok social media platform. */\n  TIKTOK = 'TIKTOK',\n  /** DeviantArt social media platform. */\n  DEVIANTART = 'DEVIANTART',\n  /** SoundCloud social media platform. */\n  SOUNDCLOUD = 'SOUNDCLOUD',\n  /** Tumblr social media platform. */\n  TUMBLR = 'TUMBLR',\n  /** Vimeo social media platform. */\n  VIMEO = 'VIMEO',\n  /** VKontakte social media platform. */\n  VKONTAKTE = 'VKONTAKTE',\n  /** Odnoklassniki social media platform. */\n  ODNOKLASSNIKI = 'ODNOKLASSNIKI',\n  /** Other social media platform. */\n  OTHER = 'OTHER',\n}\n\nexport enum Origin {\n  /** Unknown field origin. This value isn't used. */\n  UNKNOWN = 'UNKNOWN',\n  /** Custom field created by a Wix user. */\n  CUSTOM = 'CUSTOM',\n  /** Contact type of field. These are default fields that are already provided by Members Area, such as: \"birth date\", \"position\", \"company\". */\n  CONTACT = 'CONTACT',\n  /** System fields, such as: \"first name\", \"last name\", \"email\", \"phone\", \"address\", and  \"title\". Some system fields are only available from the dashboard. */\n  SYSTEM = 'SYSTEM',\n}\n\nexport enum AppliesTo {\n  /** Everyone will have this field. */\n  ALL_MEMBERS = 'ALL_MEMBERS',\n  /** Only selected members will have this field. See the Custom Field Application API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/custom-field-applications/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/custom-fields/custom-field-applications/introduction)) for more information. */\n  SELECTED_MEMBERS = 'SELECTED_MEMBERS',\n}\n\nexport enum Section {\n  /** General section. All custom fields and the following default fields are assigned to this section: \"first name\", \"last name\", \"email\", \"phone\", \"birth date\", \"position\", \"company\". */\n  GENERAL = 'GENERAL',\n  /** Social media section. The \"social media\" field is assigned to this section. */\n  SOCIAL = 'SOCIAL',\n  /** Display info section. The default \"title\" field is assigned to this section. */\n  DISPLAY_INFO = 'DISPLAY_INFO',\n  /** Address section. The default \"address\" field is assigned to this section. */\n  ADDRESS = 'ADDRESS',\n}\n\nexport interface CreateCustomFieldRequest {\n  /** Custom field to create. */\n  field: CustomField;\n}\n\nexport interface CreateCustomFieldResponse {\n  /** Created custom field. */\n  field?: CustomField;\n}\n\nexport interface IncorrectFieldTypeData {\n  incorrectType?: Type;\n  correctType?: Type;\n}\n\nexport interface IncorrectPrivacyData {\n  incorrectPrivacy?: Privacy;\n  correctPrivacy?: Privacy;\n}\n\nexport interface InvalidSocialTypeData {\n  invalidSocialType?: SocialTypeType;\n}\n\nexport interface GetCustomFieldRequest {\n  /**\n   * Custom field ID.\n   * @format GUID\n   */\n  _id: string | null;\n}\n\nexport interface GetCustomFieldResponse {\n  /** The retrieved custom field. */\n  field?: CustomField;\n}\n\nexport interface ListCustomFieldsRequest {\n  paging?: Paging;\n}\n\nexport interface Paging {\n  /** Number of items to load. */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface ListCustomFieldsResponse {\n  /** Retrieved fields. */\n  fields?: CustomField[];\n  /** Metadata for the paginated results. */\n  metadata?: PagingMetadata;\n}\n\nexport interface PagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Offset that was requested. */\n  offset?: number | null;\n  /** Total number of items that match the query. */\n  total?: number | null;\n  /** Flag that indicates the server failed to calculate the `total` field. */\n  tooManyToCount?: boolean | null;\n}\n\nexport interface UpdateCustomFieldRequest {\n  /** Custom field details to update. */\n  field: CustomField;\n}\n\nexport interface UpdateCustomFieldResponse {\n  /** Updated custom field. */\n  field?: CustomField;\n}\n\nexport interface DefaultPrivacyChanged {\n  fromPrivacy?: Privacy;\n  toPrivacy?: Privacy;\n}\n\nexport interface ReservedFieldNameNonEditable {\n  newName?: string;\n  currentName?: string;\n}\n\nexport interface DeleteCustomFieldRequest {\n  /**\n   * ID of the custom field to delete.\n   * @format GUID\n   */\n  _id: string | null;\n  /** Revision number. */\n  revision: string | null;\n}\n\nexport interface DeleteCustomFieldResponse {}\n\nexport interface HideCustomFieldRequest {\n  /**\n   * ID of the custom field to hide.\n   * @format GUID\n   */\n  _id: string | null;\n  /** Revision number. */\n  revision: string | null;\n}\n\nexport interface HideCustomFieldResponse {}\n\nexport interface UpdateCustomFieldsOrderRequest {\n  /**\n   * IDs of the custom fields to be reordered.\n   * @minSize 1\n   * @maxSize 100\n   */\n  fieldIds: string[];\n  /** The section which the fields belong to. */\n  section?: Section;\n}\n\nexport interface UpdateCustomFieldsOrderResponse {\n  /** Reordered custom fields. */\n  fields?: CustomField[];\n  /** The section which the fields belong to. */\n  section?: Section;\n}\n\nexport interface MetaSiteSpecialEvent extends MetaSiteSpecialEventPayloadOneOf {\n  /** Emitted on a meta site creation. */\n  siteCreated?: SiteCreated;\n  /** Emitted on a meta site transfer completion. */\n  siteTransferred?: SiteTransferred;\n  /** Emitted on a meta site deletion. */\n  siteDeleted?: SiteDeleted;\n  /** Emitted on a meta site restoration. */\n  siteUndeleted?: SiteUndeleted;\n  /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */\n  sitePublished?: SitePublished;\n  /** Emitted on a meta site unpublish. */\n  siteUnpublished?: SiteUnpublished;\n  /** Emitted when meta site is marked as template. */\n  siteMarkedAsTemplate?: SiteMarkedAsTemplate;\n  /** Emitted when meta site is marked as a WixSite. */\n  siteMarkedAsWixSite?: SiteMarkedAsWixSite;\n  /** Emitted when an application is provisioned (installed). */\n  serviceProvisioned?: ServiceProvisioned;\n  /** Emitted when an application is removed (uninstalled). */\n  serviceRemoved?: ServiceRemoved;\n  /** Emitted when meta site name (URL slug) is changed. */\n  siteRenamedPayload?: SiteRenamed;\n  /** Emitted when meta site was permanently deleted. */\n  hardDeleted?: SiteHardDeleted;\n  /** Emitted on a namespace change. */\n  namespaceChanged?: NamespaceChanged;\n  /** Emitted when Studio is attached. */\n  studioAssigned?: StudioAssigned;\n  /** Emitted when Studio is detached. */\n  studioUnassigned?: StudioUnassigned;\n  /**\n   * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch\n   * the actual URL.\n   *\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459\n   */\n  urlChanged?: SiteUrlChanged;\n  /** Site is marked as PurgedExternally */\n  sitePurgedExternally?: SitePurgedExternally;\n  /**\n   * A meta site id.\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /** A meta site version. Monotonically increasing. */\n  version?: string;\n  /** A timestamp of the event. */\n  timestamp?: string;\n  /**\n   * TODO(meta-site): Change validation once validations are disabled for consumers\n   * More context: https://wix.slack.com/archives/C0UHEBPFT/p1720957844413149 and https://wix.slack.com/archives/CFWKX325T/p1728892152855659\n   * @maxSize 4000\n   */\n  assets?: Asset[];\n}\n\n/** @oneof */\nexport interface MetaSiteSpecialEventPayloadOneOf {\n  /** Emitted on a meta site creation. */\n  siteCreated?: SiteCreated;\n  /** Emitted on a meta site transfer completion. */\n  siteTransferred?: SiteTransferred;\n  /** Emitted on a meta site deletion. */\n  siteDeleted?: SiteDeleted;\n  /** Emitted on a meta site restoration. */\n  siteUndeleted?: SiteUndeleted;\n  /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */\n  sitePublished?: SitePublished;\n  /** Emitted on a meta site unpublish. */\n  siteUnpublished?: SiteUnpublished;\n  /** Emitted when meta site is marked as template. */\n  siteMarkedAsTemplate?: SiteMarkedAsTemplate;\n  /** Emitted when meta site is marked as a WixSite. */\n  siteMarkedAsWixSite?: SiteMarkedAsWixSite;\n  /** Emitted when an application is provisioned (installed). */\n  serviceProvisioned?: ServiceProvisioned;\n  /** Emitted when an application is removed (uninstalled). */\n  serviceRemoved?: ServiceRemoved;\n  /** Emitted when meta site name (URL slug) is changed. */\n  siteRenamedPayload?: SiteRenamed;\n  /** Emitted when meta site was permanently deleted. */\n  hardDeleted?: SiteHardDeleted;\n  /** Emitted on a namespace change. */\n  namespaceChanged?: NamespaceChanged;\n  /** Emitted when Studio is attached. */\n  studioAssigned?: StudioAssigned;\n  /** Emitted when Studio is detached. */\n  studioUnassigned?: StudioUnassigned;\n  /**\n   * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch\n   * the actual URL.\n   *\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459\n   */\n  urlChanged?: SiteUrlChanged;\n  /** Site is marked as PurgedExternally */\n  sitePurgedExternally?: SitePurgedExternally;\n}\n\nexport interface Asset {\n  /**\n   * An application definition id (app_id in dev-center). For legacy reasons may be UUID or a string (from Java Enum).\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * An instance id. For legacy reasons may be UUID or a string.\n   * @maxLength 200\n   */\n  instanceId?: string;\n  /** An application state. */\n  state?: State;\n}\n\nexport enum State {\n  UNKNOWN = 'UNKNOWN',\n  ENABLED = 'ENABLED',\n  DISABLED = 'DISABLED',\n  PENDING = 'PENDING',\n  DEMO = 'DEMO',\n}\n\nexport interface SiteCreated {\n  /**\n   * A template identifier (empty if not created from a template).\n   * @maxLength 36\n   */\n  originTemplateId?: string;\n  /**\n   * An account id of the owner.\n   * @format GUID\n   */\n  ownerId?: string;\n  /** A context in which meta site was created. */\n  context?: SiteCreatedContext;\n  /**\n   * A meta site id from which this site was created.\n   *\n   * In case of a creation from a template it's a template id.\n   * In case of a site duplication (\"Save As\" in dashboard or duplicate in UM) it's an id of a source site.\n   * @format GUID\n   */\n  originMetaSiteId?: string | null;\n  /**\n   * A meta site name (URL slug).\n   * @maxLength 20\n   */\n  siteName?: string;\n  /** A namespace. */\n  namespace?: Namespace;\n}\n\nexport enum SiteCreatedContext {\n  /** A valid option, we don't expose all reasons why site might be created. */\n  OTHER = 'OTHER',\n  /** A meta site was created from template. */\n  FROM_TEMPLATE = 'FROM_TEMPLATE',\n  /** A meta site was created by copying of the transfferred meta site. */\n  DUPLICATE_BY_SITE_TRANSFER = 'DUPLICATE_BY_SITE_TRANSFER',\n  /** A copy of existing meta site. */\n  DUPLICATE = 'DUPLICATE',\n  /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */\n  OLD_SITE_TRANSFER = 'OLD_SITE_TRANSFER',\n  /** deprecated A meta site was created for Flash editor. */\n  FLASH = 'FLASH',\n}\n\nexport enum Namespace {\n  UNKNOWN_NAMESPACE = 'UNKNOWN_NAMESPACE',\n  /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */\n  WIX = 'WIX',\n  /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  SHOUT_OUT = 'SHOUT_OUT',\n  /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  ALBUMS = 'ALBUMS',\n  /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  WIX_STORES_TEST_DRIVE = 'WIX_STORES_TEST_DRIVE',\n  /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  HOTELS = 'HOTELS',\n  /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  CLUBS = 'CLUBS',\n  /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  ONBOARDING_DRAFT = 'ONBOARDING_DRAFT',\n  /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  DEV_SITE = 'DEV_SITE',\n  /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  LOGOS = 'LOGOS',\n  /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  VIDEO_MAKER = 'VIDEO_MAKER',\n  /** MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  PARTNER_DASHBOARD = 'PARTNER_DASHBOARD',\n  /** MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  DEV_CENTER_COMPANY = 'DEV_CENTER_COMPANY',\n  /**\n   * A draft created by HTML editor on open. Upon \"first save\" it will be moved to be of WIX domain.\n   *\n   * Meta site with this namespace will *not* be shown in a user's site list by default.\n   */\n  HTML_DRAFT = 'HTML_DRAFT',\n  /**\n   * the user-journey for Fitness users who want to start from managing their business instead of designing their website.\n   * Will be accessible from Site List and will not have a website app.\n   * Once the user attaches a site, the site will become a regular wixsite.\n   */\n  SITELESS_BUSINESS = 'SITELESS_BUSINESS',\n  /** Belongs to \"strategic products\" company. Supports new product in the creator's economy space. */\n  CREATOR_ECONOMY = 'CREATOR_ECONOMY',\n  /** It is to be used in the Business First efforts. */\n  DASHBOARD_FIRST = 'DASHBOARD_FIRST',\n  /** Bookings business flow with no site. */\n  ANYWHERE = 'ANYWHERE',\n  /** Namespace for Headless Backoffice with no editor */\n  HEADLESS = 'HEADLESS',\n  /**\n   * Namespace for master site that will exist in parent account that will be referenced by subaccounts\n   * The site will be used for account level CSM feature for enterprise\n   */\n  ACCOUNT_MASTER_CMS = 'ACCOUNT_MASTER_CMS',\n  /** Rise.ai Siteless account management for Gift Cards and Store Credit. */\n  RISE = 'RISE',\n  /**\n   * As part of the branded app new funnel, users now can create a meta site that will be branded app first.\n   * There's a blank site behind the scene but it's blank).\n   * The Mobile company will be the owner of this namespace.\n   */\n  BRANDED_FIRST = 'BRANDED_FIRST',\n  /** Nownia.com Siteless account management for Ai Scheduling Assistant. */\n  NOWNIA = 'NOWNIA',\n  /**\n   * UGC Templates are templates that are created by users for personal use and to sale to other users.\n   * The Partners company owns this namespace.\n   */\n  UGC_TEMPLATE = 'UGC_TEMPLATE',\n  /** Codux Headless Sites */\n  CODUX = 'CODUX',\n  /** Bobb - AI Design Creator. */\n  MEDIA_DESIGN_CREATOR = 'MEDIA_DESIGN_CREATOR',\n  /**\n   * Shared Blog Site is a unique single site across Enterprise account,\n   * This site will hold all Blog posts related to the Marketing product.\n   */\n  SHARED_BLOG_ENTERPRISE = 'SHARED_BLOG_ENTERPRISE',\n  /** Standalone forms (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  STANDALONE_FORMS = 'STANDALONE_FORMS',\n  /** Standalone events (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  STANDALONE_EVENTS = 'STANDALONE_EVENTS',\n  /** MIMIR - Siteless account for MIMIR Ai Job runner. */\n  MIMIR = 'MIMIR',\n}\n\n/** Site transferred to another user. */\nexport interface SiteTransferred {\n  /**\n   * A previous owner id (user that transfers meta site).\n   * @format GUID\n   */\n  oldOwnerId?: string;\n  /**\n   * A new owner id (user that accepts meta site).\n   * @format GUID\n   */\n  newOwnerId?: string;\n}\n\n/** Soft deletion of the meta site. Could be restored. */\nexport interface SiteDeleted {\n  /** A deletion context. */\n  deleteContext?: DeleteContext;\n}\n\nexport interface DeleteContext {\n  /** When the meta site was deleted. */\n  dateDeleted?: Date | null;\n  /** A status. */\n  deleteStatus?: DeleteStatus;\n  /**\n   * A reason (flow).\n   * @maxLength 255\n   */\n  deleteOrigin?: string;\n  /**\n   * A service that deleted it.\n   * @maxLength 255\n   */\n  initiatorId?: string | null;\n}\n\nexport enum DeleteStatus {\n  UNKNOWN = 'UNKNOWN',\n  TRASH = 'TRASH',\n  DELETED = 'DELETED',\n  PENDING_PURGE = 'PENDING_PURGE',\n  PURGED_EXTERNALLY = 'PURGED_EXTERNALLY',\n}\n\n/** Restoration of the meta site. */\nexport interface SiteUndeleted {}\n\n/** First publish of a meta site. Or subsequent publish after unpublish. */\nexport interface SitePublished {}\n\nexport interface SiteUnpublished {\n  /**\n   * A list of URLs previously associated with the meta site.\n   * @maxLength 4000\n   * @maxSize 10000\n   */\n  urls?: string[];\n}\n\nexport interface SiteMarkedAsTemplate {}\n\nexport interface SiteMarkedAsWixSite {}\n\n/**\n * Represents a service provisioned a site.\n *\n * Note on `origin_instance_id`:\n * There is no guarantee that you will be able to find a meta site using `origin_instance_id`.\n * This is because of the following scenario:\n *\n * Imagine you have a template where a third-party application (TPA) includes some stub data,\n * such as a product catalog. When you create a site from this template, you inherit this\n * default product catalog. However, if the template's product catalog is modified,\n * your site will retain the catalog as it was at the time of site creation. This ensures that\n * your site remains consistent with what you initially received and does not include any\n * changes made to the original template afterward.\n * To ensure this, the TPA on the template gets a new instance_id.\n */\nexport interface ServiceProvisioned {\n  /**\n   * Either UUID or EmbeddedServiceType.\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * Not only UUID. Something here could be something weird.\n   * @maxLength 36\n   */\n  instanceId?: string;\n  /**\n   * An instance id from which this instance is originated.\n   * @maxLength 36\n   */\n  originInstanceId?: string;\n  /**\n   * A version.\n   * @maxLength 500\n   */\n  version?: string | null;\n  /**\n   * The origin meta site id\n   * @format GUID\n   */\n  originMetaSiteId?: string | null;\n}\n\nexport interface ServiceRemoved {\n  /**\n   * Either UUID or EmbeddedServiceType.\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * Not only UUID. Something here could be something weird.\n   * @maxLength 36\n   */\n  instanceId?: string;\n  /**\n   * A version.\n   * @maxLength 500\n   */\n  version?: string | null;\n}\n\n/** Rename of the site. Meaning, free public url has been changed as well. */\nexport interface SiteRenamed {\n  /**\n   * A new meta site name (URL slug).\n   * @maxLength 20\n   */\n  newSiteName?: string;\n  /**\n   * A previous meta site name (URL slug).\n   * @maxLength 255\n   */\n  oldSiteName?: string;\n}\n\n/**\n * Hard deletion of the meta site.\n *\n * Could not be restored. Therefore it's desirable to cleanup data.\n */\nexport interface SiteHardDeleted {\n  /** A deletion context. */\n  deleteContext?: DeleteContext;\n}\n\nexport interface NamespaceChanged {\n  /** A previous namespace. */\n  oldNamespace?: Namespace;\n  /** A new namespace. */\n  newNamespace?: Namespace;\n}\n\n/** Assigned Studio editor */\nexport interface StudioAssigned {}\n\n/** Unassigned Studio editor */\nexport interface StudioUnassigned {}\n\n/**\n * Fired in case site URLs were changed in any way: new secondary domain, published, account slug rename, site rename etc.\n *\n * This is an internal event, it's not propagated in special events, because it's non-actionable. If you need to keep up\n * with sites and its urls, you need to listen to another topic/event. Read about it:\n *\n * https://bo.wix.com/wix-docs/rest/meta-site/meta-site---urls-service\n */\nexport interface SiteUrlChanged {}\n\n/**\n * Used at the end of the deletion flow for both draft sites and when a user deletes a site.\n * Consumed by other teams to remove relevant data.\n */\nexport interface SitePurgedExternally {\n  /**\n   * @maxLength 2048\n   * @maxSize 100\n   * @deprecated\n   * @targetRemovalDate 2025-04-15\n   */\n  appDefId?: string[];\n}\n\nexport interface Empty {}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /**\n   * Unique event ID.\n   * Allows clients to ignore duplicate webhooks.\n   */\n  _id?: string;\n  /**\n   * Assumes actions are also always typed to an entity_type\n   * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction\n   */\n  entityFqdn?: string;\n  /**\n   * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\n   * This is although the created/updated/deleted notion is duplication of the oneof types\n   * Example: created/updated/deleted/started/completed/email_opened\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number defining the order of updates to the underlying entity.\n   * For example, given that some entity was updated at 16:00 and than again at 16:01,\n   * it is guaranteed that the sequence number of the second update is strictly higher than the first.\n   * As the consumer, you can use this value to ensure that you handle messages in the correct order.\n   * To do so, you will need to persist this number on your end, and compare the sequence number from the\n   * message against the one you have stored. Given that the stored number is higher, you should ignore the message.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityType;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\ntype CustomFieldNonNullablePaths =\n  | `defaultPrivacy`\n  | `fieldType`\n  | `socialType`\n  | `fieldOrigin`\n  | `appliesTo`\n  | `section`;\n\n/**\n * Creates a custom field.\n * @param field - Custom field to create.\n * @public\n * @documentationMaturity preview\n * @requiredField field\n * @requiredField field.name\n * @permissionId MEMBERS.CUSTOM_FIELDS_CREATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @returns Created custom field.\n * @fqn com.wixpress.members.customfields.CustomFields.CreateCustomField\n */\nexport async function createCustomField(\n  field: NonNullablePaths<CustomField, `name`>\n): Promise<NonNullablePaths<CustomField, CustomFieldNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ field: field });\n\n  const reqOpts = ambassadorWixMembersV1CustomField.createCustomField(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.field!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { field: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['field']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a custom field by ID.\n * @param _id - Custom field ID.\n * @public\n * @documentationMaturity preview\n * @requiredField _id\n * @permissionId MEMBERS.CUSTOM_FIELDS_READ\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.members.customfields.CustomFields.GetCustomField\n */\nexport async function getCustomField(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    GetCustomFieldResponse,\n    {\n      [P in CustomFieldNonNullablePaths]: `field.${P}`;\n    }[CustomFieldNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1CustomField.getCustomField(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves a list of custom fields and fields provided by Members Area, given the provided paging.\n *\n * The fields are ordered by section in the following sequence:\n * - `GENERAL`\n * - `DISPLAY_INFO`\n * - `SOCIAL`\n *\n * The fields in the same section are ordered by the field creation date.\n *\n * To change the order of fields in sections, call Update Custom Fields Order.\n * @public\n * @documentationMaturity preview\n * @fqn com.wixpress.members.customfields.CustomFields.ListCustomFields\n */\nexport async function listCustomFields(\n  options?: ListCustomFieldsOptions\n): Promise<\n  NonNullablePaths<\n    ListCustomFieldsResponse,\n    {\n      [P in CustomFieldNonNullablePaths]: `fields.${number}.${P}`;\n    }[CustomFieldNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    paging: options?.paging,\n  });\n\n  const reqOpts = ambassadorWixMembersV1CustomField.listCustomFields(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { paging: '$[0].paging' },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ListCustomFieldsOptions {\n  paging?: Paging;\n}\n\n/**\n * Updates a custom field.\n *\n * For custom fields you can update the following fields: `name`, `defaultPrivacy`, and `socialType`.\n *\n * For system fields you can only update the `defaultPrivacy` field.\n * @param _id - Custom field ID.\n * @public\n * @documentationMaturity preview\n * @requiredField _id\n * @requiredField field\n * @requiredField field.revision\n * @permissionId MEMBERS.CUSTOM_FIELDS_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @returns Updated custom field.\n * @fqn com.wixpress.members.customfields.CustomFields.UpdateCustomField\n */\nexport async function updateCustomField(\n  _id: string,\n  field: NonNullablePaths<UpdateCustomField, `revision`>\n): Promise<NonNullablePaths<CustomField, CustomFieldNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    field: { ...field, id: _id },\n  });\n\n  const reqOpts = ambassadorWixMembersV1CustomField.updateCustomField(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.field!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { field: '$[1]' },\n        explicitPathsToArguments: { 'field.id': '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'field']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateCustomField {\n  /**\n   * Custom field ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Custom field title.\n   * @minLength 1\n   * @maxLength 150\n   */\n  name?: string | null;\n  /**\n   * Custom field key.\n   * @readonly\n   */\n  key?: string | null;\n  /** Privacy level of the custom field. */\n  defaultPrivacy?: Privacy;\n  /** Type of information to provide for members. */\n  fieldType?: Type;\n  /** Social network type. */\n  socialType?: SocialTypeType;\n  /**\n   * Field origin.\n   * @readonly\n   */\n  fieldOrigin?: Origin;\n  /**\n   * Which members will have the custom field in their profile.\n   * @readonly\n   */\n  appliesTo?: AppliesTo;\n  /**\n   * A section which the field belongs to.\n   * @readonly\n   */\n  section?: Section;\n  /**\n   * Date and time when the field was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time when the field was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /** Revision number, which increments by 1 each time the custom field is updated. To prevent conflicting changes, the existing revision must be used when updating a custom field. */\n  revision?: string | null;\n}\n\n/**\n * Deletes a custom field and removes the corresponding column from the [Contact List](https://support.wix.com/en/article/wix-contacts-managing-your-contact-list)\n * display. The custom field is no longer suggested when adding custom fields.\n * @param _id - ID of the custom field to delete.\n * @param revision - Revision number.\n * @public\n * @documentationMaturity preview\n * @requiredField _id\n * @requiredField revision\n * @permissionId MEMBERS.CUSTOM_FIELDS_DELETE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.customfields.CustomFields.DeleteCustomField\n */\nexport async function deleteCustomField(\n  _id: string,\n  revision: string\n): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    revision: revision,\n  });\n\n  const reqOpts = ambassadorWixMembersV1CustomField.deleteCustomField(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', revision: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'revision']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Hides a custom field from the custom fields list, yet it's still available as a suggested field\n * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/custom-field-suggestions/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/custom-fields/custom-field-suggestions/introduction))\n * to add later.\n *\n * The related contacts custom field will still be available in the [Contact List](https://support.wix.com/en/article/wix-contacts-managing-your-contact-list).\n * @param _id - ID of the custom field to hide.\n * @param revision - Revision number.\n * @public\n * @documentationMaturity preview\n * @requiredField _id\n * @requiredField revision\n * @permissionId MEMBERS.CUSTOM_FIELDS_HIDE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.customfields.CustomFields.HideCustomField\n */\nexport async function hideCustomField(\n  _id: string,\n  revision: string\n): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    revision: revision,\n  });\n\n  const reqOpts = ambassadorWixMembersV1CustomField.hideCustomField(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', revision: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'revision']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates the order of custom fields in a section.\n * @param fieldIds - IDs of the custom fields to be reordered.\n * @public\n * @documentationMaturity preview\n * @requiredField fieldIds\n * @permissionId MEMBERS.CUSTOM_FIELDS_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.customfields.CustomFields.UpdateCustomFieldsOrder\n */\nexport async function updateCustomFieldsOrder(\n  fieldIds: string[],\n  options?: UpdateCustomFieldsOrderOptions\n): Promise<\n  NonNullablePaths<\n    UpdateCustomFieldsOrderResponse,\n    | {\n        [P in CustomFieldNonNullablePaths]: `fields.${number}.${P}`;\n      }[CustomFieldNonNullablePaths]\n    | `section`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    fieldIds: fieldIds,\n    section: options?.section,\n  });\n\n  const reqOpts =\n    ambassadorWixMembersV1CustomField.updateCustomFieldsOrder(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { fieldIds: '$[0]', section: '$[1].section' },\n        singleArgumentUnchanged: false,\n      },\n      ['fieldIds', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateCustomFieldsOrderOptions {\n  /** The section which the fields belong to. */\n  section?: Section;\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressMembersCustomfieldsCustomFieldsUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/members/v1/custom-fields',\n        destPath: '/v1/custom-fields',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/members/v1/custom-fields',\n        destPath: '/v1/custom-fields',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/members/v1/custom-fields',\n        destPath: '/v1/custom-fields',\n      },\n    ],\n    'www.wixapis.com': [\n      {\n        srcPath: '/members/v1/custom-fields',\n        destPath: '/v1/custom-fields',\n      },\n    ],\n    'editor-flow.wixapps.net': [\n      {\n        srcPath: '/_api/members/v1/custom-fields',\n        destPath: '/v1/custom-fields',\n      },\n    ],\n    'api._api_base_domain_': [\n      {\n        srcPath: '/members/v1/custom-fields',\n        destPath: '',\n      },\n    ],\n    'editor.wixapps.net': [\n      {\n        srcPath: '/_api/members/v1/custom-fields',\n        destPath: '/v1/custom-fields',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_members_custom-fields';\n\n/** Creates a custom field. */\nexport function createCustomField(payload: object): RequestOptionsFactory<any> {\n  function __createCustomField({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'field.createdDate' }, { path: 'field.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.members.v1.custom_field',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.members.customfields.CustomFields.CreateCustomField',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersCustomfieldsCustomFieldsUrl({\n        protoPath: '/v1/custom-fields',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'field.createdDate' },\n              { path: 'field.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createCustomField;\n}\n\n/** Retrieves a custom field by ID. */\nexport function getCustomField(payload: object): RequestOptionsFactory<any> {\n  function __getCustomField({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.custom_field',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.members.customfields.CustomFields.GetCustomField',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersCustomfieldsCustomFieldsUrl({\n        protoPath: '/v1/custom-fields/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'field.createdDate' },\n              { path: 'field.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getCustomField;\n}\n\n/**\n * Retrieves a list of custom fields and fields provided by Members Area, given the provided paging.\n *\n * The fields are ordered by section in the following sequence:\n * - `GENERAL`\n * - `DISPLAY_INFO`\n * - `SOCIAL`\n *\n * The fields in the same section are ordered by the field creation date.\n *\n * To change the order of fields in sections, call Update Custom Fields Order.\n */\nexport function listCustomFields(payload: object): RequestOptionsFactory<any> {\n  function __listCustomFields({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.custom_field',\n      method: 'GET' as any,\n      methodFqn:\n        'com.wixpress.members.customfields.CustomFields.ListCustomFields',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersCustomfieldsCustomFieldsUrl({\n        protoPath: '/v1/custom-fields',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'fields.createdDate' },\n              { path: 'fields.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listCustomFields;\n}\n\n/**\n * Updates a custom field.\n *\n * For custom fields you can update the following fields: `name`, `defaultPrivacy`, and `socialType`.\n *\n * For system fields you can only update the `defaultPrivacy` field.\n */\nexport function updateCustomField(payload: object): RequestOptionsFactory<any> {\n  function __updateCustomField({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [{ path: 'field.createdDate' }, { path: 'field.updatedDate' }],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.members.v1.custom_field',\n      method: 'PATCH' as any,\n      methodFqn:\n        'com.wixpress.members.customfields.CustomFields.UpdateCustomField',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersCustomfieldsCustomFieldsUrl({\n        protoPath: '/v1/custom-fields/{field.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'field.createdDate' },\n              { path: 'field.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateCustomField;\n}\n\n/**\n * Deletes a custom field and removes the corresponding column from the [Contact List](https://support.wix.com/en/article/wix-contacts-managing-your-contact-list)\n * display. The custom field is no longer suggested when adding custom fields.\n */\nexport function deleteCustomField(payload: object): RequestOptionsFactory<any> {\n  function __deleteCustomField({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.custom_field',\n      method: 'DELETE' as any,\n      methodFqn:\n        'com.wixpress.members.customfields.CustomFields.DeleteCustomField',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersCustomfieldsCustomFieldsUrl({\n        protoPath: '/v1/custom-fields/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteCustomField;\n}\n\n/**\n * Hides a custom field from the custom fields list, yet it's still available as a suggested field\n * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/custom-field-suggestions/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/custom-fields/custom-field-suggestions/introduction))\n * to add later.\n *\n * The related contacts custom field will still be available in the [Contact List](https://support.wix.com/en/article/wix-contacts-managing-your-contact-list).\n */\nexport function hideCustomField(payload: object): RequestOptionsFactory<any> {\n  function __hideCustomField({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.custom_field',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.members.customfields.CustomFields.HideCustomField',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersCustomfieldsCustomFieldsUrl({\n        protoPath: '/v1/custom-fields/{id}/hide',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __hideCustomField;\n}\n\n/** Updates the order of custom fields in a section. */\nexport function updateCustomFieldsOrder(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __updateCustomFieldsOrder({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.custom_field',\n      method: 'POST' as any,\n      methodFqn:\n        'com.wixpress.members.customfields.CustomFields.UpdateCustomFieldsOrder',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersCustomfieldsCustomFieldsUrl({\n        protoPath: '/v1/custom-fields/order',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'fields.createdDate' },\n              { path: 'fields.updatedDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateCustomFieldsOrder;\n}\n","import { HttpClient, NonNullablePaths } from '@wix/sdk-types';\nimport {\n  CustomField,\n  GetCustomFieldResponse,\n  ListCustomFieldsOptions,\n  ListCustomFieldsResponse,\n  UpdateCustomField,\n  UpdateCustomFieldsOrderOptions,\n  UpdateCustomFieldsOrderResponse,\n  createCustomField as universalCreateCustomField,\n  deleteCustomField as universalDeleteCustomField,\n  getCustomField as universalGetCustomField,\n  hideCustomField as universalHideCustomField,\n  listCustomFields as universalListCustomFields,\n  updateCustomField as universalUpdateCustomField,\n  updateCustomFieldsOrder as universalUpdateCustomFieldsOrder,\n} from './members-v1-custom-field-custom-fields.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/members' };\n\nexport function createCustomField(\n  httpClient: HttpClient\n): CreateCustomFieldSignature {\n  return (field: NonNullablePaths<CustomField, `name`>) =>\n    universalCreateCustomField(\n      field,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface CreateCustomFieldSignature {\n  /**\n   * Creates a custom field.\n   * @param - Custom field to create.\n   * @returns Created custom field.\n   */\n  (field: CustomField): Promise<CustomField>;\n}\n\nexport function getCustomField(\n  httpClient: HttpClient\n): GetCustomFieldSignature {\n  return (_id: string) =>\n    universalGetCustomField(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetCustomFieldSignature {\n  /**\n   * Retrieves a custom field by ID.\n   * @param - Custom field ID.\n   */\n  (_id: string): Promise<GetCustomFieldResponse>;\n}\n\nexport function listCustomFields(\n  httpClient: HttpClient\n): ListCustomFieldsSignature {\n  return (options?: ListCustomFieldsOptions) =>\n    universalListCustomFields(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListCustomFieldsSignature {\n  /**\n   * Retrieves a list of custom fields and fields provided by Members Area, given the provided paging.\n   *\n   * The fields are ordered by section in the following sequence:\n   * - `GENERAL`\n   * - `DISPLAY_INFO`\n   * - `SOCIAL`\n   *\n   * The fields in the same section are ordered by the field creation date.\n   *\n   * To change the order of fields in sections, call Update Custom Fields Order.\n   */\n  (\n    options?: ListCustomFieldsOptions | undefined\n  ): Promise<ListCustomFieldsResponse>;\n}\n\nexport function updateCustomField(\n  httpClient: HttpClient\n): UpdateCustomFieldSignature {\n  return (\n    _id: string,\n    field: NonNullablePaths<UpdateCustomField, `revision`>\n  ) =>\n    universalUpdateCustomField(\n      _id,\n      field,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateCustomFieldSignature {\n  /**\n   * Updates a custom field.\n   *\n   * For custom fields you can update the following fields: `name`, `defaultPrivacy`, and `socialType`.\n   *\n   * For system fields you can only update the `defaultPrivacy` field.\n   * @param - Custom field ID.\n   * @returns Updated custom field.\n   */\n  (_id: string, field: UpdateCustomField): Promise<CustomField>;\n}\n\nexport function deleteCustomField(\n  httpClient: HttpClient\n): DeleteCustomFieldSignature {\n  return (_id: string, revision: string) =>\n    universalDeleteCustomField(\n      _id,\n      revision,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteCustomFieldSignature {\n  /**\n   * Deletes a custom field and removes the corresponding column from the [Contact List](https://support.wix.com/en/article/wix-contacts-managing-your-contact-list)\n   * display. The custom field is no longer suggested when adding custom fields.\n   * @param - ID of the custom field to delete.\n   * @param - Revision number.\n   */\n  (_id: string, revision: string): Promise<void>;\n}\n\nexport function hideCustomField(\n  httpClient: HttpClient\n): HideCustomFieldSignature {\n  return (_id: string, revision: string) =>\n    universalHideCustomField(\n      _id,\n      revision,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface HideCustomFieldSignature {\n  /**\n   * Hides a custom field from the custom fields list, yet it's still available as a suggested field\n   * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/custom-field-suggestions/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/custom-fields/custom-field-suggestions/introduction))\n   * to add later.\n   *\n   * The related contacts custom field will still be available in the [Contact List](https://support.wix.com/en/article/wix-contacts-managing-your-contact-list).\n   * @param - ID of the custom field to hide.\n   * @param - Revision number.\n   */\n  (_id: string, revision: string): Promise<void>;\n}\n\nexport function updateCustomFieldsOrder(\n  httpClient: HttpClient\n): UpdateCustomFieldsOrderSignature {\n  return (fieldIds: string[], options?: UpdateCustomFieldsOrderOptions) =>\n    universalUpdateCustomFieldsOrder(\n      fieldIds,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateCustomFieldsOrderSignature {\n  /**\n   * Updates the order of custom fields in a section.\n   * @param - IDs of the custom fields to be reordered.\n   */\n  (\n    fieldIds: string[],\n    options?: UpdateCustomFieldsOrderOptions | undefined\n  ): Promise<UpdateCustomFieldsOrderResponse>;\n}\n\nexport {\n  ActionEvent,\n  AppliesTo,\n  Asset,\n  CreateCustomFieldRequest,\n  CreateCustomFieldResponse,\n  CustomField,\n  DefaultPrivacyChanged,\n  DeleteContext,\n  DeleteCustomFieldRequest,\n  DeleteCustomFieldResponse,\n  DeleteStatus,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  Empty,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  GetCustomFieldRequest,\n  GetCustomFieldResponse,\n  HideCustomFieldRequest,\n  HideCustomFieldResponse,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  IncorrectFieldTypeData,\n  IncorrectPrivacyData,\n  InvalidSocialTypeData,\n  ListCustomFieldsOptions,\n  ListCustomFieldsRequest,\n  ListCustomFieldsResponse,\n  MessageEnvelope,\n  MetaSiteSpecialEvent,\n  MetaSiteSpecialEventPayloadOneOf,\n  Namespace,\n  NamespaceChanged,\n  Origin,\n  Paging,\n  PagingMetadata,\n  Privacy,\n  ReservedFieldNameNonEditable,\n  RestoreInfo,\n  Section,\n  ServiceProvisioned,\n  ServiceRemoved,\n  SiteCreated,\n  SiteCreatedContext,\n  SiteDeleted,\n  SiteHardDeleted,\n  SiteMarkedAsTemplate,\n  SiteMarkedAsWixSite,\n  SitePublished,\n  SitePurgedExternally,\n  SiteRenamed,\n  SiteTransferred,\n  SiteUndeleted,\n  SiteUnpublished,\n  SiteUrlChanged,\n  SocialTypeType,\n  State,\n  StudioAssigned,\n  StudioUnassigned,\n  Type,\n  UpdateCustomField,\n  UpdateCustomFieldRequest,\n  UpdateCustomFieldResponse,\n  UpdateCustomFieldsOrderOptions,\n  UpdateCustomFieldsOrderRequest,\n  UpdateCustomFieldsOrderResponse,\n  WebhookIdentityType,\n} from './members-v1-custom-field-custom-fields.universal.js';\n","import {\n  createCustomField as publicCreateCustomField,\n  getCustomField as publicGetCustomField,\n  listCustomFields as publicListCustomFields,\n  updateCustomField as publicUpdateCustomField,\n  deleteCustomField as publicDeleteCustomField,\n  hideCustomField as publicHideCustomField,\n  updateCustomFieldsOrder as publicUpdateCustomFieldsOrder,\n} from './members-v1-custom-field-custom-fields.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\n\nexport const createCustomField: MaybeContext<\n  BuildRESTFunction<typeof publicCreateCustomField> &\n    typeof publicCreateCustomField\n> = /*#__PURE__*/ createRESTModule(publicCreateCustomField);\nexport const getCustomField: MaybeContext<\n  BuildRESTFunction<typeof publicGetCustomField> & typeof publicGetCustomField\n> = /*#__PURE__*/ createRESTModule(publicGetCustomField);\nexport const listCustomFields: MaybeContext<\n  BuildRESTFunction<typeof publicListCustomFields> &\n    typeof publicListCustomFields\n> = /*#__PURE__*/ createRESTModule(publicListCustomFields);\nexport const updateCustomField: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateCustomField> &\n    typeof publicUpdateCustomField\n> = /*#__PURE__*/ createRESTModule(publicUpdateCustomField);\nexport const deleteCustomField: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteCustomField> &\n    typeof publicDeleteCustomField\n> = /*#__PURE__*/ createRESTModule(publicDeleteCustomField);\nexport const hideCustomField: MaybeContext<\n  BuildRESTFunction<typeof publicHideCustomField> & typeof publicHideCustomField\n> = /*#__PURE__*/ createRESTModule(publicHideCustomField);\nexport const updateCustomFieldsOrder: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateCustomFieldsOrder> &\n    typeof publicUpdateCustomFieldsOrder\n> = /*#__PURE__*/ createRESTModule(publicUpdateCustomFieldsOrder);\n\nexport {\n  Privacy,\n  Type,\n  SocialTypeType,\n  Origin,\n  AppliesTo,\n  Section,\n  State,\n  SiteCreatedContext,\n  Namespace,\n  DeleteStatus,\n  WebhookIdentityType,\n} from './members-v1-custom-field-custom-fields.universal.js';\nexport {\n  CustomField,\n  CreateCustomFieldRequest,\n  CreateCustomFieldResponse,\n  IncorrectFieldTypeData,\n  IncorrectPrivacyData,\n  InvalidSocialTypeData,\n  GetCustomFieldRequest,\n  GetCustomFieldResponse,\n  ListCustomFieldsRequest,\n  Paging,\n  ListCustomFieldsResponse,\n  PagingMetadata,\n  UpdateCustomFieldRequest,\n  UpdateCustomFieldResponse,\n  DefaultPrivacyChanged,\n  ReservedFieldNameNonEditable,\n  DeleteCustomFieldRequest,\n  DeleteCustomFieldResponse,\n  HideCustomFieldRequest,\n  HideCustomFieldResponse,\n  UpdateCustomFieldsOrderRequest,\n  UpdateCustomFieldsOrderResponse,\n  MetaSiteSpecialEvent,\n  MetaSiteSpecialEventPayloadOneOf,\n  Asset,\n  SiteCreated,\n  SiteTransferred,\n  SiteDeleted,\n  DeleteContext,\n  SiteUndeleted,\n  SitePublished,\n  SiteUnpublished,\n  SiteMarkedAsTemplate,\n  SiteMarkedAsWixSite,\n  ServiceProvisioned,\n  ServiceRemoved,\n  SiteRenamed,\n  SiteHardDeleted,\n  NamespaceChanged,\n  StudioAssigned,\n  StudioUnassigned,\n  SiteUrlChanged,\n  SitePurgedExternally,\n  Empty,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  ListCustomFieldsOptions,\n  UpdateCustomField,\n  UpdateCustomFieldsOrderOptions,\n} from './members-v1-custom-field-custom-fields.universal.js';\n"],"mappings":"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","names":["payload","Privacy","Type","SocialTypeType","Origin","AppliesTo","Section","State","SiteCreatedContext","Namespace","DeleteStatus","WebhookIdentityType","createCustomField","getCustomField","listCustomFields","updateCustomField","deleteCustomField","hideCustomField","updateCustomFieldsOrder","createCustomField","getCustomField","listCustomFields","updateCustomField","deleteCustomField","hideCustomField","updateCustomFieldsOrder","createCustomField","getCustomField","listCustomFields","updateCustomField","deleteCustomField","hideCustomField","updateCustomFieldsOrder"]}