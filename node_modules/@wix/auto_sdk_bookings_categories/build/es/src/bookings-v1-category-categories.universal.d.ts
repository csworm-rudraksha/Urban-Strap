/** Categories are used to group multiple services together. A service must be associated with a category in order to be exposed in the Wix Bookings UI. */
export interface Category {
    /**
     * Category ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Category name.
     * @maxLength 500
     */
    name?: string | null;
}
export declare enum Status {
    /** The category was created. */
    CREATED = "CREATED",
    /** The category was deleted. */
    DELETED = "DELETED"
}
export interface ListCategoryRequest {
    /**
     * IDs of the categories to retrieve.
     *
     * Default: All categories are retrieved.
     * @format GUID
     */
    categoryIds?: string[];
}
export interface ListCategoryResponse {
    /** Retrieved categories. */
    categories?: Category[];
}
/** An event sent every time a category entity is changed. */
export interface CategoryNotification {
    category?: Category;
    event?: Event;
}
export declare enum Event {
    /** Category was updated. */
    Updated = "Updated",
    /** Category was deleted. */
    Deleted = "Deleted",
    /** Category was created. */
    Created = "Created"
}
export interface CreateCategoryRequest {
    /** Category to create. */
    category: Category;
}
export interface CreateCategoryResponse {
    /** Created category. */
    category?: Category;
}
export interface BatchCreateCategoryRequest {
    /** Categories to create. */
    categories?: Category[];
}
export interface BatchCreateCategoryResponse {
    /** Created categories. */
    categories?: Category[];
}
export interface UpdateCategoryRequest {
    /** Category to update. */
    category: Category;
}
export interface UpdateCategoryResponse {
    /** Updated category. */
    category?: Category;
}
export interface DeleteCategoryRequest {
    /**
     * ID of the category to delete.
     * @format GUID
     */
    _id: string | null;
    /**
     * Whether to delete all the services associated with the category.
     *
     * Default: `false`
     */
    deleteServices?: boolean | null;
}
export interface DeleteCategoryResponse {
    /**
     * ID of the deleted category.
     * @format GUID
     */
    _id?: string | null;
}
export interface BatchDeleteCategoryRequest {
    /**
     * IDs of the categories to delete.
     * @format GUID
     */
    ids?: string[] | null;
}
export interface BatchDeleteCategoryResponse {
}
export interface BatchUpdateCategoryRequest {
    /** List of categories to be updated. */
    categories?: Category[];
    /** Field mask of fields to update. */
    fieldMask?: string[];
}
export interface BatchUpdateCategoryResponse {
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface CategoryNonNullableFields {
    status: Status;
}
export interface ListCategoryResponseNonNullableFields {
    categories: CategoryNonNullableFields[];
}
export interface CreateCategoryResponseNonNullableFields {
    category?: CategoryNonNullableFields;
}
export interface UpdateCategoryResponseNonNullableFields {
    category?: CategoryNonNullableFields;
}
export interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface CategoryNotificationEnvelope {
    data: CategoryNotification;
    metadata: BaseEventMetadata;
}
/** @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.CATEGORIES_READ
 * @webhook
 * @eventType com.wixpress.bookings.services.api.v1.CategoryNotification
 * @serviceIdentifier com.wixpress.bookings.services.api.v1.CategoriesService
 * @slug category_notification
 * @documentationMaturity preview
 */
export declare function onCategoryNotification(handler: (event: CategoryNotificationEnvelope) => void | Promise<void>): void;
/**
 * Retrieves all categories.
 * @public
 * @documentationMaturity preview
 * @param options - Options to use when listing categories.
 * @permissionId BOOKINGS.CATEGORIES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService.List
 */
export declare function listCategories(options?: ListCategoriesOptions): Promise<ListCategoryResponse & ListCategoryResponseNonNullableFields>;
export interface ListCategoriesOptions {
    /**
     * IDs of the categories to retrieve.
     *
     * Default: All categories are retrieved.
     * @format GUID
     */
    categoryIds?: string[];
}
/**
 * Creates a category.
 * @param category - Category to create.
 * @public
 * @documentationMaturity preview
 * @requiredField category
 * @requiredField category.name
 * @permissionId BOOKINGS.MANAGE_CATEGORIES
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created category.
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService.Create
 */
export declare function createCategory(category: Category): Promise<Category & CategoryNonNullableFields>;
/**
 * Updates a category.
 *
 *
 * Each time the category is updated, revision increments by 1. You must include
 * the number of the existing revision when updating the category. This ensures
 * you're working with the latest service information and prevents unintended
 * overwrites.
 * @param _id - Category ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField category
 * @requiredField category.name
 * @permissionId BOOKINGS.MANAGE_CATEGORIES
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService.Update
 */
export declare function updateCategory(_id: string | null, category: UpdateCategory): Promise<UpdateCategoryResponse & UpdateCategoryResponseNonNullableFields>;
export interface UpdateCategory {
    /**
     * Category ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Category name.
     * @maxLength 500
     */
    name?: string | null;
}
/**
 * Deletes a category.
 *
 *
 * You can specify `{"deleteServices": true}` to also delete all associated
 * services. Learn more about *deleting a service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/delete-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/delete-service)).
 * @param _id - ID of the category to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId BOOKINGS.MANAGE_CATEGORIES
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService._delete
 */
export declare function deleteCategory(_id: string | null, options?: DeleteCategoryOptions): Promise<DeleteCategoryResponse>;
export interface DeleteCategoryOptions {
    /**
     * Whether to delete all the services associated with the category.
     *
     * Default: `false`
     */
    deleteServices?: boolean | null;
}
