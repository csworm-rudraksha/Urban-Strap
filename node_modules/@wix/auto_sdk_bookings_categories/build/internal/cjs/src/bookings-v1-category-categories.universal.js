"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteCategory = exports.updateCategory = exports.createCategory = exports.listCategories = exports.WebhookIdentityType = exports.Event = exports.Status = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsV1Category = __importStar(require("./bookings-v1-category-categories.http.js"));
var Status;
(function (Status) {
    /** The category was created. */
    Status["CREATED"] = "CREATED";
    /** The category was deleted. */
    Status["DELETED"] = "DELETED";
})(Status || (exports.Status = Status = {}));
var Event;
(function (Event) {
    /** Category was updated. */
    Event["Updated"] = "Updated";
    /** Category was deleted. */
    Event["Deleted"] = "Deleted";
    /** Category was created. */
    Event["Created"] = "Created";
})(Event || (exports.Event = Event = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves all categories.
 * @public
 * @documentationMaturity preview
 * @param options - Options to use when listing categories.
 * @permissionId BOOKINGS.CATEGORIES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService.List
 */
async function listCategories(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        categoryIds: options?.categoryIds,
        includeDeleted: options?.includeDeleted,
    });
    const reqOpts = ambassadorWixBookingsV1Category.list(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                categoryIds: '$[0].categoryIds',
                includeDeleted: '$[0].includeDeleted',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listCategories = listCategories;
/**
 * Creates a category.
 * @param category - Category to create.
 * @public
 * @documentationMaturity preview
 * @requiredField category
 * @requiredField category.name
 * @permissionId BOOKINGS.MANAGE_CATEGORIES
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created category.
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService.Create
 */
async function createCategory(category) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ category: category });
    const reqOpts = ambassadorWixBookingsV1Category.create(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.category;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { category: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['category']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createCategory = createCategory;
/**
 * Updates a category.
 *
 *
 * Each time the category is updated, revision increments by 1. You must include
 * the number of the existing revision when updating the category. This ensures
 * you're working with the latest service information and prevents unintended
 * overwrites.
 * @param _id - Category ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField category
 * @requiredField category.name
 * @permissionId BOOKINGS.MANAGE_CATEGORIES
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService.Update
 */
async function updateCategory(_id, category) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        category: { ...category, id: _id },
    });
    const reqOpts = ambassadorWixBookingsV1Category.update(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { category: '$[1]' },
            explicitPathsToArguments: { 'category.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'category']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateCategory = updateCategory;
/**
 * Deletes a category.
 *
 *
 * You can specify `{"deleteServices": true}` to also delete all associated
 * services. Learn more about *deleting a service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/delete-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/delete-service)).
 * @param _id - ID of the category to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId BOOKINGS.MANAGE_CATEGORIES
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.services.api.v1.CategoriesService._delete
 */
async function deleteCategory(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        deleteServices: options?.deleteServices,
    });
    const reqOpts = ambassadorWixBookingsV1Category._delete(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                deleteServices: '$[1].deleteServices',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteCategory = deleteCategory;
//# sourceMappingURL=bookings-v1-category-categories.universal.js.map