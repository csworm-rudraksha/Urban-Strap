import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants from './bookings-catalog-v1-service-options-and-variants-service-options-and-variants.http.js';
export var ServiceOptionType;
(function (ServiceOptionType) {
    /** There is no information about the option type. */
    ServiceOptionType["UNKNOWN"] = "UNKNOWN";
    /**
     * The service option is based on a custom parameter. For example, age group,
     * booked equipment, or appointment timing.
     */
    ServiceOptionType["CUSTOM"] = "CUSTOM";
    /**
     * It's a *staff member*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/introduction))
     * based option.
     */
    ServiceOptionType["STAFF_MEMBER"] = "STAFF_MEMBER";
    /** It's a duration-based option. */
    ServiceOptionType["DURATION"] = "DURATION";
})(ServiceOptionType || (ServiceOptionType = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var Day;
(function (Day) {
    /** Undefined. */
    Day["UNDEFINED"] = "UNDEFINED";
    /** Monday. */
    Day["MON"] = "MON";
    /** Tuesday. */
    Day["TUE"] = "TUE";
    /** Wednesday. */
    Day["WED"] = "WED";
    /** Thursday. */
    Day["THU"] = "THU";
    /** Friday. */
    Day["FRI"] = "FRI";
    /** Saturday. */
    Day["SAT"] = "SAT";
    /** Sunday. */
    Day["SUN"] = "SUN";
})(Day || (Day = {}));
export var Transparency;
(function (Transparency) {
    Transparency["UNDEFINED"] = "UNDEFINED";
    /** The schedule can have available slots during the linked schedule's sessions. */
    Transparency["FREE"] = "FREE";
    /** The schedule can't have available slots during the linked schedule's sessions. */
    Transparency["BUSY"] = "BUSY";
})(Transparency || (Transparency = {}));
export var RecurringIntervalType;
(function (RecurringIntervalType) {
    /** The default value. Sessions for this interval will be of type EVENT. */
    RecurringIntervalType["UNDEFINED"] = "UNDEFINED";
    /** A recurring interval of events. */
    RecurringIntervalType["EVENT"] = "EVENT";
    /** Deprecated. */
    RecurringIntervalType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** A recurring interval for availability. */
    RecurringIntervalType["AVAILABILITY"] = "AVAILABILITY";
})(RecurringIntervalType || (RecurringIntervalType = {}));
export var LocationType;
(function (LocationType) {
    LocationType["UNDEFINED"] = "UNDEFINED";
    LocationType["OWNER_BUSINESS"] = "OWNER_BUSINESS";
    LocationType["OWNER_CUSTOM"] = "OWNER_CUSTOM";
    LocationType["CUSTOM"] = "CUSTOM";
})(LocationType || (LocationType = {}));
/** For future use */
export var LocationStatus;
(function (LocationStatus) {
    LocationStatus["ACTIVE"] = "ACTIVE";
    LocationStatus["INACTIVE"] = "INACTIVE";
})(LocationStatus || (LocationStatus = {}));
/** For future use */
export var LocationsLocationType;
(function (LocationsLocationType) {
    LocationsLocationType["UNKNOWN"] = "UNKNOWN";
    LocationsLocationType["BRANCH"] = "BRANCH";
    LocationsLocationType["OFFICES"] = "OFFICES";
    LocationsLocationType["RECEPTION"] = "RECEPTION";
    LocationsLocationType["HEADQUARTERS"] = "HEADQUARTERS";
    LocationsLocationType["INVENTORY"] = "INVENTORY";
})(LocationsLocationType || (LocationsLocationType = {}));
/** Enumerates the days of the week. */
export var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek["MONDAY"] = "MONDAY";
    DayOfWeek["TUESDAY"] = "TUESDAY";
    DayOfWeek["WEDNESDAY"] = "WEDNESDAY";
    DayOfWeek["THURSDAY"] = "THURSDAY";
    DayOfWeek["FRIDAY"] = "FRIDAY";
    DayOfWeek["SATURDAY"] = "SATURDAY";
    DayOfWeek["SUNDAY"] = "SUNDAY";
})(DayOfWeek || (DayOfWeek = {}));
export var ApprovalStatus;
(function (ApprovalStatus) {
    /** Default. */
    ApprovalStatus["UNDEFINED"] = "UNDEFINED";
    /** Pending business approval. */
    ApprovalStatus["PENDING"] = "PENDING";
    /** Approved by the business. */
    ApprovalStatus["APPROVED"] = "APPROVED";
    /** Declined by the business. */
    ApprovalStatus["DECLINED"] = "DECLINED";
})(ApprovalStatus || (ApprovalStatus = {}));
export var ScheduleStatus;
(function (ScheduleStatus) {
    /** Undefined schedule status. */
    ScheduleStatus["UNDEFINED"] = "UNDEFINED";
    /** The schedule was created. */
    ScheduleStatus["CREATED"] = "CREATED";
    /** The schedule was cancelled. */
    ScheduleStatus["CANCELLED"] = "CANCELLED";
})(ScheduleStatus || (ScheduleStatus = {}));
export var ConferenceType;
(function (ConferenceType) {
    /** Undefined conference type. */
    ConferenceType["UNDEFINED"] = "UNDEFINED";
    /** API-generated online meeting. */
    ConferenceType["ONLINE_MEETING_PROVIDER"] = "ONLINE_MEETING_PROVIDER";
    /** User-defined meeting. */
    ConferenceType["CUSTOM"] = "CUSTOM";
})(ConferenceType || (ConferenceType = {}));
export var ResourceStatus;
(function (ResourceStatus) {
    /** Undefined resource status. */
    ResourceStatus["UNDEFINED"] = "UNDEFINED";
    /** The resource was created. */
    ResourceStatus["CREATED"] = "CREATED";
    /** The resource was deleted. */
    ResourceStatus["DELETED"] = "DELETED";
    /** The resource was updated. */
    ResourceStatus["UPDATED"] = "UPDATED";
})(ResourceStatus || (ResourceStatus = {}));
export var Event;
(function (Event) {
    /** Undefined resource event. */
    Event["UNDEFINED"] = "UNDEFINED";
    /** The resource was updated. */
    Event["Updated"] = "Updated";
    /** The resource was deleted. */
    Event["Deleted"] = "Deleted";
    /** The resource was created. */
    Event["Created"] = "Created";
    /** The schedule was updated. */
    Event["Schedule_Updated"] = "Schedule_Updated";
})(Event || (Event = {}));
export var CalendarType;
(function (CalendarType) {
    /** There is no information about the external calendar type. */
    CalendarType["UNDEFINED"] = "UNDEFINED";
    /** [Google Calendar](https://developers.google.com/calendar/api/guides/overview). */
    CalendarType["GOOGLE"] = "GOOGLE";
    /** Apple iCalendar. */
    CalendarType["I_CAL"] = "I_CAL";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OUTLOOK"] = "OUTLOOK";
    /** __Deprecated__. Use `MICROSOFT` instead. */
    CalendarType["OFFICE_365"] = "OFFICE_365";
    /** Microsoft Calendar. For example, Office 365 calendar or Outlook calendar. */
    CalendarType["MICROSOFT"] = "MICROSOFT";
    /** A different type of external calendar, not listed here. */
    CalendarType["OTHER"] = "OTHER";
})(CalendarType || (CalendarType = {}));
export var Status;
(function (Status) {
    /** Undefined status. */
    Status["UNDEFINED"] = "UNDEFINED";
    /** Session is confirmed. Default status. */
    Status["CONFIRMED"] = "CONFIRMED";
    /**
     * Session is cancelled.
     * A cancelled session can be the cancellation of a recurring session that should no longer be displayed or a deleted single session.
     * The ListSessions returns cancelled sessions only if 'includeDelete' flag is set to true.
     */
    Status["CANCELLED"] = "CANCELLED";
})(Status || (Status = {}));
export var SessionType;
(function (SessionType) {
    SessionType["UNDEFINED"] = "UNDEFINED";
    /**
     * Creates an event on the calendar for the owner of the schedule that the session belongs to.
     * Default type.
     */
    SessionType["EVENT"] = "EVENT";
    /** Represents a resource's available working hours. */
    SessionType["WORKING_HOURS"] = "WORKING_HOURS";
    /** Deprecated. Please use WORKING_HOURS. */
    SessionType["TIME_AVAILABILITY"] = "TIME_AVAILABILITY";
    /** Deprecated. Represents a resource's available hours. Please use WORKING_HOURS. */
    SessionType["AVAILABILITY"] = "AVAILABILITY";
})(SessionType || (SessionType = {}));
/** Where the extra text should be displayed: before, after or instead of the actual address. */
export var PlacementType;
(function (PlacementType) {
    PlacementType["BEFORE"] = "BEFORE";
    PlacementType["AFTER"] = "AFTER";
    PlacementType["REPLACE"] = "REPLACE";
})(PlacementType || (PlacementType = {}));
export var ResolutionMethod;
(function (ResolutionMethod) {
    ResolutionMethod["QUERY_PARAM"] = "QUERY_PARAM";
    ResolutionMethod["SUBDOMAIN"] = "SUBDOMAIN";
    ResolutionMethod["SUBDIRECTORY"] = "SUBDIRECTORY";
})(ResolutionMethod || (ResolutionMethod = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a `serviceOptionsAndVariants` object and for a service.
 *
 *
 * ## Calculate variants
 *
 * Before creating a `serviceOptionsAndVariants` object, you need to
 * anticipate and manually define all its variants, since Wix Bookings doesn't
 * automatically calculate them. For the actual
 * Create Service Options And Variants* call, specify both the `options` and
 * `variants` arrays.
 *
 * ## Limitations
 *
 * Wix Bookings allows you to connect only a single `serviceOptionsAndVariants`
 * object to a service. *Create Service Options And Variants* fails, if the
 * service already has a connected `serviceOptionsAndVariants` object.
 *
 * Currently, you can include only a single option per
 * `serviceOptionsAndVariants` object. Taken together, this means that services
 * are limited to a single option.
 *
 * ## Option ID
 *
 * When creating a`serviceOptionsAndVariants` object, you must specify an ID in
 * [UUID format](https://en.wikipedia.org/wiki/Universally_unique_identifier)
 * for its only option. You must reference this option ID for each variant as
 * `variants.values.choices.optionId`.
 *
 * ## Staff member option
 *
 * To creating an option based on the *staff member*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/introduction))
 * providing the service, you need to specify `STAFF_MEMBER` as `options.values.type`.
 * Also, specify all staff member IDs as `variants.values.choices.staffMemberId`.
 * You could follow this *sample flow*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/sample-flows#create-staff-member-based-service-variants) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/sample-flows#create-staff-member-based-service-variants)).
 *
 * ## Custom option
 *
 * To create an option based on a custom parameter, specify `CUSTOM` as
 * `options.values.type`. Provide descriptive names for all custom choices as
 * `variants.values.choices.custom`. These names are displayed to customers
 * during the book flow. You could follow this *sample flow*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/sample-flows#create-service-variants-based-on-the-booked-equipment) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/sample-flows#create-service-variants-based-on-the-booked-equipment)).
 *
 * ## Duration option
 *
 * To create an option based on appointment duration, specify `DURATION` as
 * `options.values.type` and set a descriptive name in `options.values.durationData.name`.
 * Also, indicate the appointment length in `minutes` and provide a descriptive
 * `name` for each duration choice in `variants.values.choices.duration`.
 * @param serviceOptionsAndVariants - Service options and variants to create.
 * @public
 * @requiredField serviceOptionsAndVariants
 * @requiredField serviceOptionsAndVariants.options
 * @requiredField serviceOptionsAndVariants.serviceId
 * @requiredField serviceOptionsAndVariants.variants
 * @permissionId BOOKINGS.SERVICE_OPTIONS_AND_VARIANTS_CREATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Information about the created service options and variants.
 * @fqn wix.bookings.catalog.v1.ServiceOptionsAndVariantsService.CreateServiceOptionsAndVariants
 */
export async function createServiceOptionsAndVariants(serviceOptionsAndVariants) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        serviceOptionsAndVariants: serviceOptionsAndVariants,
    });
    const reqOpts = ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants.createServiceOptionsAndVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.serviceOptionsAndVariants;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { serviceOptionsAndVariants: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['serviceOptionsAndVariants']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Clones a `serviceOptionsAndVariants` object and connects it to a *service*
 * ([SDK](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction) | [REST](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/introduction)).
 *
 *
 * The call fails if the service already has a connected
 * `serviceOptionsAndVariants` object.
 *
 * The cloned `serviceOptionsAndVariants` object gets a new, unique option ID.
 * The option ID of the existing `serviceOptionsAndVariants` object isn't reused.
 *
 * For example, you may call this method after *cloning a service*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/clone-service) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/clone-service)).
 * @param cloneFromId - ID of the `serviceOptionsAndVariants` object to clone.
 * @param targetServiceId - ID of the service to which the cloned `serviceOptionsAndVariants` are
 * connected.
 * @public
 * @requiredField cloneFromId
 * @requiredField targetServiceId
 * @permissionId BOOKINGS.SERVICE_OPTIONS_AND_VARIANTS_CREATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.catalog.v1.ServiceOptionsAndVariantsService.CloneServiceOptionsAndVariants
 */
export async function cloneServiceOptionsAndVariants(cloneFromId, targetServiceId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        cloneFromId: cloneFromId,
        targetServiceId: targetServiceId,
    });
    const reqOpts = ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants.cloneServiceOptionsAndVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                cloneFromId: '$[0]',
                targetServiceId: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['cloneFromId', 'targetServiceId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a `serviceOptionsAndVariants` object by its ID.
 * @param serviceOptionsAndVariantsId - ID of the `serviceOptionsAndVariants` object to retrieve.
 * @public
 * @requiredField serviceOptionsAndVariantsId
 * @permissionId BOOKINGS.SERVICE_OPTIONS_AND_VARIANTS_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved `serviceOptionsAndVariants` object.
 * @fqn wix.bookings.catalog.v1.ServiceOptionsAndVariantsService.GetServiceOptionsAndVariants
 */
export async function getServiceOptionsAndVariants(serviceOptionsAndVariantsId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        serviceOptionsAndVariantsId: serviceOptionsAndVariantsId,
    });
    const reqOpts = ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants.getServiceOptionsAndVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.serviceOptionsAndVariants;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { serviceOptionsAndVariantsId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['serviceOptionsAndVariantsId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a `serviceOptionsAndVariants` object by *service ID*
 * ([SDK](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction) | [REST](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/introduction)).
 * @param serviceId - ID of the service to retrieve options and variants for.
 * @public
 * @requiredField serviceId
 * @permissionId BOOKINGS.SERVICE_OPTIONS_AND_VARIANTS_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.catalog.v1.ServiceOptionsAndVariantsService.GetServiceOptionsAndVariantsByServiceId
 */
export async function getServiceOptionsAndVariantsByServiceId(serviceId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        serviceId: serviceId,
    });
    const reqOpts = ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants.getServiceOptionsAndVariantsByServiceId(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { serviceId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['serviceId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a `serviceOptionsAndVariants` object.
 *
 *
 * Currently, only a single option is supported per `serviceOptionsAndVariants` object.
 *
 * If you want to update `variants`, you must pass the entire list of supported
 * variants, not only newly added variants.
 *
 * If you want to update `options`, you must pass the entire list of supported
 * options, not only newly added options.
 * @param _id - ID of the `serviceOptionsAndVariants` object.
 * @public
 * @requiredField _id
 * @requiredField serviceOptionsAndVariants
 * @requiredField serviceOptionsAndVariants.revision
 * @param serviceOptionsAndVariants - Service options and variants to update.
 * @param options - Options for updating the service options and variants.
 * @permissionId BOOKINGS.SERVICE_OPTIONS_AND_VARIANTS_UPDATE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated `serviceOptionsAndVariants` object.
 * @fqn wix.bookings.catalog.v1.ServiceOptionsAndVariantsService.UpdateServiceOptionsAndVariants
 */
export async function updateServiceOptionsAndVariants(_id, serviceOptionsAndVariants) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        serviceOptionsAndVariants: { ...serviceOptionsAndVariants, id: _id },
    });
    const reqOpts = ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants.updateServiceOptionsAndVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.serviceOptionsAndVariants;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { serviceOptionsAndVariants: '$[1]' },
            explicitPathsToArguments: { 'serviceOptionsAndVariants.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'serviceOptionsAndVariants']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a `serviceOptionsAndVariants` object.
 *
 *
 * Because each service can be connected to only a single `serviceOptionsAndVariants`
 * object, the service doesn't support *varied pricing*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-payments) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-payments#service-rates))
 * after deleting a `serviceOptionsAndVariants` object. Instead, Wix Bookings
 * uses its standard price calculation.
 * @param serviceOptionsAndVariantsId - ID of the `serviceOptionsAndVariants` object to delete.
 * @public
 * @requiredField serviceOptionsAndVariantsId
 * @param options - Options for deleting the service options and variants.
 * @permissionId BOOKINGS.SERVICE_OPTIONS_AND_VARIANTS_DELETE
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.catalog.v1.ServiceOptionsAndVariantsService.DeleteServiceOptionsAndVariants
 */
export async function deleteServiceOptionsAndVariants(serviceOptionsAndVariantsId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        serviceOptionsAndVariantsId: serviceOptionsAndVariantsId,
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants.deleteServiceOptionsAndVariants(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                serviceOptionsAndVariantsId: '$[0]',
                revision: '$[1].revision',
            },
            singleArgumentUnchanged: false,
        }, ['serviceOptionsAndVariantsId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of `serviceOptionsAndVariants` objects.
 *
 * The `queryServiceOptionsAndVariants()` function builds a query to retrieve a list of `serviceOptionsAndVariants` objects and returns a `ServiceOptionsAndVariantsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/service-options-and-variants-list-query-builder/find) function.
 *
 * You can refine the query by chaining `ServiceOptionsAndVariantsQueryBuilder` functions onto the query. `ServiceOptionsAndVariantsQueryBuilder` functions enable you to sort, filter, and control the results that `queryServiceOptionsAndVariants()` returns.
 *
 * `queryServiceOptionsAndVariants()` runs with the following `ServiceOptionsAndVariantsQueryBuilder` default that you can override:
 *
 * + `limit` is `50`.
 * + Sorted by `id` in ascending order.
 *
 * The functions that are chained to `queryServiceOptionsAndVariants()` are applied in the order they are called. For example, if you apply `ascending("options.values.type")` and then `ascending("variants.values.price")`, the results are sorted first by the `"type"`, and then, if there are multiple results with the same `"type"`, the items are sorted by `"price"`.
 *
 * The following `ServiceOptionsAndVariantsQueryBuilder` functions are supported for the `queryServiceOptionsAndVariants()` function. For a full description of the `serviceOptionsAndVariants` object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/service-options-and-variants-list-query-result/items) property in `ServiceOptionsAndVariantsQueryResult`.
 * @public
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.SERVICE_OPTIONS_AND_VARIANTS_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.catalog.v1.ServiceOptionsAndVariantsService.QueryServiceOptionsAndVariants
 */
export function queryServiceOptionsAndVariants() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsCatalogV1ServiceOptionsAndVariants.queryServiceOptionsAndVariants(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.serviceOptionsAndVariantsList,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
//# sourceMappingURL=bookings-catalog-v1-service-options-and-variants-service-options-and-variants.universal.js.map