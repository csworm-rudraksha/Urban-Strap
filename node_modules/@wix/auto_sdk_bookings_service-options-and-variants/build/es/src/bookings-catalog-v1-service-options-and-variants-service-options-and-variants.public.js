import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { cloneServiceOptionsAndVariants as universalCloneServiceOptionsAndVariants, createServiceOptionsAndVariants as universalCreateServiceOptionsAndVariants, deleteServiceOptionsAndVariants as universalDeleteServiceOptionsAndVariants, getServiceOptionsAndVariants as universalGetServiceOptionsAndVariants, getServiceOptionsAndVariantsByServiceId as universalGetServiceOptionsAndVariantsByServiceId, queryServiceOptionsAndVariants as universalQueryServiceOptionsAndVariants, updateServiceOptionsAndVariants as universalUpdateServiceOptionsAndVariants, } from './bookings-catalog-v1-service-options-and-variants-service-options-and-variants.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/bookings' };
export function createServiceOptionsAndVariants(httpClient) {
    return (serviceOptionsAndVariants) => universalCreateServiceOptionsAndVariants(serviceOptionsAndVariants, 
    // @ts-ignore
    { httpClient });
}
export function cloneServiceOptionsAndVariants(httpClient) {
    return (cloneFromId, targetServiceId) => universalCloneServiceOptionsAndVariants(cloneFromId, targetServiceId, 
    // @ts-ignore
    { httpClient });
}
export function getServiceOptionsAndVariants(httpClient) {
    return (serviceOptionsAndVariantsId) => universalGetServiceOptionsAndVariants(serviceOptionsAndVariantsId, 
    // @ts-ignore
    { httpClient });
}
export function getServiceOptionsAndVariantsByServiceId(httpClient) {
    return (serviceId) => universalGetServiceOptionsAndVariantsByServiceId(serviceId, 
    // @ts-ignore
    { httpClient });
}
export function updateServiceOptionsAndVariants(httpClient) {
    return (_id, serviceOptionsAndVariants) => universalUpdateServiceOptionsAndVariants(_id, serviceOptionsAndVariants, 
    // @ts-ignore
    { httpClient });
}
export function deleteServiceOptionsAndVariants(httpClient) {
    return (serviceOptionsAndVariantsId, options) => universalDeleteServiceOptionsAndVariants(serviceOptionsAndVariantsId, options, 
    // @ts-ignore
    { httpClient });
}
export function queryServiceOptionsAndVariants(httpClient) {
    return () => universalQueryServiceOptionsAndVariants(
    // @ts-ignore
    { httpClient });
}
export const onServiceOptionsAndVariantsCreated = EventDefinition('wix.bookings.catalog.v1.service_options_and_variants_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [{ path: 'metadata.eventTime' }],
    },
])))();
export const onServiceOptionsAndVariantsDeleted = EventDefinition('wix.bookings.catalog.v1.service_options_and_variants_deleted', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [{ path: 'metadata.eventTime' }],
    },
])))();
export const onServiceOptionsAndVariantsUpdated = EventDefinition('wix.bookings.catalog.v1.service_options_and_variants_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [{ path: 'metadata.eventTime' }],
    },
])))();
export { ApprovalStatus, CalendarType, ConferenceType, Day, DayOfWeek, Event, LocationStatus, LocationType, LocationsLocationType, PlacementType, RecurringIntervalType, ResolutionMethod, ResourceStatus, ScheduleStatus, ServiceOptionType, SessionType, SortOrder, Status, Transparency, WebhookIdentityType, } from './bookings-catalog-v1-service-options-and-variants-service-options-and-variants.universal.js';
//# sourceMappingURL=bookings-catalog-v1-service-options-and-variants-service-options-and-variants.public.js.map