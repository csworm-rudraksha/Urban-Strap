"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectAppliedBookingFees = exports.applyBookingFeesToOrder = exports.listBookingFeesByBookingIds = exports.WebhookIdentityType = exports.Trigger = exports.BookingFeeStatus = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsFeesV1BookingFee = __importStar(require("./bookings-fees-v1-booking-fee-booking-fees.http.js"));
var BookingFeeStatus;
(function (BookingFeeStatus) {
    /** There is no eCommerce order associated with the booking. */
    BookingFeeStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** The fee is informational only; the customer doesn't have to pay it. For example, it shows how much the customer would owe if they canceled the booking now. */
    BookingFeeStatus["PREVIEW"] = "PREVIEW";
    /** The booking fee hasn't been added to the eCommerce order yet. */
    BookingFeeStatus["NOT_YET_APPLIED_TO_ORDER"] = "NOT_YET_APPLIED_TO_ORDER";
    /** The booking fee has been added to the eCommerce order. The customer may not have paid it yet. */
    BookingFeeStatus["APPLIED_TO_ORDER"] = "APPLIED_TO_ORDER";
})(BookingFeeStatus || (exports.BookingFeeStatus = BookingFeeStatus = {}));
/** The domain event that triggered the booking fee calculation. */
var Trigger;
(function (Trigger) {
    /** There is no information about what triggered the creation of the booking fee. */
    Trigger["UNKNOWN_TRIGGER"] = "UNKNOWN_TRIGGER";
    /** The booking fee was created because the customer didn't show up to the booking or canceled after the expiration of the last cancellation window. */
    Trigger["NOT_ATTENDED"] = "NOT_ATTENDED";
    /** The booking fee was created because the customer canceled the booking before the expiration of the last cancellation window. */
    Trigger["BOOKING_CANCELED"] = "BOOKING_CANCELED";
})(Trigger || (exports.Trigger = Trigger = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves booking fees by booking IDs.
 *
 *
 * Instead of returning `bookingFee` objects with the `cancellationFee.price.value`
 * set to `0.00`, the method doesn't return a `bookingFee` object for the relevant
 * booking IDs. For example, no `bookingFee` object is returned if the canceled
 * booking was free or if the booking was canceled before the start of the earliest
 * cancellation window with an associated fee.
 *
 * If the service's booking policy has been updated since the booking was created,
 * booking fees are calculated according to the *booking policy snapshot*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policy-snapshots/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policy-snapshots/introduction))
 * rather than the current version of the *policy*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policies/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policies/introduction)).
 *
 * This method calculates the cancellation fee amount based on the time of the
 * call, you can't specify a time. Similarly, it calculates the cancellation fee
 * based on the number of participants who canceled, not a provided number.
 *
 * A `cancellationFee.status` of `PREVIEW` indicates that the booking fee is
 * informational only; the customer isn't required to pay it. When the `status` is
 * set to `UNKNOWN_STATUS` there is no eCommerce order associated with the booking. For
 * example, if a custom checkout was used for the booking instead of the
 * _eCommerce checkout_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)).
 *
 * If multiple events would trigger the calculation of a booking fee, for example
 * when a booking is first canceled and then marked as not attended, Wix calculates
 * the booking fee based on the first trigger. In this example, the booking
 * cancellation.
 * @public
 * @documentationMaturity preview
 * @param options - Options to use when listing booking fees.
 * @permissionId BOOKINGS.BOOKING_FEES_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.fees.v1.BookingFees.ListBookingFeesByBookingIds
 */
async function listBookingFeesByBookingIds(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        bookingIds: options?.bookingIds,
        multiServiceBookingIds: options?.multiServiceBookingIds,
    });
    const reqOpts = ambassadorWixBookingsFeesV1BookingFee.listBookingFeesByBookingIds(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                bookingIds: '$[0].bookingIds',
                multiServiceBookingIds: '$[0].multiServiceBookingIds',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listBookingFeesByBookingIds = listBookingFeesByBookingIds;
/**
 * Applies booking fees to an _eCommerce order_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction)).
 *
 *
 * The booking fees are added as a single additional fee to the eCommerce order.
 * The order's `additionalFee.lineItemIds` array is set to the list of corresponding
 * booking IDs. By default, the `additionalFee.price.amount` is the sum of all
 * booking fee prices. But you may provide a `priceOverride` instead. The override
 * price can't be higher than the sum of all booking fees.
 *
 * Apply Booking Fees to Order also updates the prices of all affected line items
 * in the relevant eCommerce order to zero. After a cancellation fee is applied
 * to an eCommerce order, the cancellation fee's `price.value` is updated to `0.00`
 * and its trigger is set to `UNKNOWN_TRIGGER`. You can retrieve the fee amount
 * from the corresponding `additionalFee` object of the eCommerce order with
 * _Search Orders_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/search-orders) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/search-orders)).
 *
 * If you apply multiple booking fees to an eCommerce order, they either all fail or
 * all succeed together. For example, the call fails if the booking fees are associated
 * with different eCommmerce orders.
 * @param bookingIds - IDs of the bookings for which to apply booking fees to an eCommerce order.
 * @public
 * @documentationMaturity preview
 * @requiredField bookingIds
 * @requiredField options.priceOverride.currency
 * @requiredField options.priceOverride.value
 * @param options - Options to use when applying booking fees to an eCommerce order.
 * @permissionId BOOKINGS.BOOKING_FEE_APPLY_TO_ORDER
 * @fqn wix.bookings.fees.v1.BookingFees.ApplyBookingFeesToOrder
 */
async function applyBookingFeesToOrder(bookingIds, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        bookingIds: bookingIds,
        priceOverride: options?.priceOverride,
        businessNotification: options?.businessNotification,
    });
    const reqOpts = ambassadorWixBookingsFeesV1BookingFee.applyBookingFeesToOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                bookingIds: '$[0]',
                priceOverride: '$[1].priceOverride',
                businessNotification: '$[1].businessNotification',
            },
            singleArgumentUnchanged: false,
        }, ['bookingIds', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.applyBookingFeesToOrder = applyBookingFeesToOrder;
/**
 * Collects booking fees by charging the customer using the payment method that's
 * saved on the corresponding *eCommerce order*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction))
 *
 *
 * <blockquote class="warning">
 *
 * __Warning:__
 * Currently, there is no validation that prevents idempotent requests.
 * This means that your code must make sure to not charge customers multiple
 * times for the same booking fee. You could use
 * _List Transactions For Single Order_
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/order-transactions/list-transactions-for-single-order) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order-transactions/list-transactions-for-single-order))
 * to check which charges were made previously for an eCommerce order.
 *
 * </blockquote>
 *
 * An HTTP status of `200` means that all booking fees were successfully collected.
 * Any other HTPP status means that collection failed.
 *
 * Collects the order's `additionalFees.price.amount` that's related to the
 * booking fees. If there are multiple additional fees on the eCommerce order,
 * the amount that's collected differs from `priceSummary.totalAdditionalFees.amount`.
 *
 * Possible failure reasons include:
 * + The order's `status` isn't `APPROVED`.
 * + There is no payment method saved on the order.
 * + The order's `balanceSummary.balance.amount` is lower than the
 * `additionalFees.price.amount` to collect.
 * + The order's `additionalFeeId` doesn't belong to a Wix Bookings cancellation fee.
 * @param orderId - ID of the eCommerce order that includes the booking fees as a single
 * `additionalFee`.
 * @public
 * @documentationMaturity preview
 * @requiredField options.additionalFeeId
 * @requiredField orderId
 * @param options - Options to use when collecting booking fees that have been applied to an eCommerce order.
 * @permissionId BOOKINGS.BOOKING_FEE_COLLECT
 * @fqn wix.bookings.fees.v1.BookingFees.CollectAppliedBookingFees
 */
async function collectAppliedBookingFees(orderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderId: orderId,
        additionalFeeId: options?.additionalFeeId,
        businessNotification: options?.businessNotification,
    });
    const reqOpts = ambassadorWixBookingsFeesV1BookingFee.collectAppliedBookingFees(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0]',
                additionalFeeId: '$[1].additionalFeeId',
                businessNotification: '$[1].businessNotification',
            },
            singleArgumentUnchanged: false,
        }, ['orderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.collectAppliedBookingFees = collectAppliedBookingFees;
//# sourceMappingURL=bookings-fees-v1-booking-fee-booking-fees.universal.js.map