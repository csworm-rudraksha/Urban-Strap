import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { G as GetMemberPrivacySettingsResponse, M as MemberPrivacySettings, S as SetMemberPrivacySettingsResponse } from './members-v1-member-privacy-settings-member-privacy-settings.universal-Ug-rkqm7.js';
export { K as ActionEvent, A as Asset, C as Candidates, k as DeleteContext, D as DeleteStatus, z as DomainEvent, B as DomainEventBodyOneOf, E as Empty, F as EntityCreatedEvent, J as EntityDeletedEvent, H as EntityUpdatedEvent, c as GetMemberPrivacySettingsRequest, O as IdentificationData, P as IdentificationDataIdOneOf, I as InvalidRevisionPayload, e as InvalidSettingsPayload, L as MessageEnvelope, f as MetaSiteSpecialEvent, g as MetaSiteSpecialEventPayloadOneOf, N as Namespace, u as NamespaceChanged, R as RestoreInfo, q as ServiceProvisioned, r as ServiceRemoved, d as SetMemberPrivacySettingsRequest, h as SiteCreated, b as SiteCreatedContext, j as SiteDeleted, t as SiteHardDeleted, o as SiteMarkedAsTemplate, p as SiteMarkedAsWixSite, m as SitePublished, y as SitePurgedExternally, s as SiteRenamed, i as SiteTransferred, l as SiteUndeleted, n as SiteUnpublished, x as SiteUrlChanged, a as State, v as StudioAssigned, w as StudioUnassigned, V as Visibility, W as WebhookIdentityType } from './members-v1-member-privacy-settings-member-privacy-settings.universal-Ug-rkqm7.js';

declare function getMemberPrivacySettings$1(httpClient: HttpClient): GetMemberPrivacySettingsSignature;
interface GetMemberPrivacySettingsSignature {
    /**
     * Retrieves the member privacy settings for a site.
     *
     * If no settings were set, the default settings are retrieved.
     *
     * >**Note:**
     * >This method requiresÂ [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).
     */
    (): Promise<GetMemberPrivacySettingsResponse>;
}
declare function setMemberPrivacySettings$1(httpClient: HttpClient): SetMemberPrivacySettingsSignature;
interface SetMemberPrivacySettingsSignature {
    /**
     * Sets the member privacy settings for a site.
     *
     * Each time the member privacy settings are updated, `revision` increments by 1. The existing `revision` must be included when updating the member privacy settings. This ensures you're working with the latest member privacy settings and prevents unintended overwrites.
     * @param - Member privacy settings details.
     */
    (memberPrivacySettings: MemberPrivacySettings): Promise<SetMemberPrivacySettingsResponse>;
}

declare const getMemberPrivacySettings: MaybeContext<BuildRESTFunction<typeof getMemberPrivacySettings$1> & typeof getMemberPrivacySettings$1>;
declare const setMemberPrivacySettings: MaybeContext<BuildRESTFunction<typeof setMemberPrivacySettings$1> & typeof setMemberPrivacySettings$1>;

export { GetMemberPrivacySettingsResponse, MemberPrivacySettings, SetMemberPrivacySettingsResponse, getMemberPrivacySettings, setMemberPrivacySettings };
