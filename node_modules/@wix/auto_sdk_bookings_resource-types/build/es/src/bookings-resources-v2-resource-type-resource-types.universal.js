import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsResourcesV2ResourceType from './bookings-resources-v2-resource-type-resource-types.http.js';
export var RequestedFields;
(function (RequestedFields) {
    RequestedFields["TOTAL_RESOURCE_COUNT"] = "TOTAL_RESOURCE_COUNT";
    RequestedFields["SPECIFIC_LOCATION_TYPE_RESOURCE_COUNTS"] = "SPECIFIC_LOCATION_TYPE_RESOURCE_COUNTS";
    RequestedFields["DISTINCT_RESOURCE_LOCATIONS"] = "DISTINCT_RESOURCE_LOCATIONS";
})(RequestedFields || (RequestedFields = {}));
export var CreateResourceTypeErrors;
(function (CreateResourceTypeErrors) {
    CreateResourceTypeErrors["UNKNOWN_CREATE_RESOURCE_TYPE_ERROR"] = "UNKNOWN_CREATE_RESOURCE_TYPE_ERROR";
    /** Failed to create requested `quantity` of resources for the resource type */
    CreateResourceTypeErrors["FAILED_TO_CREATE_RESOURCES"] = "FAILED_TO_CREATE_RESOURCES";
})(CreateResourceTypeErrors || (CreateResourceTypeErrors = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a new resource type.
 * @param resourceType - Resource type to create.
 * @public
 * @documentationMaturity preview
 * @requiredField resourceType
 * @requiredField resourceType.name
 * @permissionId BOOKINGS.RESOURCE_TYPE_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created resource type.
 * @fqn wix.bookings.resources.v2.resourcetypes.ResourceTypesService.CreateResourceType
 */
export async function createResourceType(resourceType) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        resourceType: resourceType,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2ResourceType.createResourceType(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.resourceType;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { resourceType: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['resourceType']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a resource type.
 * @param resourceTypeId - ID of the resource type to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField resourceTypeId
 * @permissionId BOOKINGS.RESOURCE_TYPE_READ
 * @permissionId BOOKINGS.RESOURCES_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read bookings calendar - including participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR-WITH-PARTICIPANTS
 * @permissionScope Read Bookings Calendar
 * @permissionScopeId SCOPE.DC-BOOKINGS.SESSIONS-RESOURCES
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Retrieved resource type.
 * @fqn wix.bookings.resources.v2.resourcetypes.ResourceTypesService.GetResourceType
 */
export async function getResourceType(resourceTypeId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        resourceTypeId: resourceTypeId,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2ResourceType.getResourceType(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.resourceType;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { resourceTypeId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['resourceTypeId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a resource type.
 *
 *
 * Each time the resource type is updated, `revision` increments by 1. You must
 * include current revision of the resource type when updating it. This ensures
 * you're working with the latest service information and prevents unintended overwrites.
 * @param _id - Resource type ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField resourceType
 * @requiredField resourceType.revision
 * @permissionId BOOKINGS.RESOURCE_TYPE_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated resource type.
 * @fqn wix.bookings.resources.v2.resourcetypes.ResourceTypesService.UpdateResourceType
 */
export async function updateResourceType(_id, resourceType) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        resourceType: { ...resourceType, id: _id },
    });
    const reqOpts = ambassadorWixBookingsResourcesV2ResourceType.updateResourceType(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.resourceType;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { resourceType: '$[1]' },
            explicitPathsToArguments: { 'resourceType.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'resourceType']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a resource type.
 *
 *
 * Deleting a resource type also automatically deletes all resources connected to it.
 * @param resourceTypeId - ID of the resource type to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField resourceTypeId
 * @permissionId BOOKINGS.RESOURCE_TYPE_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.resources.v2.resourcetypes.ResourceTypesService.DeleteResourceType
 */
export async function deleteResourceType(resourceTypeId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        resourceTypeId: resourceTypeId,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2ResourceType.deleteResourceType(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { resourceTypeId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['resourceTypeId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of resource types.
 *
 * The `queryResourceTypes()` function builds a query to retrieve a list of resource types and returns a `ResourceTypesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/bookings/resource-types/resource-types-query-builder/find) function.
 *
 * You can refine the query by chaining `ResourceTypesQueryBuilder` functions onto the query. `ResourceTypesQueryBuilder` functions enable you to sort, filter, and control the results that `queryResourceTypes()` returns.
 *
 * `queryResourceTypes()` runs with the following `ResourceTypesQueryBuilder` default that you can override:
 *
 * + `limit` is `50`.
 * + Sorted by `id` in ascending order.
 *
 * The functions that are chained to `queryResourceTypes()` are applied in the order they are called.
 *
 * The following `ResourceTypesQueryBuilder` functions are supported for the `queryResourceTypes()` function. For a full description of the resource object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/bookings/resource-types/resource-types-query-result/items) property in `ResourceTypesQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.RESOURCE_TYPE_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.resources.v2.resourcetypes.ResourceTypesService.QueryResourceTypes
 */
export function queryResourceTypes(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsResourcesV2ResourceType.queryResourceTypes({
                ...payload,
                ...(options ?? {}),
            });
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, options];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.resourceTypes,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Counts resource types, given the provided filtering.
 *
 *
 * Refer to the *supported filters article*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/filtering-and-sorting))
 * for a complete list of supported filters.
 * @public
 * @documentationMaturity preview
 * @param options - Filter to base the count on. See
 * [queryResourceTypes()](https://dev.wix.com/docs/sdk/backend-modules/bookings/resource-types/query-resource-types)
 * for supported filters.
 * @permissionId BOOKINGS.RESOURCE_TYPE_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.resources.v2.resourcetypes.ResourceTypesService.CountResourceTypes
 */
export async function countResourceTypes(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsResourcesV2ResourceType.countResourceTypes(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=bookings-resources-v2-resource-type-resource-types.universal.js.map