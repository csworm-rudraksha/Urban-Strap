/**
 * A resource type is a classification of resources. For example room, equipment,
 * or vehicle. Customers can only book *services*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction))
 * if at least 1 *resource*
 * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/introduction))
 * for every resource type connected to the service is available during the requested time.
 */
export interface ResourceType {
    /**
     * Resource type ID.
     * @format GUID
     * @readonly
     */
    id?: string | null;
    /**
     * Revision number, which increments by 1 each time the resource type is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the resource type.
     * @readonly
     */
    revision?: string | null;
    /**
     * Time in `YYYY-MM-DDThh:mm:ss.sssZ` format the resource type was created.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Time in `YYYY-MM-DDThh:mm:ss.sssZ` format the resource type was last updated.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Name of the resource type. For example, `meeting room`. The name must be
     * unique per site.
     * @maxLength 40
     * @minLength 1
     */
    name?: string | null;
    /** Extensions enabling users to save custom data related to the resource type. */
    extendedFields?: ExtendedFields;
}
export interface ResourceCounts {
    /**
     * Total number of resources connected to the type.
     * @readonly
     */
    total?: number | null;
    /**
     * Whether at least 1 resource of the type is available in all business *locations*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-locations#backend-modules_bookings_services_location-types) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-locations#location-types)).
     * @readonly
     */
    hasResourcesInAllLocations?: boolean | null;
    /**
     * Whether at least 1 resource of the type is available in customer locations.
     * @readonly
     */
    hasResourcesInCustomerLocations?: boolean | null;
    /**
     * Whether at least 1 resource of the type is available in custom business locations.
     * @readonly
     */
    hasResourcesInCustomLocations?: boolean | null;
    /**
     * Number of distinct business locations with resources connected to the type.
     * @readonly
     */
    distinctBusinessLocationsCount?: number | null;
    /**
     * IDs of all business locations with resources connected to the type. If there
     * are more than 50 location IDs, only the first 50 IDs are returned.
     * @readonly
     */
    distinctLocationIds?: DistinctLocationIds;
}
export interface DistinctLocationIds {
    /**
     * IDs of the business locations with a resource connected to the type.
     * @format GUID
     * @maxSize 50
     */
    values?: string[];
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface CreateResourceTypeRequest {
    /** Resource type to create. */
    resourceType: ResourceType;
}
export interface LocationOptions {
    /**
     * Whether the resource is available in all *business locations*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-locations#backend-modules_bookings_services_location-types) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-locations#location-types)).
     *
     * - `true`: The resource is available in all business locations.
     * - `false`: The resource is available only in specific locations.
     *
     * Default: `false`
     */
    availableInAllLocations?: boolean | null;
    /** Details of resource availability in specific locations. */
    specificLocationOptions?: SpecificLocation;
}
export interface SpecificLocation {
    /**
     * Whether the resource is available in *business locations*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/about-service-locations#backend-modules_bookings_services_location-types) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/about-service-locations#location-types)).
     *
     * - `true`: The resource is available in business locations.
     * - `false`: The resource isn't available in business locations.
     *
     * Default: `false`
     */
    availableInBusinessLocations?: boolean | null;
    /**
     * Information about the business locations where the resource is available.
     * Not returned, if the resource is available in either all business locations
     * or in no business location.
     * You can specify up to 5 business locations.
     * @maxSize 5
     */
    businessLocations?: BusinessLocation[];
}
export interface BusinessLocation {
    /**
     * ID of the business *location*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction)).
     * @format GUID
     */
    locationId?: string | null;
}
export declare enum RequestedFields {
    TOTAL_RESOURCE_COUNT = "TOTAL_RESOURCE_COUNT",
    SPECIFIC_LOCATION_TYPE_RESOURCE_COUNTS = "SPECIFIC_LOCATION_TYPE_RESOURCE_COUNTS",
    DISTINCT_RESOURCE_LOCATIONS = "DISTINCT_RESOURCE_LOCATIONS"
}
export interface CreateResourceTypeResponse {
    /** Created resource type. */
    resourceType?: ResourceType;
}
export declare enum CreateResourceTypeErrors {
    UNKNOWN_CREATE_RESOURCE_TYPE_ERROR = "UNKNOWN_CREATE_RESOURCE_TYPE_ERROR",
    /** Failed to create requested `quantity` of resources for the resource type */
    FAILED_TO_CREATE_RESOURCES = "FAILED_TO_CREATE_RESOURCES"
}
export interface GetResourceTypeRequest {
    /**
     * ID of the resource type to retrieve.
     * @format GUID
     */
    resourceTypeId: string;
}
export interface GetResourceTypeResponse {
    /** Retrieved resource type. */
    resourceType?: ResourceType;
}
export interface UpdateResourceTypeRequest {
    /** Resource type to update. */
    resourceType: ResourceType;
}
export interface UpdateResourceTypeResponse {
    /** Updated resource type. */
    resourceType?: ResourceType;
}
export interface DeleteResourceTypeRequest {
    /**
     * ID of the resource type to delete.
     * @format GUID
     */
    resourceTypeId: string;
}
export interface DeleteResourceTypeResponse {
}
export interface QueryResourceTypesRequest {
    /**
     * Information about filtering and sorting.
     * Refer to the *supported filters article*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/filtering-and-sorting))
     * for a complete list of supported filters and sorting options.
     */
    query?: CursorQuery;
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 3
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 200
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
export interface QueryResourceTypesResponse {
    /** Retrieved resource types. */
    resourceTypes?: ResourceType[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /**
     * Cursor pointing to next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface CountResourceTypesRequest {
    /**
     * Filter to base the count on.
     * Refer to the *supported filters article*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/supported-filters) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/filtering-and-sorting))
     * for a complete list of supported filters.
     */
    filter?: Record<string, any> | null;
}
export interface CountResourceTypesResponse {
    /** Number of resource types matching the filter. */
    count?: number;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface DistinctLocationIdsNonNullableFields {
    values: string[];
}
interface ResourceCountsNonNullableFields {
    distinctLocationIds?: DistinctLocationIdsNonNullableFields;
}
interface ResourceTypeNonNullableFields {
    resourceCounts?: ResourceCountsNonNullableFields;
}
export interface CreateResourceTypeResponseNonNullableFields {
    resourceType?: ResourceTypeNonNullableFields;
    partialErrors: CreateResourceTypeErrors[];
}
export interface GetResourceTypeResponseNonNullableFields {
    resourceType?: ResourceTypeNonNullableFields;
}
export interface UpdateResourceTypeResponseNonNullableFields {
    resourceType?: ResourceTypeNonNullableFields;
}
export interface QueryResourceTypesResponseNonNullableFields {
    resourceTypes: ResourceTypeNonNullableFields[];
}
export interface CountResourceTypesResponseNonNullableFields {
    count: number;
}
export {};
