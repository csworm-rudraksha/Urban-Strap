/** Extended bookings. */
export interface ExtendedBooking {
    /** Booking. */
    booking?: Booking;
    /**
     * Information about the actions the customer can perform for the
     * booking. Available only when you've specified `withBookingAllowedActions` as
     * `true`.
     */
    allowedActions?: AllowedActions;
    /**
     * Information about the attendance. Available only when passing
     * `withBookingAttendanceInfo` as `true`.
     */
    attendance?: Attendance;
    /**
     * Information about the online conferencing details. Available only when passing
     * `withBookingConferencingDetails` as `true`.
     */
    conferencingDetails?: ConferencingDetails;
    /**
     * Information about the booking's policy settings according to the relevant
     * booking policy snapshot.
     *
     * Available only when you've specified `withBookingPolicySettings` as `true`.
     */
    bookingPolicySettings?: BookingPolicySettings;
    /**
     * Information about the booking fee statuses. Available only when you've specified
     * `withBookingFeeDetailsBooking` as `true`.
     *
     * No details are returned when there is no booking fee for the booking. For
     * example, when a booking was canceled before the start of the earliest
     * cancellation window or the customer hasn't canceled the booking yet.
     */
    bookingFeeDetails?: BookingFeeDetails;
}
export declare enum AttendanceStatus {
    /** There is no available attendance information. */
    NOT_SET = "NOT_SET",
    /** At least a single participant attended the session. */
    ATTENDED = "ATTENDED",
    /** No participants attended the session. */
    NOT_ATTENDED = "NOT_ATTENDED"
}
/** An entity representing a scheduled appointment, class session, or course. */
export interface Booking extends BookingParticipantsInfoOneOf {
    /**
     * Total number of participants. Available only when the relevant service
     * doesn't have _variants and options_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     * @min 1
     */
    totalParticipants?: number;
    /**
     * Information about the booked service choices and participants.
     * Available only when the booking includes multiple _service variants_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     */
    participantsChoices?: ParticipantChoices;
    /**
     * Booking ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * An object describing the *slot*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/availability-calendar/query-availability) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings-and-time-slots/time-slots/availability-calendar/query-availability))
     * or *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction))
     * that was booked.
     */
    bookedEntity?: BookedEntity;
    /**
     * Contact details of the site visitor or *member*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/members/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/members/introduction))
     * making the booking.
     */
    contactDetails?: ContactDetails;
    /** Additional custom fields submitted with the booking form. */
    additionalFields?: CustomFormField[];
    /**
     * Booking status. A booking is automatically confirmed if the service allows it
     * and an eCommerce order is created. It is automatically declined if there is a
     * double booking and the customer hasn't paid or is eligible for an automatic
     * refund. Currently, only payments with pricing plans are automatically refundable.
     */
    status?: BookingStatus;
    /**
     * The payment status of the booking corresponds to the `paymentStatus` of the
     * related *eCommerce order*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/setup)| [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction)),
     * if one exists. All payment statuses are supported for every booking `status`.
     */
    paymentStatus?: PaymentStatus;
    /**
     * Payment option selected by the customer. If the customer hasn't completed their
     * checkout, they may still change the payment method. Must be one of the payment
     * options offered by the service ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction)),
     * unless `skipSelectedPaymentOptionValidation` is `true`.
     * When undefined during an *eCommerce checkout*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)),
     * Wix Bookings uses the service's default payment option
     */
    selectedPaymentOption?: SelectedPaymentOption;
    /**
     * Date and time the booking was created in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** External user ID that you can provide. */
    externalUserId?: string | null;
    /**
     * Revision number to be used when updating, rescheduling, or cancelling the
     * booking. Increments by 1 each time the booking is updated, rescheduled, or
     * canceled. To prevent conflicting changes, the current revision must be
     * specified when updating the booking.
     */
    revision?: string | null;
    /**
     * ID of the creator of the booking.
     * If `appId` and another ID are present, the other ID takes precedence.
     * @readonly
     */
    createdBy?: IdentificationData;
    /**
     * The start date of the booking in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * For a slot, this is the start date of the slot. For a schedule, this is the start date of the first session.
     * @readonly
     */
    startDate?: Date | null;
    /**
     * The end date of the booking in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * For a slot, this is the end date of the slot. For a schedule, this is the end date of the last session.
     * @readonly
     */
    endDate?: Date | null;
    /**
     * Date and time the booking was updated in `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Custom field data for this object.
     * Extended fields must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Whether this booking overlaps with another confirmed booking. Returned
     * only if set to `true`.
     * @readonly
     */
    doubleBooked?: boolean | null;
}
/** @oneof */
export interface BookingParticipantsInfoOneOf {
    /**
     * Total number of participants. Available only when the relevant service
     * doesn't have _variants and options_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     * @min 1
     */
    totalParticipants?: number;
    /**
     * Information about the booked service choices and participants.
     * Available only when the booking includes multiple _service variants_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     */
    participantsChoices?: ParticipantChoices;
}
/**
 * A multi-service booking is considered available if all individual bookings are available as returned from List Multi Service Availability Time Slots.
 * Currently, `SEPARATE_BOOKINGS` and `PARALLEL_BOOKINGS` are not supported.
 * Multi-service booking is available if each of its bookings is available separately.
 * For `SEQUENTIAL_BOOKINGS`, see `List Multi Service Availability Time Slots` documentation.
 */
export declare enum MultiServiceBookingType {
    SEQUENTIAL_BOOKINGS = "SEQUENTIAL_BOOKINGS",
    SEPARATE_BOOKINGS = "SEPARATE_BOOKINGS",
    PARALLEL_BOOKINGS = "PARALLEL_BOOKINGS"
}
export interface BookedEntity extends BookedEntityItemOneOf {
    /**
     * Booked *slot*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/availability-calendar/query-availability) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings-and-time-slots/time-slots/availability-calendar/query-availability)).
     * Available only for appointment-based services and classes.
     * For appointment-based services, a new session is created, while for classes,
     * the booking is automatically linked to the existing session.
     */
    slot?: BookedSlot;
    /**
     * Booked *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
     * Available only for course bookings.
     */
    schedule?: BookedSchedule;
    /**
     * Session title at the time of booking. If there is no pre-existing session,
     * for example for appointment-based services, `title` is set to the service name.
     * @readonly
     * @maxLength 6000
     */
    title?: string | null;
    /**
     * List of tags for the booking.
     *
     * - "INDIVIDUAL": For bookings of appointment-based services. Including when the appointment is for a group of participants.
     * - "GROUP": For bookings of individual class sessions.
     * - "COURSE": For course bookings.
     */
    tags?: string[] | null;
}
/** @oneof */
export interface BookedEntityItemOneOf {
    /**
     * Booked *slot*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/availability-calendar/query-availability) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings-and-time-slots/time-slots/availability-calendar/query-availability)).
     * Available only for appointment-based services and classes.
     * For appointment-based services, a new session is created, while for classes,
     * the booking is automatically linked to the existing session.
     */
    slot?: BookedSlot;
    /**
     * Booked *schedule*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
     * Available only for course bookings.
     */
    schedule?: BookedSchedule;
}
export interface BookedSlot {
    /** Session ID. */
    sessionId?: string | null;
    /** Service ID. */
    serviceId?: string;
    /** Schedule ID. */
    scheduleId?: string;
    /**
     * ID of the corresponding *event*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/events/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/events-v3/introduction)).
     * Available for both appointment and class bookings, not available for course bookings.
     * For appointment-based services, Wix Bookings automatically populates `eventId`
     * when the booking `status` changes to `CONFIRMED`. For class bookings, it's
     * automatically populated upon booking creation.
     * @minLength 36
     * @maxLength 250
     */
    eventId?: string | null;
    /**
     * The start time of this slot in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
     * format.
     */
    startDate?: string | null;
    /**
     * The end time of this slot in [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
     * format.
     */
    endDate?: string | null;
    /** The timezone according to which the slot was shown to the user when booking, and should be shown in the future. */
    timezone?: string | null;
    /**
     * Primary *resource*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/resources/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/resources/resources-v2/introduction))
     * for the booking. For example, the *staff member*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/introduction))
     * providing the
     * service.
     */
    resource?: BookedResource;
    /** Location where the session takes place. */
    location?: Location;
}
export interface BookedResource {
    /**
     * ID of the booking's primary resource.
     * @format GUID
     */
    _id?: string;
    /**
     * Resource's name at the time of booking.
     * @maxLength 40
     */
    name?: string | null;
    /**
     * Resource's email at the time of booking.
     * @maxLength 500
     */
    email?: string | null;
    /**
     * ID of the schedule belonging to the booking's primary resource.
     * @format GUID
     */
    scheduleId?: string | null;
}
export interface Location {
    /**
     * Business location ID. Available only for locations that are business locations,
     * meaning the `location_type` is `"OWNER_BUSINESS"`.
     * @format GUID
     */
    _id?: string | null;
    /** Location name. */
    name?: string | null;
    /** The full address of this location. */
    formattedAddress?: string | null;
    /**
     * The full translated address of this location.
     * @maxLength 512
     */
    formattedAddressTranslated?: string | null;
    /**
     * Location type.
     *
     * - `"OWNER_BUSINESS"`: The business address, as set in the site’s general settings.
     * - `"OWNER_CUSTOM"`: The address as set when creating the service.
     * - `"CUSTOM"`: The address as set for the individual session.
     */
    locationType?: LocationType;
}
export declare enum LocationType {
    UNDEFINED = "UNDEFINED",
    OWNER_BUSINESS = "OWNER_BUSINESS",
    OWNER_CUSTOM = "OWNER_CUSTOM",
    CUSTOM = "CUSTOM"
}
export interface BookedSchedule {
    /**
     * _Schedule ID_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/calendar/schedules/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/calendar/schedules-v3/introduction)).
     */
    scheduleId?: string;
    /**
     * Booked service ID.
     * @format GUID
     */
    serviceId?: string | null;
    /**
     * _Location_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/business-tools/locations/introduction) | [REST](https://dev.wix.com/docs/rest/business-management/locations/introduction))
     * where the schedule's sessions take place.
     * @readonly
     */
    location?: Location;
    /**
     * Timezone in which the slot or session was shown to the customer when they booked.
     * Also used whenever the customer reviews the booking's timing in the future.
     */
    timezone?: string | null;
    /**
     * Start time of the first session related to the booking in
     * [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339) format.
     * @readonly
     */
    firstSessionStart?: string | null;
    /**
     * End time of the last session related to the booking in
     * [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339) format.
     * @readonly
     */
    lastSessionEnd?: string | null;
}
export interface ContactDetails {
    /**
     * Contact ID.
     * @format GUID
     */
    contactId?: string | null;
    /**
     * Contact's first name. When populated from a standard booking form, this
     * property corresponds to the `name` field.
     */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /**
     * Contact's email. If no [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)
     * with this email exist, a new contact is created.
     * Used to validate coupon usage limitations per contact. If not specified,
     * the coupon usage limitation will not be enforced. (Coupon usage limitation
     * validation is not supported yet).
     * @format EMAIL
     */
    email?: string | null;
    /** Contact's phone number. */
    phone?: string | null;
    /** Contact's full address. */
    fullAddress?: Address;
    /**
     * Contact's time zone.
     * @deprecated
     */
    timeZone?: string | null;
    /**
     * Contact's country in [ISO 3166-1 alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * format.
     * @format COUNTRY
     */
    countryCode?: string | null;
}
/** Physical address */
export interface Address extends AddressStreetOneOf {
    /** Street name, number and apartment number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number, as free text. */
    addressLine?: string | null;
    /**
     * Country code.
     * @format COUNTRY
     */
    country?: string | null;
    /** Subdivision. Usually state, region, prefecture or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
    /** A string containing the full address of this location. */
    formattedAddress?: string | null;
    /** Free text to help find the address. */
    hint?: string | null;
    /** Coordinates of the physical address. */
    geocode?: AddressLocation;
    /** Country full name. */
    countryFullname?: string | null;
    /** Multi-level subdivisions from top to bottom. */
    subdivisions?: Subdivision[];
}
/** @oneof */
export interface AddressStreetOneOf {
    /** Street name, number and apartment number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number, as free text. */
    addressLine?: string | null;
}
export interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
    /** Apartment number. */
    apt?: string;
}
export interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
export interface Subdivision {
    /** Subdivision code. Usually state, region, prefecture or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    code?: string;
    /** Subdivision full name. */
    name?: string;
}
export interface CustomFormField {
    /**
     * ID of the form field as defined in the form.
     * @format GUID
     */
    _id?: string;
    /** Value that was submitted for this field. */
    value?: string | null;
    /**
     * Form field's label at the time of submission.
     * @readonly
     */
    label?: string | null;
    valueType?: ValueType;
}
export declare enum ValueType {
    /** Short text. This is the default value type. */
    SHORT_TEXT = "SHORT_TEXT",
    /** Long text. */
    LONG_TEXT = "LONG_TEXT",
    /** A text that represents the check box value. If selected the value is `true`, otherwise `false`. */
    CHECK_BOX = "CHECK_BOX"
}
/** Booking status. */
export declare enum BookingStatus {
    /**
     * The booking was created, but the customer hasn't completed the related
     * eCommerce order yet.
     */
    CREATED = "CREATED",
    /**
     * The merchant has confirmed the booking and it appears in the
     * business calendar. Merchants can set up their *services*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction))
     * to automatically confirm all `PENDING` bookings.
     */
    CONFIRMED = "CONFIRMED",
    /**
     * The customer has canceled the booking. Depending on the relevant service's
     * _policy snapshot_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policy-snapshots/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policy-snapshots/introduction))
     * they may have to pay a _cancellation fee_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-fees/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/pricing/booking-fees/introduction)).
     */
    CANCELED = "CANCELED",
    /**
     * The merchant must manually confirm the booking before it appears
     * in the business calendar.
     */
    PENDING = "PENDING",
    /** The merchant has declined the booking before the customer was charged. */
    DECLINED = "DECLINED",
    /**
     * The booking is on a waitlist.
     * Currently, you can't call Register to Waitlist
     * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings/waitlist/register-to-waitlist))
     * for course or appointment bookings, even though this is supported in live sites.
     * You can call Register to Waitlist only for class session bookings.
     */
    WAITING_LIST = "WAITING_LIST"
}
/**
 * Payment status.
 * Automatically updated when using eCommerce checkout APIs.
 */
export declare enum PaymentStatus {
    /** Undefined payment status. */
    UNDEFINED = "UNDEFINED",
    /** The booking isn't paid. */
    NOT_PAID = "NOT_PAID",
    /** The booking is fully paid. */
    PAID = "PAID",
    /** The booking is partially paid. */
    PARTIALLY_PAID = "PARTIALLY_PAID",
    /** The booking is refunded. */
    REFUNDED = "REFUNDED",
    /** The booking is free of charge. */
    EXEMPT = "EXEMPT"
}
/**
 * Selected payment option.
 *
 * One of the payment options offered by the service.
 * This field is set when the user selects an option during booking.
 * If left undefined, the payment option is resolved by the service configuration on checkout.
 */
export declare enum SelectedPaymentOption {
    /** Undefined payment option. */
    UNDEFINED = "UNDEFINED",
    /** Offline payment. */
    OFFLINE = "OFFLINE",
    /** Online payment. */
    ONLINE = "ONLINE",
    /** Payment using a Wix Pricing Plan. */
    MEMBERSHIP = "MEMBERSHIP",
    /**
     * Customers can pay only in person with a Wix Pricing Plan, while the Wix user
     * must manually redeem the pricing plan in the dashboard.
     */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
export interface BookingSource {
    /** Platform from which a booking was created. */
    platform?: Platform;
    /** Actor that created this booking. */
    actor?: Actor;
    /**
     * Wix site ID of the application that created the booking.
     * @format GUID
     * @readonly
     */
    appDefId?: string | null;
    /**
     * Name of the application that created the booking, as saved in Wix Developers Center at the time of booking.
     * @readonly
     */
    appName?: string | null;
}
export declare enum Platform {
    UNDEFINED_PLATFORM = "UNDEFINED_PLATFORM",
    WEB = "WEB",
    MOBILE_APP = "MOBILE_APP"
}
export declare enum Actor {
    UNDEFINED_ACTOR = "UNDEFINED_ACTOR",
    BUSINESS = "BUSINESS",
    CUSTOMER = "CUSTOMER"
}
export interface ParticipantNotification {
    /**
     * Whether to send the message about the changes to the customer.
     *
     * Default: `false`
     */
    notifyParticipants?: boolean;
    /** Custom message to send to the participants about the changes to the booking. */
    message?: string | null;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /**
     * ID of of a contact in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     * @format GUID
     */
    contactId?: string | null;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface FlowControlSettings {
    /** Whether availability is checked when creating or confirming the booking. */
    skipAvailabilityValidation?: boolean;
    /**
     * Whether the booking's `status` is automatically updated to `CONFIRMED` when
     * the customer completes the *eCommerce checkout*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)),
     * regardless of whether the relevant service requires manual business confirmation.
     */
    skipBusinessConfirmation?: boolean;
    /**
     * Whether the customer is allowed to pay with a payment method that isn't
     * supported for the relevant service.
     */
    skipSelectedPaymentOptionValidation?: boolean;
    /**
     * Whether the customer receives an automatic refund if there's a double booking
     * conflict. Only available if the customer has paid with a
     * pricing plan.
     */
    withRefund?: boolean | null;
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface ParticipantChoices {
    /**
     * Information about the booked service choices. Includes the number of participants.
     * @minSize 1
     * @maxSize 20
     */
    serviceChoices?: ServiceChoices[];
}
export interface ServiceChoices {
    /**
     * Number of participants for this _variant_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/service-options-and-variants/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/service-options-and-variants/introduction)).
     * @min 1
     */
    numberOfParticipants?: number | null;
    /**
     * Service choices for these participants.
     * @maxSize 5
     */
    choices?: ServiceChoice[];
}
export interface ServiceChoice extends ServiceChoiceChoiceOneOf {
    /**
     * Value for one of the choices in the [`CustomServiceOption.choices`](https://example.com) list.
     * Choices are specific values for an option the customer can choose to book. For example,
     * the option `ageGroup` may have these choices: `child`, `student`, `adult`, and `senior`.
     * Each choice may have a different price.
     */
    custom?: string;
    duration?: Duration;
    /**
     * ID of the corresponding option for the choice. For example, the choice `child`
     * could correspond to the option `ageGroup`. In this case, `optionId` is the ID
     * for the `ageGroup` option.
     * @format GUID
     */
    optionId?: string;
}
/** @oneof */
export interface ServiceChoiceChoiceOneOf {
    /**
     * Value for one of the choices in the [`CustomServiceOption.choices`](https://example.com) list.
     * Choices are specific values for an option the customer can choose to book. For example,
     * the option `ageGroup` may have these choices: `child`, `student`, `adult`, and `senior`.
     * Each choice may have a different price.
     */
    custom?: string;
    duration?: Duration;
}
export interface Duration {
    /**
     * Duration of the service in minutes.
     * Min: 1 minute, Max: 30 days, 23 hours, and 59 minutes
     * @min 1
     * @max 44639
     */
    minutes?: number;
    /**
     * Name of the duration option.
     * Defaults to the formatted duration e.g. "1 hour, 30 minutes".
     * @maxLength 255
     */
    name?: string | null;
}
export interface MultiServiceBookingInfo {
    /**
     * Multi-service booking ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /** Type of the multi-service booking. */
    type?: MultiServiceBookingType;
}
/** Possible allowed actions for a Booking */
export interface AllowedActions {
    /** Whether the customer is allowed to cancel the booking. */
    cancel?: boolean;
    /** Whether the customer is allowed to reschedule the booking. */
    reschedule?: boolean;
    /**
     * Deprecated.
     * Whether the customer is entitled to a refund when canceling the booking.
     * @deprecated
     */
    refund?: boolean | null;
}
export interface Attendance {
    /**
     * ID of the attendance object.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /** General information about the booking's attendance. */
    status?: AttendanceStatus;
    /**
     * Total number of participants who attended the session. Can
     * be greater than `1` for bookings with multiple participants.
     */
    numberOfAttendees?: number;
}
export interface ConferencingDetails {
    /**
     * URL used by a guest to join the conference.
     * @minLength 1
     * @maxLength 2000
     */
    guestUrl?: string | null;
    /**
     * Conference password.
     * @minLength 1
     * @maxLength 100
     */
    password?: string | null;
}
export interface BookingPolicySettings {
    /** Whether the booking has an active cancellation fee policy. */
    cancellationFeeEnabled?: boolean | null;
}
export interface BookingFeeDetails {
    /** Cancellation fee status. */
    cancellationFeeStatus?: BookingFeeStatus;
}
export declare enum BookingFeeStatus {
    /** There is no information about the booking fee status. */
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** The booking fee hasn't been applied to the eCommerce order yet. */
    NOT_YET_APPLIED_TO_ORDER = "NOT_YET_APPLIED_TO_ORDER",
    /** The booking fee has already been applied as an additional fee to the eCommerce order. */
    APPLIED_TO_ORDER = "APPLIED_TO_ORDER"
}
export interface QueryExtendedBookingRequest {
    /** Information about filters, paging, and sorting. */
    query: QueryV2;
    /** Whether information about which actions the customer can perform for the bookings is returned. */
    withBookingAllowedActions?: boolean;
    /** Whether information about the attendance for the bookings is returned. */
    withBookingAttendanceInfo?: boolean;
    /**
     * Filters the retrieved bookings by the booking ID that corresponds to the
     * specified `sessionId`.
     *
     * The `booking.id` is calculated by calling Get Session and saving the returned
     * values for `participants.Id`.
     *
     * These participant IDs are then used as `booking.id`.
     * This filter overrides the `booking.id` filter inside the query object.
     *
     * __Note__: Bookings for courses don't include a `sessionId`. For these
     * bookings, you must use this field to filter by session ID.
     */
    sessionId?: string | null;
}
export interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /**
     * Cursor token pointing to a page of results. In the first request,
     * specify `cursorPaging.limit`. For following requests, specify the
     * retrieved `cursorPaging.cursor` token and not `query.filter` or
     * `query.sort`.
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
export interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /**
     * Cursor token pointing to a page of results. In the first request,
     * specify `cursorPaging.limit`. For following requests, specify the
     * retrieved `cursorPaging.cursor` token and not `query.filter` or
     * `query.sort`.
     */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
export interface QueryExtendedBookingResponse {
    /**
     * Retrieved bookings and additional information about attendance or actions
     * the customer can perform
     */
    extendedBookings?: ExtendedBooking[];
    /** Paging metadata. */
    pagingMetadata?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface QueryExtendedBookingsRequest {
    /** Information about filters, paging, and sorting. */
    query: CommonQueryV2;
    /** Whether to return information about the actions the customer can perform for the bookings. */
    withBookingAllowedActions?: boolean;
    /** Whether to return information about the attendance for the bookings. */
    withBookingAttendanceInfo?: boolean;
    /** Whether to return information about the online conferencing details for the bookings. */
    withBookingConferencingDetails?: boolean;
    /**
     * Whether to retrieve information about booking policy settings.
     *
     * You must have the `BOOKINGS.BOOKING_POLICY_SNAPSHOT_READ` permission scope
     * when passing `true`.
     *
     * Default: `false`.
     */
    withBookingPolicySettings?: boolean;
    /**
     * Whether to retrieve information about the booking fee statuses.
     * Information about booking fees with a status of `PREVIEW` isn't returned.
     *
     * You must have the `BOOKINGS.BOOKING_FEES_READ` permission scope when passing
     * `true`. To retrieve complete booking fee objects or to get information
     * about `PREVIEW` fees, use List Booking Fees By Booking Ids instead.
     *
     * Default: `false`
     */
    withBookingFeeDetails?: boolean;
}
export interface CommonQueryV2 extends CommonQueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /**
     * Cursor token pointing to a page of results. In the first request,
     * specify `cursorPaging.limit`. For following requests, specify the
     * retrieved `cursorPaging.cursor` token and not `query.filter` or
     * `query.sort`.
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     *
     *   See [Supported Filters](https://www.wix.com/velo/reference/wix-bookings-v2/extendedbookings/supported-filters)
     * for a full list.
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CommonQueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: CommonPaging;
    /**
     * Cursor token pointing to a page of results. In the first request,
     * specify `cursorPaging.limit`. For following requests, specify the
     * retrieved `cursorPaging.cursor` token and not `query.filter` or
     * `query.sort`.
     */
    cursorPaging?: CursorPaging;
}
export interface CommonPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface QueryExtendedBookingsResponse {
    /**
     * Retrieved bookings and additional information, such as information about about the attendance or actions
     * the customer can perform.
     */
    extendedBookings?: ExtendedBooking[];
    /** Paging metadata. */
    pagingMetadata?: PagingMetadataV2;
}
export interface CountExtendedBookingsRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
}
export interface CountExtendedBookingsResponse {
    /** The number of bookings matching the specified filter. */
    count?: number;
}
interface DurationNonNullableFields {
    minutes: number;
}
interface ServiceChoiceNonNullableFields {
    custom: string;
    duration?: DurationNonNullableFields;
    optionId: string;
}
interface ServiceChoicesNonNullableFields {
    choices: ServiceChoiceNonNullableFields[];
}
interface ParticipantChoicesNonNullableFields {
    serviceChoices: ServiceChoicesNonNullableFields[];
}
interface BookedResourceNonNullableFields {
    _id: string;
}
interface LocationNonNullableFields {
    locationType: LocationType;
}
interface BookedSlotNonNullableFields {
    serviceId: string;
    scheduleId: string;
    resource?: BookedResourceNonNullableFields;
    location?: LocationNonNullableFields;
    additionalResources: BookedResourceNonNullableFields[];
}
interface BookedScheduleNonNullableFields {
    scheduleId: string;
    location?: LocationNonNullableFields;
}
interface BookedEntityNonNullableFields {
    slot?: BookedSlotNonNullableFields;
    schedule?: BookedScheduleNonNullableFields;
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface SubdivisionNonNullableFields {
    code: string;
    name: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
    subdivisions: SubdivisionNonNullableFields[];
}
interface ContactDetailsNonNullableFields {
    fullAddress?: AddressNonNullableFields;
}
interface CustomFormFieldNonNullableFields {
    _id: string;
    valueType: ValueType;
}
interface BookingSourceNonNullableFields {
    platform: Platform;
    actor: Actor;
}
interface ParticipantNotificationNonNullableFields {
    notifyParticipants: boolean;
}
interface IdentificationDataNonNullableFields {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType;
}
interface FlowControlSettingsNonNullableFields {
    ignoreBookingWindow: boolean;
    skipAvailabilityValidation: boolean;
    skipBusinessConfirmation: boolean;
    skipSelectedPaymentOptionValidation: boolean;
}
interface MultiServiceBookingInfoNonNullableFields {
    type: MultiServiceBookingType;
}
interface BookingNonNullableFields {
    totalParticipants: number;
    participantsChoices?: ParticipantChoicesNonNullableFields;
    bookedEntity?: BookedEntityNonNullableFields;
    contactDetails?: ContactDetailsNonNullableFields;
    additionalFields: CustomFormFieldNonNullableFields[];
    status: BookingStatus;
    paymentStatus: PaymentStatus;
    selectedPaymentOption: SelectedPaymentOption;
    bookingSource?: BookingSourceNonNullableFields;
    participantNotification?: ParticipantNotificationNonNullableFields;
    createdBy?: IdentificationDataNonNullableFields;
    flowControlSettings?: FlowControlSettingsNonNullableFields;
    multiServiceBookingInfo?: MultiServiceBookingInfoNonNullableFields;
}
interface AllowedActionsNonNullableFields {
    cancel: boolean;
    reschedule: boolean;
    bookAnother: boolean;
}
interface AttendanceNonNullableFields {
    status: AttendanceStatus;
    numberOfAttendees: number;
}
interface BookingFeeDetailsNonNullableFields {
    cancellationFeeStatus: BookingFeeStatus;
    reschedulingFeeStatus: BookingFeeStatus;
}
interface ExtendedBookingNonNullableFields {
    booking?: BookingNonNullableFields;
    allowedActions?: AllowedActionsNonNullableFields;
    attendance?: AttendanceNonNullableFields;
    bookingFeeDetails?: BookingFeeDetailsNonNullableFields;
}
export interface QueryExtendedBookingResponseNonNullableFields {
    extendedBookings: ExtendedBookingNonNullableFields[];
}
export interface QueryExtendedBookingsResponseNonNullableFields {
    extendedBookings: ExtendedBookingNonNullableFields[];
}
export interface CountExtendedBookingsResponseNonNullableFields {
    count: number;
}
/**
 * > **Deprecation Notice**
 * >
 * > **This endpoint has been replaced with [Query Extended Bookings](https://dev.wix.com/api/rest/wix-bookings/bookings-reader-v2/query-extended-bookings) and will be removed on May 31, 2025.**
 * > **If your app uses this endpoint, we recommend updating your code as soon as possible.**
 *
 *
 * Retrieves a list of bookings, given the provided paging, filtering, and sorting.
 *
 *
 * You can also retrieve information about which actions the customer can perform
 * for the bookings. To do so, pass `withBookingAllowedActions` as `true`.
 *
 * Query Bookings runs with these defaults:
 *
 * - `createdDate` sorted in `DESC` order
 * - `cursorPaging.limit` is `50`
 *
 * You can check the overview about all
 * [supported filters](https://dev.wix.com/api/rest/wix-bookings/bookings-reader-v2/supported-filters)
 * for more information.
 *
 * `query.fields` and `query.fieldsets` aren't supported for this endpoint.
 *
 * When using filters for dates, you must use [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * Bookings belonging to a schedule don't have a `sessionId`. Therefore you
 * must use the `sessionId` filter that isn't part of the `query` object to
 * filter bookings for courses.
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
 * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
 * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
 *
 * When calling Query Bookings, the retrieved data may not contain your most recent changes. See
 * [Wix-data and Eventual Consistency](reference/wix-data/introduction#wix-data_introduction_wix-data-and-eventual-consistency)
 * for more information.
 * @public
 * @documentationMaturity preview
 * @requiredField query
 * @param query - Information about filters, paging, and sorting.
 * @param options - Additional options for performing the query.
 * @permissionId BOOKINGS.BOOKING_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read bookings calendar - including participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR-WITH-PARTICIPANTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.reader.v2.BookingsReader.Query
 * @deprecated
 */
export declare function query(query: QueryV2, options?: QueryOptions): Promise<QueryExtendedBookingResponse & QueryExtendedBookingResponseNonNullableFields>;
export interface QueryOptions {
    /** Whether information about which actions the customer can perform for the bookings is returned. */
    withBookingAllowedActions?: boolean;
    /** Whether information about the attendance for the bookings is returned. */
    withBookingAttendanceInfo?: boolean;
    /**
     * Filters the retrieved bookings by the booking ID that corresponds to the
     * specified `sessionId`.
     *
     * The `booking.id` is calculated by calling Get Session and saving the returned
     * values for `participants.Id`.
     *
     * These participant IDs are then used as `booking.id`.
     * This filter overrides the `booking.id` filter inside the query object.
     *
     * __Note__: Bookings for courses don't include a `sessionId`. For these
     * bookings, you must use this field to filter by session ID.
     */
    sessionId?: string | null;
}
/**
 * Retrieves a list of bookings, including additional extended information, given the provided paging, filtering, and sorting.
 *
 * `queryExtendedBookings()` doesn't use a query builder, instead it uses [API query language](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language#with-the-api-query-language).
 *
 * Up to 100 extended bookings can be returned per request.
 *
 * `queryExtendedBookings()` runs with these defaults, which you can override:
 *
 * - `createdDate` sorted in `DESC` order
 * - `cursorPaging.limit` is `50`
 *
 *
 * You can retrieve information about which actions the customer can perform
 * for the bookings. To do so, pass `withBookingAllowedActions` as `true`.
 *
 *
 * For field support, see
 * [supported filters](https://www.wix.com/velo/reference/wix-bookings-v2/extendedbookings/supported-filters)
 * for more information.
 *
 * You can specify a filter only once per query. If you specify a filter
 * more than once, only the first filter determines the extended bookings that are returned.
 *
 * When filtering by date, you must use [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 * @public
 * @requiredField query
 * @param query - Information about filters, paging, and sorting.
 * @param options - Additional options for performing the query.
 * @permissionId BOOKINGS.BOOKING_READ
 * @permissionId BOOKINGS.MANAGE_BOOKINGS
 * @permissionId BOOKINGS.BOOKING_READ_ANY
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read bookings calendar - including participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR-WITH-PARTICIPANTS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.reader.v2.BookingsReader.QueryExtendedBookings
 */
export declare function queryExtendedBookings(query: CommonQueryV2, options?: QueryExtendedBookingsOptions): Promise<QueryExtendedBookingsResponse & QueryExtendedBookingsResponseNonNullableFields>;
export interface QueryExtendedBookingsOptions {
    /** Whether to return information about the actions the customer can perform for the bookings. */
    withBookingAllowedActions?: boolean;
    /** Whether to return information about the attendance for the bookings. */
    withBookingAttendanceInfo?: boolean;
    /** Whether to return information about the online conferencing details for the bookings. */
    withBookingConferencingDetails?: boolean;
    /**
     * Whether to retrieve information about booking policy settings.
     *
     * You must have the `BOOKINGS.BOOKING_POLICY_SNAPSHOT_READ` permission scope
     * when passing `true`.
     *
     * Default: `false`.
     */
    withBookingPolicySettings?: boolean;
    /**
     * Whether to retrieve information about the booking fee statuses.
     * Information about booking fees with a status of `PREVIEW` isn't returned.
     *
     * You must have the `BOOKINGS.BOOKING_FEES_READ` permission scope when passing
     * `true`. To retrieve complete booking fee objects or to get information
     * about `PREVIEW` fees, use List Booking Fees By Booking Ids instead.
     *
     * Default: `false`
     */
    withBookingFeeDetails?: boolean;
}
/**
 * Counts the number of bookings matching the specified filters.
 *
 *
 * For field support see
 * [supported filters](https://dev.wix.com/api/rest/wix-bookings/bookings-reader-v2/supported-filters)
 * for more information.
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.BOOKING_MANAGE
 * @permissionId BOOKINGS.MANAGE_BOOKINGS
 * @permissionId BOOKINGS.BOOKING_READ_ANY
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.reader.v2.BookingsReader.CountExtendedBookings
 */
export declare function countExtendedBookings(options?: CountExtendedBookingsOptions): Promise<CountExtendedBookingsResponse & CountExtendedBookingsResponseNonNullableFields>;
export interface CountExtendedBookingsOptions {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
}
export {};
