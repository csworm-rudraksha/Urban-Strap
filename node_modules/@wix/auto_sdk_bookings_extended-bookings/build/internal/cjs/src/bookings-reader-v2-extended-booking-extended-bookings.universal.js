"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.countExtendedBookings = exports.queryExtendedBookings = exports.query = exports.SortOrder = exports.BookingFeeStatus = exports.IdentityType = exports.Actor = exports.Platform = exports.SelectedPaymentOption = exports.PaymentStatus = exports.BookingStatus = exports.ValueType = exports.LocationType = exports.MultiServiceBookingType = exports.AttendanceStatus = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixBookingsReaderV2ExtendedBooking = __importStar(require("./bookings-reader-v2-extended-booking-extended-bookings.http.js"));
var AttendanceStatus;
(function (AttendanceStatus) {
    /** There is no available attendance information. */
    AttendanceStatus["NOT_SET"] = "NOT_SET";
    /** At least a single participant attended the session. */
    AttendanceStatus["ATTENDED"] = "ATTENDED";
    /** No participants attended the session. */
    AttendanceStatus["NOT_ATTENDED"] = "NOT_ATTENDED";
})(AttendanceStatus || (exports.AttendanceStatus = AttendanceStatus = {}));
/**
 * A multi-service booking is considered available if all individual bookings are available as returned from List Multi Service Availability Time Slots.
 * Currently, `SEPARATE_BOOKINGS` and `PARALLEL_BOOKINGS` are not supported.
 * Multi-service booking is available if each of its bookings is available separately.
 * For `SEQUENTIAL_BOOKINGS`, see `List Multi Service Availability Time Slots` documentation.
 */
var MultiServiceBookingType;
(function (MultiServiceBookingType) {
    MultiServiceBookingType["SEQUENTIAL_BOOKINGS"] = "SEQUENTIAL_BOOKINGS";
    MultiServiceBookingType["SEPARATE_BOOKINGS"] = "SEPARATE_BOOKINGS";
    MultiServiceBookingType["PARALLEL_BOOKINGS"] = "PARALLEL_BOOKINGS";
})(MultiServiceBookingType || (exports.MultiServiceBookingType = MultiServiceBookingType = {}));
var LocationType;
(function (LocationType) {
    LocationType["UNDEFINED"] = "UNDEFINED";
    LocationType["OWNER_BUSINESS"] = "OWNER_BUSINESS";
    LocationType["OWNER_CUSTOM"] = "OWNER_CUSTOM";
    LocationType["CUSTOM"] = "CUSTOM";
})(LocationType || (exports.LocationType = LocationType = {}));
var ValueType;
(function (ValueType) {
    /** Short text. This is the default value type. */
    ValueType["SHORT_TEXT"] = "SHORT_TEXT";
    /** Long text. */
    ValueType["LONG_TEXT"] = "LONG_TEXT";
    /** A text that represents the check box value. If selected the value is `true`, otherwise `false`. */
    ValueType["CHECK_BOX"] = "CHECK_BOX";
})(ValueType || (exports.ValueType = ValueType = {}));
/** Booking status. */
var BookingStatus;
(function (BookingStatus) {
    /**
     * The booking was created, but the customer hasn't completed the related
     * eCommerce order yet.
     */
    BookingStatus["CREATED"] = "CREATED";
    /**
     * The merchant has confirmed the booking and it appears in the
     * business calendar. Merchants can set up their *services*
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/services/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/services/services-v2/introduction))
     * to automatically confirm all `PENDING` bookings.
     */
    BookingStatus["CONFIRMED"] = "CONFIRMED";
    /**
     * The customer has canceled the booking. Depending on the relevant service's
     * _policy snapshot_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-policy-snapshots/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/policies/booking-policy-snapshots/introduction))
     * they may have to pay a _cancellation fee_
     * ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/booking-fees/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/pricing/booking-fees/introduction)).
     */
    BookingStatus["CANCELED"] = "CANCELED";
    /**
     * The merchant must manually confirm the booking before it appears
     * in the business calendar.
     */
    BookingStatus["PENDING"] = "PENDING";
    /** The merchant has declined the booking before the customer was charged. */
    BookingStatus["DECLINED"] = "DECLINED";
    /**
     * The booking is on a waitlist.
     * Currently, you can't call Register to Waitlist
     * ([REST](https://dev.wix.com/docs/rest/business-solutions/bookings/bookings/waitlist/register-to-waitlist))
     * for course or appointment bookings, even though this is supported in live sites.
     * You can call Register to Waitlist only for class session bookings.
     */
    BookingStatus["WAITING_LIST"] = "WAITING_LIST";
})(BookingStatus || (exports.BookingStatus = BookingStatus = {}));
/**
 * Payment status.
 * Automatically updated when using eCommerce checkout APIs.
 */
var PaymentStatus;
(function (PaymentStatus) {
    /** Undefined payment status. */
    PaymentStatus["UNDEFINED"] = "UNDEFINED";
    /** The booking isn't paid. */
    PaymentStatus["NOT_PAID"] = "NOT_PAID";
    /** The booking is fully paid. */
    PaymentStatus["PAID"] = "PAID";
    /** The booking is partially paid. */
    PaymentStatus["PARTIALLY_PAID"] = "PARTIALLY_PAID";
    /** The booking is refunded. */
    PaymentStatus["REFUNDED"] = "REFUNDED";
    /** The booking is free of charge. */
    PaymentStatus["EXEMPT"] = "EXEMPT";
})(PaymentStatus || (exports.PaymentStatus = PaymentStatus = {}));
/**
 * Selected payment option.
 *
 * One of the payment options offered by the service.
 * This field is set when the user selects an option during booking.
 * If left undefined, the payment option is resolved by the service configuration on checkout.
 */
var SelectedPaymentOption;
(function (SelectedPaymentOption) {
    /** Undefined payment option. */
    SelectedPaymentOption["UNDEFINED"] = "UNDEFINED";
    /** Offline payment. */
    SelectedPaymentOption["OFFLINE"] = "OFFLINE";
    /** Online payment. */
    SelectedPaymentOption["ONLINE"] = "ONLINE";
    /** Payment using a Wix Pricing Plan. */
    SelectedPaymentOption["MEMBERSHIP"] = "MEMBERSHIP";
    /**
     * Customers can pay only in person with a Wix Pricing Plan, while the Wix user
     * must manually redeem the pricing plan in the dashboard.
     */
    SelectedPaymentOption["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(SelectedPaymentOption || (exports.SelectedPaymentOption = SelectedPaymentOption = {}));
var Platform;
(function (Platform) {
    Platform["UNDEFINED_PLATFORM"] = "UNDEFINED_PLATFORM";
    Platform["WEB"] = "WEB";
    Platform["MOBILE_APP"] = "MOBILE_APP";
})(Platform || (exports.Platform = Platform = {}));
var Actor;
(function (Actor) {
    Actor["UNDEFINED_ACTOR"] = "UNDEFINED_ACTOR";
    Actor["BUSINESS"] = "BUSINESS";
    Actor["CUSTOMER"] = "CUSTOMER";
})(Actor || (exports.Actor = Actor = {}));
var IdentityType;
(function (IdentityType) {
    IdentityType["UNKNOWN"] = "UNKNOWN";
    IdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    IdentityType["MEMBER"] = "MEMBER";
    IdentityType["WIX_USER"] = "WIX_USER";
    IdentityType["APP"] = "APP";
})(IdentityType || (exports.IdentityType = IdentityType = {}));
var BookingFeeStatus;
(function (BookingFeeStatus) {
    /** There is no information about the booking fee status. */
    BookingFeeStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** The booking fee hasn't been applied to the eCommerce order yet. */
    BookingFeeStatus["NOT_YET_APPLIED_TO_ORDER"] = "NOT_YET_APPLIED_TO_ORDER";
    /** The booking fee has already been applied as an additional fee to the eCommerce order. */
    BookingFeeStatus["APPLIED_TO_ORDER"] = "APPLIED_TO_ORDER";
})(BookingFeeStatus || (exports.BookingFeeStatus = BookingFeeStatus = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
/**
 * > **Deprecation Notice**
 * >
 * > **This endpoint has been replaced with [Query Extended Bookings](https://dev.wix.com/api/rest/wix-bookings/bookings-reader-v2/query-extended-bookings) and will be removed on May 31, 2025.**
 * > **If your app uses this endpoint, we recommend updating your code as soon as possible.**
 *
 *
 * Retrieves a list of bookings, given the provided paging, filtering, and sorting.
 *
 *
 * You can also retrieve information about which actions the customer can perform
 * for the bookings. To do so, pass `withBookingAllowedActions` as `true`.
 *
 * Query Bookings runs with these defaults:
 *
 * - `createdDate` sorted in `DESC` order
 * - `cursorPaging.limit` is `50`
 *
 * You can check the overview about all
 * [supported filters](https://dev.wix.com/api/rest/wix-bookings/bookings-reader-v2/supported-filters)
 * for more information.
 *
 * `query.fields` and `query.fieldsets` aren't supported for this endpoint.
 *
 * When using filters for dates, you must use [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * Bookings belonging to a schedule don't have a `sessionId`. Therefore you
 * must use the `sessionId` filter that isn't part of the `query` object to
 * filter bookings for courses.
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language),
 * [Sorting and Paging](https://dev.wix.com/api/rest/getting-started/sorting-and-paging),
 * and [Field Projection](https://dev.wix.com/api/rest/getting-started/field-projection).
 *
 * When calling Query Bookings, the retrieved data may not contain your most recent changes. See
 * [Wix-data and Eventual Consistency](reference/wix-data/introduction#wix-data_introduction_wix-data-and-eventual-consistency)
 * for more information.
 * @public
 * @documentationMaturity preview
 * @requiredField query
 * @param query - Information about filters, paging, and sorting.
 * @param options - Additional options for performing the query.
 * @permissionId BOOKINGS.BOOKING_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read bookings calendar - including participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR-WITH-PARTICIPANTS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.reader.v2.BookingsReader.Query
 * @deprecated
 */
async function query(query, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        query: query,
        withBookingAllowedActions: options?.withBookingAllowedActions,
        withBookingAttendanceInfo: options?.withBookingAttendanceInfo,
        sessionId: options?.sessionId,
    });
    const reqOpts = ambassadorWixBookingsReaderV2ExtendedBooking.query(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                query: '$[0]',
                withBookingAllowedActions: '$[1].withBookingAllowedActions',
                withBookingAttendanceInfo: '$[1].withBookingAttendanceInfo',
                sessionId: '$[1].sessionId',
            },
            singleArgumentUnchanged: false,
        }, ['query', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.query = query;
/**
 * Retrieves a list of bookings, including additional extended information, given the provided paging, filtering, and sorting.
 *
 * `queryExtendedBookings()` doesn't use a query builder, instead it uses [API query language](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language#with-the-api-query-language).
 *
 * Up to 100 extended bookings can be returned per request.
 *
 * `queryExtendedBookings()` runs with these defaults, which you can override:
 *
 * - `createdDate` sorted in `DESC` order
 * - `cursorPaging.limit` is `50`
 *
 *
 * You can retrieve information about which actions the customer can perform
 * for the bookings. To do so, pass `withBookingAllowedActions` as `true`.
 *
 *
 * For field support, see
 * [supported filters](https://www.wix.com/velo/reference/wix-bookings-v2/extendedbookings/supported-filters)
 * for more information.
 *
 * You can specify a filter only once per query. If you specify a filter
 * more than once, only the first filter determines the extended bookings that are returned.
 *
 * When filtering by date, you must use [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 * @public
 * @requiredField query
 * @param query - Information about filters, paging, and sorting.
 * @param options - Additional options for performing the query.
 * @permissionId BOOKINGS.BOOKING_READ
 * @permissionId BOOKINGS.MANAGE_BOOKINGS
 * @permissionId BOOKINGS.BOOKING_READ_ANY
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Read bookings calendar - including participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-CALENDAR-WITH-PARTICIPANTS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.bookings.reader.v2.BookingsReader.QueryExtendedBookings
 */
async function queryExtendedBookings(query, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        query: query,
        withBookingAllowedActions: options?.withBookingAllowedActions,
        withBookingAttendanceInfo: options?.withBookingAttendanceInfo,
        withBookingConferencingDetails: options?.withBookingConferencingDetails,
        withBookingPolicySettings: options?.withBookingPolicySettings,
        withBookingFeeDetails: options?.withBookingFeeDetails,
    });
    const reqOpts = ambassadorWixBookingsReaderV2ExtendedBooking.queryExtendedBookings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                query: '$[0]',
                withBookingAllowedActions: '$[1].withBookingAllowedActions',
                withBookingAttendanceInfo: '$[1].withBookingAttendanceInfo',
                withBookingConferencingDetails: '$[1].withBookingConferencingDetails',
                withBookingPolicySettings: '$[1].withBookingPolicySettings',
                withBookingFeeDetails: '$[1].withBookingFeeDetails',
            },
            singleArgumentUnchanged: false,
        }, ['query', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.queryExtendedBookings = queryExtendedBookings;
/**
 * Counts the number of bookings matching the specified filters.
 *
 *
 * For field support see
 * [supported filters](https://dev.wix.com/api/rest/wix-bookings/bookings-reader-v2/supported-filters)
 * for more information.
 * @public
 * @documentationMaturity preview
 * @permissionId BOOKINGS.BOOKING_MANAGE
 * @permissionId BOOKINGS.MANAGE_BOOKINGS
 * @permissionId BOOKINGS.BOOKING_READ_ANY
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn com.wixpress.bookings.reader.v2.BookingsReader.CountExtendedBookings
 */
async function countExtendedBookings(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsReaderV2ExtendedBooking.countExtendedBookings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.countExtendedBookings = countExtendedBookings;
//# sourceMappingURL=bookings-reader-v2-extended-booking-extended-bookings.universal.js.map