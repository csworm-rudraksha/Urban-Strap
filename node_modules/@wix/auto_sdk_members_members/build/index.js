"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// index.ts
var index_exports = {};
__export(index_exports, {
  ActivityStatusStatus: () => ActivityStatusStatus,
  DeleteStatus: () => DeleteStatus,
  Namespace: () => Namespace,
  PrivacyStatusStatus: () => PrivacyStatusStatus,
  Set: () => Set,
  SiteCreatedContext: () => SiteCreatedContext,
  SortOrder: () => SortOrder,
  State: () => State,
  Status: () => Status,
  WebhookIdentityType: () => WebhookIdentityType,
  approveMember: () => approveMember4,
  blockMember: () => blockMember4,
  bulkApproveMembers: () => bulkApproveMembers4,
  bulkBlockMembers: () => bulkBlockMembers4,
  bulkDeleteMembers: () => bulkDeleteMembers4,
  bulkDeleteMembersByFilter: () => bulkDeleteMembersByFilter4,
  createMember: () => createMember4,
  deleteMember: () => deleteMember4,
  deleteMemberAddresses: () => deleteMemberAddresses4,
  deleteMemberEmails: () => deleteMemberEmails4,
  deleteMemberPhones: () => deleteMemberPhones4,
  deleteMyMember: () => deleteMyMember4,
  disconnectMember: () => disconnectMember4,
  getCurrentMember: () => getCurrentMember3,
  getMember: () => getMember4,
  joinCommunity: () => joinCommunity4,
  leaveCommunity: () => leaveCommunity4,
  listMembers: () => listMembers4,
  muteMember: () => muteMember4,
  onMemberCreated: () => onMemberCreated2,
  onMemberDeleted: () => onMemberDeleted2,
  onMemberUpdated: () => onMemberUpdated2,
  queryMembers: () => queryMembers4,
  unmuteMember: () => unmuteMember4,
  updateCurrentMemberSlug: () => updateCurrentMemberSlug3,
  updateMember: () => updateMember4,
  updateMemberSlug: () => updateMemberSlug4
});
module.exports = __toCommonJS(index_exports);

// src/members-v1-member-members.public.ts
var import_rename_all_nested_keys2 = require("@wix/sdk-runtime/rename-all-nested-keys");
var import_timestamp3 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths2 = require("@wix/sdk-runtime/transformations/transform-paths");
var import_sdk_types = require("@wix/sdk-types");

// src/members-v1-member-members.universal.ts
var import_transform_error = require("@wix/sdk-runtime/transform-error");
var import_query_builder = require("@wix/sdk-runtime/query-builder");
var import_rename_all_nested_keys = require("@wix/sdk-runtime/rename-all-nested-keys");

// src/members-v1-member-members.http.ts
var import_rest_modules = require("@wix/sdk-runtime/rest-modules");
var import_timestamp = require("@wix/sdk-runtime/transformations/timestamp");
var import_timestamp2 = require("@wix/sdk-runtime/transformations/timestamp");
var import_transform_paths = require("@wix/sdk-runtime/transformations/transform-paths");
var import_rest_modules2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixpressMembersApiMembersUrl(opts) {
  const domainToMappings = {
    "www.wixapis.com": [
      {
        srcPath: "/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "api._api_base_domain_": [
      {
        srcPath: "/members-ng-api",
        destPath: ""
      }
    ],
    "www._base_domain_": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "manage._base_domain_": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "editor._base_domain_": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "blocks._base_domain_": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "create.editorx": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "editor.wixapps.net": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "*.dev.wix-code.com": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "bo._base_domain_": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "wixbo.ai": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "wix-bo.com": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    _: [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ],
    "members.wixapps.net": [
      {
        srcPath: "/_api/members/v1/members",
        destPath: "/v1/members"
      }
    ]
  };
  return (0, import_rest_modules2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
var PACKAGE_NAME = "@wix/auto_sdk_members_members";
function updateMySlug(payload) {
  function __updateMySlug({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.UpdateMySlug",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/my/slug",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateMySlug;
}
function updateMemberSlug(payload) {
  function __updateMemberSlug({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.UpdateMemberSlug",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/slug",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateMemberSlug;
}
function joinCommunity(payload) {
  function __joinCommunity({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.JoinCommunity",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/join-community",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __joinCommunity;
}
function leaveCommunity(payload) {
  function __leaveCommunity({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.LeaveCommunity",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/leave-community",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __leaveCommunity;
}
function getMyMember(payload) {
  function __getMyMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "GET",
      methodFqn: "com.wixpress.members.api.Members.GetMyMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/my",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getMyMember;
}
function getMember(payload) {
  function __getMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "GET",
      methodFqn: "com.wixpress.members.api.Members.GetMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __getMember;
}
function listMembers(payload) {
  function __listMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "GET",
      methodFqn: "com.wixpress.members.api.Members.ListMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload, true),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "members.createdDate" },
            { path: "members.updatedDate" },
            { path: "members.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __listMembers;
}
function queryMembers(payload) {
  function __queryMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.QueryMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/query",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "members.createdDate" },
            { path: "members.updatedDate" },
            { path: "members.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __queryMembers;
}
function muteMember(payload) {
  function __muteMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.MuteMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/mute",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __muteMember;
}
function unmuteMember(payload) {
  function __unmuteMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.UnmuteMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/unmute",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __unmuteMember;
}
function approveMember(payload) {
  function __approveMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.ApproveMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/approve",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __approveMember;
}
function blockMember(payload) {
  function __blockMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.BlockMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/block",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __blockMember;
}
function disconnectMember(payload) {
  function __disconnectMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.DisconnectMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/disconnect",
        data: payload,
        host
      }),
      data: payload,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __disconnectMember;
}
function deleteMember(payload) {
  function __deleteMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "DELETE",
      methodFqn: "com.wixpress.members.api.Members.DeleteMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteMember;
}
function deleteMyMember(payload) {
  function __deleteMyMember({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "DELETE",
      methodFqn: "com.wixpress.members.api.Members.DeleteMyMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/my",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload)
    };
    return metadata;
  }
  return __deleteMyMember;
}
function bulkDeleteMembers(payload) {
  function __bulkDeleteMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.BulkDeleteMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/bulk/delete",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteMembers;
}
function bulkDeleteMembersByFilter(payload) {
  function __bulkDeleteMembersByFilter({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.BulkDeleteMembersByFilter",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/bulk/delete-by-filter",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkDeleteMembersByFilter;
}
function bulkApproveMembers(payload) {
  function __bulkApproveMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.BulkApproveMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/bulk/approve-by-filter",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkApproveMembers;
}
function bulkBlockMembers(payload) {
  function __bulkBlockMembers({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.BulkBlockMembers",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/bulk/block-by-filter",
        data: payload,
        host
      }),
      data: payload
    };
    return metadata;
  }
  return __bulkBlockMembers;
}
function createMember(payload) {
  function __createMember({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "member.createdDate" },
          { path: "member.updatedDate" },
          { path: "member.lastLoginDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "POST",
      methodFqn: "com.wixpress.members.api.Members.CreateMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __createMember;
}
function updateMember(payload) {
  function __updateMember({ host }) {
    const serializedData = (0, import_transform_paths.transformPaths)(payload, [
      {
        transformFn: import_timestamp.transformSDKTimestampToRESTTimestamp,
        paths: [
          { path: "member.createdDate" },
          { path: "member.updatedDate" },
          { path: "member.lastLoginDate" }
        ]
      }
    ]);
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "PATCH",
      methodFqn: "com.wixpress.members.api.Members.UpdateMember",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{member.id}",
        data: serializedData,
        host
      }),
      data: serializedData,
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __updateMember;
}
function deleteMemberPhones(payload) {
  function __deleteMemberPhones({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "DELETE",
      methodFqn: "com.wixpress.members.api.Members.DeleteMemberPhones",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/phones",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __deleteMemberPhones;
}
function deleteMemberEmails(payload) {
  function __deleteMemberEmails({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "DELETE",
      methodFqn: "com.wixpress.members.api.Members.DeleteMemberEmails",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/emails",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __deleteMemberEmails;
}
function deleteMemberAddresses(payload) {
  function __deleteMemberAddresses({ host }) {
    const metadata = {
      entityFqdn: "wix.members.v1.member",
      method: "DELETE",
      methodFqn: "com.wixpress.members.api.Members.DeleteMemberAddresses",
      packageName: PACKAGE_NAME,
      url: resolveComWixpressMembersApiMembersUrl({
        protoPath: "/v1/members/{id}/addresses",
        data: payload,
        host
      }),
      params: (0, import_rest_modules.toURLSearchParams)(payload),
      transformResponse: (payload2) => (0, import_transform_paths.transformPaths)(payload2, [
        {
          transformFn: import_timestamp2.transformRESTTimestampToSDKTimestamp,
          paths: [
            { path: "member.createdDate" },
            { path: "member.updatedDate" },
            { path: "member.lastLoginDate" }
          ]
        }
      ])
    };
    return metadata;
  }
  return __deleteMemberAddresses;
}

// src/members-v1-member-members.universal.ts
var Status = /* @__PURE__ */ ((Status2) => {
  Status2["UNKNOWN"] = "UNKNOWN";
  Status2["PENDING"] = "PENDING";
  Status2["APPROVED"] = "APPROVED";
  Status2["BLOCKED"] = "BLOCKED";
  Status2["OFFLINE"] = "OFFLINE";
  return Status2;
})(Status || {});
var PrivacyStatusStatus = /* @__PURE__ */ ((PrivacyStatusStatus2) => {
  PrivacyStatusStatus2["UNKNOWN"] = "UNKNOWN";
  PrivacyStatusStatus2["PRIVATE"] = "PRIVATE";
  PrivacyStatusStatus2["PUBLIC"] = "PUBLIC";
  return PrivacyStatusStatus2;
})(PrivacyStatusStatus || {});
var ActivityStatusStatus = /* @__PURE__ */ ((ActivityStatusStatus2) => {
  ActivityStatusStatus2["UNKNOWN"] = "UNKNOWN";
  ActivityStatusStatus2["ACTIVE"] = "ACTIVE";
  ActivityStatusStatus2["MUTED"] = "MUTED";
  return ActivityStatusStatus2;
})(ActivityStatusStatus || {});
var Set = /* @__PURE__ */ ((Set2) => {
  Set2["PUBLIC"] = "PUBLIC";
  Set2["EXTENDED"] = "EXTENDED";
  Set2["FULL"] = "FULL";
  return Set2;
})(Set || {});
var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
  SortOrder2["ASC"] = "ASC";
  SortOrder2["DESC"] = "DESC";
  return SortOrder2;
})(SortOrder || {});
var State = /* @__PURE__ */ ((State2) => {
  State2["UNKNOWN"] = "UNKNOWN";
  State2["ENABLED"] = "ENABLED";
  State2["DISABLED"] = "DISABLED";
  State2["PENDING"] = "PENDING";
  State2["DEMO"] = "DEMO";
  return State2;
})(State || {});
var SiteCreatedContext = /* @__PURE__ */ ((SiteCreatedContext2) => {
  SiteCreatedContext2["OTHER"] = "OTHER";
  SiteCreatedContext2["FROM_TEMPLATE"] = "FROM_TEMPLATE";
  SiteCreatedContext2["DUPLICATE_BY_SITE_TRANSFER"] = "DUPLICATE_BY_SITE_TRANSFER";
  SiteCreatedContext2["DUPLICATE"] = "DUPLICATE";
  SiteCreatedContext2["OLD_SITE_TRANSFER"] = "OLD_SITE_TRANSFER";
  SiteCreatedContext2["FLASH"] = "FLASH";
  return SiteCreatedContext2;
})(SiteCreatedContext || {});
var Namespace = /* @__PURE__ */ ((Namespace2) => {
  Namespace2["UNKNOWN_NAMESPACE"] = "UNKNOWN_NAMESPACE";
  Namespace2["WIX"] = "WIX";
  Namespace2["SHOUT_OUT"] = "SHOUT_OUT";
  Namespace2["ALBUMS"] = "ALBUMS";
  Namespace2["WIX_STORES_TEST_DRIVE"] = "WIX_STORES_TEST_DRIVE";
  Namespace2["HOTELS"] = "HOTELS";
  Namespace2["CLUBS"] = "CLUBS";
  Namespace2["ONBOARDING_DRAFT"] = "ONBOARDING_DRAFT";
  Namespace2["DEV_SITE"] = "DEV_SITE";
  Namespace2["LOGOS"] = "LOGOS";
  Namespace2["VIDEO_MAKER"] = "VIDEO_MAKER";
  Namespace2["PARTNER_DASHBOARD"] = "PARTNER_DASHBOARD";
  Namespace2["DEV_CENTER_COMPANY"] = "DEV_CENTER_COMPANY";
  Namespace2["HTML_DRAFT"] = "HTML_DRAFT";
  Namespace2["SITELESS_BUSINESS"] = "SITELESS_BUSINESS";
  Namespace2["CREATOR_ECONOMY"] = "CREATOR_ECONOMY";
  Namespace2["DASHBOARD_FIRST"] = "DASHBOARD_FIRST";
  Namespace2["ANYWHERE"] = "ANYWHERE";
  Namespace2["HEADLESS"] = "HEADLESS";
  Namespace2["ACCOUNT_MASTER_CMS"] = "ACCOUNT_MASTER_CMS";
  Namespace2["RISE"] = "RISE";
  Namespace2["BRANDED_FIRST"] = "BRANDED_FIRST";
  Namespace2["NOWNIA"] = "NOWNIA";
  Namespace2["UGC_TEMPLATE"] = "UGC_TEMPLATE";
  Namespace2["CODUX"] = "CODUX";
  Namespace2["MEDIA_DESIGN_CREATOR"] = "MEDIA_DESIGN_CREATOR";
  Namespace2["SHARED_BLOG_ENTERPRISE"] = "SHARED_BLOG_ENTERPRISE";
  Namespace2["STANDALONE_FORMS"] = "STANDALONE_FORMS";
  Namespace2["STANDALONE_EVENTS"] = "STANDALONE_EVENTS";
  Namespace2["MIMIR"] = "MIMIR";
  return Namespace2;
})(Namespace || {});
var DeleteStatus = /* @__PURE__ */ ((DeleteStatus2) => {
  DeleteStatus2["UNKNOWN"] = "UNKNOWN";
  DeleteStatus2["TRASH"] = "TRASH";
  DeleteStatus2["DELETED"] = "DELETED";
  DeleteStatus2["PENDING_PURGE"] = "PENDING_PURGE";
  DeleteStatus2["PURGED_EXTERNALLY"] = "PURGED_EXTERNALLY";
  return DeleteStatus2;
})(DeleteStatus || {});
var WebhookIdentityType = /* @__PURE__ */ ((WebhookIdentityType2) => {
  WebhookIdentityType2["UNKNOWN"] = "UNKNOWN";
  WebhookIdentityType2["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
  WebhookIdentityType2["MEMBER"] = "MEMBER";
  WebhookIdentityType2["WIX_USER"] = "WIX_USER";
  WebhookIdentityType2["APP"] = "APP";
  return WebhookIdentityType2;
})(WebhookIdentityType || {});
async function updateCurrentMemberSlug(slug) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ slug });
  const reqOpts = updateMySlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { slug: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["slug"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateMemberSlug2(_id, slug) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    slug
  });
  const reqOpts = updateMemberSlug(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", slug: "$[1]" },
        singleArgumentUnchanged: false
      },
      ["_id", "slug"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function joinCommunity2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = joinCommunity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function leaveCommunity2() {
  const { httpClient, sideEffects } = arguments[0];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({});
  const reqOpts = leaveCommunity(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {},
        singleArgumentUnchanged: false
      },
      []
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getCurrentMember(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    fieldsets: options?.fieldsets
  });
  const reqOpts = getMyMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { fieldsets: "$[0].fieldsets" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function getMember2(_id, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    id: _id,
    fieldsets: options?.fieldsets
  });
  const reqOpts = getMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.member;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]", fieldsets: "$[1].fieldsets" },
        singleArgumentUnchanged: false
      },
      ["_id", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function listMembers2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    paging: options?.paging,
    fieldsets: options?.fieldsets,
    sorting: options?.sorting
  });
  const reqOpts = listMembers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          paging: "$[0].paging",
          fieldsets: "$[0].fieldsets",
          sorting: "$[0].sorting"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
function queryMembers2(options) {
  const { httpClient, sideEffects } = arguments[1];
  return (0, import_query_builder.queryBuilder)({
    func: async (payload) => {
      const reqOpts = queryMembers({
        ...payload,
        ...options ?? {}
      });
      sideEffects?.onSiteCall?.();
      try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return result;
      } catch (err) {
        sideEffects?.onError?.(err);
        throw err;
      }
    },
    requestTransformer: (query) => {
      const args = [query, options];
      return (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
        ...args?.[1],
        query: args?.[0]
      });
    },
    responseTransformer: ({ data }) => {
      const transformedData = (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(data);
      return {
        items: transformedData?.members,
        pagingMetadata: transformedData?.metadata
      };
    },
    errorTransformer: (err) => {
      const transformedError = (0, import_transform_error.transformError)(err, {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { query: "$[0]" },
        singleArgumentUnchanged: false
      });
      throw transformedError;
    },
    pagingMethod: "OFFSET",
    transformationPaths: {}
  });
}
async function muteMember2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = muteMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function unmuteMember2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = unmuteMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function approveMember2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = approveMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function blockMember2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = blockMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function disconnectMember2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = disconnectMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteMember2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteMyMember2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    contentAssigneeId: options?.contentAssigneeId
  });
  const reqOpts = deleteMyMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          contentAssigneeId: "$[0].contentAssigneeId"
        },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteMembers2(memberIds) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    memberIds
  });
  const reqOpts = bulkDeleteMembers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { memberIds: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["memberIds"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkDeleteMembersByFilter2(filter, options) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    filter,
    contentAssigneeId: options?.contentAssigneeId,
    search: options?.search
  });
  const reqOpts = bulkDeleteMembersByFilter(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: {
          filter: "$[0]",
          contentAssigneeId: "$[1].contentAssigneeId",
          search: "$[1].search"
        },
        singleArgumentUnchanged: false
      },
      ["filter", "options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkApproveMembers2(filter) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ filter });
  const reqOpts = bulkApproveMembers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { filter: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["filter"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function bulkBlockMembers2(filter) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ filter });
  const reqOpts = bulkBlockMembers(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { filter: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["filter"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function createMember2(options) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    member: options?.member
  });
  const reqOpts = createMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.member;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { member: "$[0].member" },
        singleArgumentUnchanged: false
      },
      ["options"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function updateMember2(_id, member) {
  const { httpClient, sideEffects } = arguments[2];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({
    member: { ...member, id: _id }
  });
  const reqOpts = updateMember(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data)?.member;
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: { member: "$[1]" },
        explicitPathsToArguments: { "member.id": "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id", "member"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteMemberPhones2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteMemberPhones(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteMemberEmails2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteMemberEmails(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}
async function deleteMemberAddresses2(_id) {
  const { httpClient, sideEffects } = arguments[1];
  const payload = (0, import_rename_all_nested_keys.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
  const reqOpts = deleteMemberAddresses(payload);
  sideEffects?.onSiteCall?.();
  try {
    const result = await httpClient.request(reqOpts);
    sideEffects?.onSuccess?.(result);
    return (0, import_rename_all_nested_keys.renameKeysFromRESTResponseToSDKResponse)(result.data);
  } catch (err) {
    const transformedError = (0, import_transform_error.transformError)(
      err,
      {
        spreadPathsToArguments: {},
        explicitPathsToArguments: { id: "$[0]" },
        singleArgumentUnchanged: false
      },
      ["_id"]
    );
    sideEffects?.onError?.(err);
    throw transformedError;
  }
}

// src/members-v1-member-members.public.ts
function updateCurrentMemberSlug2(httpClient) {
  return (slug) => updateCurrentMemberSlug(
    slug,
    // @ts-ignore
    { httpClient }
  );
}
function updateMemberSlug3(httpClient) {
  return (_id, slug) => updateMemberSlug2(
    _id,
    slug,
    // @ts-ignore
    { httpClient }
  );
}
function joinCommunity3(httpClient) {
  return () => joinCommunity2(
    // @ts-ignore
    { httpClient }
  );
}
function leaveCommunity3(httpClient) {
  return () => leaveCommunity2(
    // @ts-ignore
    { httpClient }
  );
}
function getCurrentMember2(httpClient) {
  return (options) => getCurrentMember(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function getMember3(httpClient) {
  return (_id, options) => getMember2(
    _id,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function listMembers3(httpClient) {
  return (options) => listMembers2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function queryMembers3(httpClient) {
  return (options) => queryMembers2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function muteMember3(httpClient) {
  return (_id) => muteMember2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function unmuteMember3(httpClient) {
  return (_id) => unmuteMember2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function approveMember3(httpClient) {
  return (_id) => approveMember2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function blockMember3(httpClient) {
  return (_id) => blockMember2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function disconnectMember3(httpClient) {
  return (_id) => disconnectMember2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function deleteMember3(httpClient) {
  return (_id) => deleteMember2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function deleteMyMember3(httpClient) {
  return (options) => deleteMyMember2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteMembers3(httpClient) {
  return (memberIds) => bulkDeleteMembers2(
    memberIds,
    // @ts-ignore
    { httpClient }
  );
}
function bulkDeleteMembersByFilter3(httpClient) {
  return (filter, options) => bulkDeleteMembersByFilter2(
    filter,
    options,
    // @ts-ignore
    { httpClient }
  );
}
function bulkApproveMembers3(httpClient) {
  return (filter) => bulkApproveMembers2(
    filter,
    // @ts-ignore
    { httpClient }
  );
}
function bulkBlockMembers3(httpClient) {
  return (filter) => bulkBlockMembers2(
    filter,
    // @ts-ignore
    { httpClient }
  );
}
function createMember3(httpClient) {
  return (options) => createMember2(
    options,
    // @ts-ignore
    { httpClient }
  );
}
function updateMember3(httpClient) {
  return (_id, member) => updateMember2(
    _id,
    member,
    // @ts-ignore
    { httpClient }
  );
}
function deleteMemberPhones3(httpClient) {
  return (_id) => deleteMemberPhones2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function deleteMemberEmails3(httpClient) {
  return (_id) => deleteMemberEmails2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
function deleteMemberAddresses3(httpClient) {
  return (_id) => deleteMemberAddresses2(
    _id,
    // @ts-ignore
    { httpClient }
  );
}
var onMemberCreated = (0, import_sdk_types.EventDefinition)(
  "wix.members.v1.member_created",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.lastLoginDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onMemberDeleted = (0, import_sdk_types.EventDefinition)(
  "wix.members.v1.member_deleted",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "undefined.createdDate" },
          { path: "undefined.updatedDate" },
          { path: "undefined.lastLoginDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();
var onMemberUpdated = (0, import_sdk_types.EventDefinition)(
  "wix.members.v1.member_updated",
  true,
  (event) => (0, import_rename_all_nested_keys2.renameKeysFromRESTResponseToSDKResponse)(
    (0, import_transform_paths2.transformPaths)(event, [
      {
        transformFn: import_timestamp3.transformRESTTimestampToSDKTimestamp,
        paths: [
          { path: "entity.createdDate" },
          { path: "entity.updatedDate" },
          { path: "entity.lastLoginDate" },
          { path: "metadata.eventTime" }
        ]
      }
    ])
  )
)();

// src/members-v1-member-members.context.ts
var import_rest_modules3 = require("@wix/sdk-runtime/rest-modules");
var import_event_definition_modules = require("@wix/sdk-runtime/event-definition-modules");
var updateCurrentMemberSlug3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateCurrentMemberSlug2);
var updateMemberSlug4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateMemberSlug3);
var joinCommunity4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(joinCommunity3);
var leaveCommunity4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(leaveCommunity3);
var getCurrentMember3 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getCurrentMember2);
var getMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(getMember3);
var listMembers4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(listMembers3);
var queryMembers4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(queryMembers3);
var muteMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(muteMember3);
var unmuteMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(unmuteMember3);
var approveMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(approveMember3);
var blockMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(blockMember3);
var disconnectMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(disconnectMember3);
var deleteMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteMember3);
var deleteMyMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteMyMember3);
var bulkDeleteMembers4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkDeleteMembers3);
var bulkDeleteMembersByFilter4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkDeleteMembersByFilter3);
var bulkApproveMembers4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkApproveMembers3);
var bulkBlockMembers4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(bulkBlockMembers3);
var createMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(createMember3);
var updateMember4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(updateMember3);
var deleteMemberPhones4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteMemberPhones3);
var deleteMemberEmails4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteMemberEmails3);
var deleteMemberAddresses4 = /* @__PURE__ */ (0, import_rest_modules3.createRESTModule)(deleteMemberAddresses3);
var onMemberCreated2 = (0, import_event_definition_modules.createEventModule)(onMemberCreated);
var onMemberDeleted2 = (0, import_event_definition_modules.createEventModule)(onMemberDeleted);
var onMemberUpdated2 = (0, import_event_definition_modules.createEventModule)(onMemberUpdated);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ActivityStatusStatus,
  DeleteStatus,
  Namespace,
  PrivacyStatusStatus,
  Set,
  SiteCreatedContext,
  SortOrder,
  State,
  Status,
  WebhookIdentityType,
  approveMember,
  blockMember,
  bulkApproveMembers,
  bulkBlockMembers,
  bulkDeleteMembers,
  bulkDeleteMembersByFilter,
  createMember,
  deleteMember,
  deleteMemberAddresses,
  deleteMemberEmails,
  deleteMemberPhones,
  deleteMyMember,
  disconnectMember,
  getCurrentMember,
  getMember,
  joinCommunity,
  leaveCommunity,
  listMembers,
  muteMember,
  onMemberCreated,
  onMemberDeleted,
  onMemberUpdated,
  queryMembers,
  unmuteMember,
  updateCurrentMemberSlug,
  updateMember,
  updateMemberSlug
});
//# sourceMappingURL=index.js.map