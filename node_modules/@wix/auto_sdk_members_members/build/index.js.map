{"version":3,"sources":["../index.ts","../src/members-v1-member-members.public.ts","../src/members-v1-member-members.universal.ts","../src/members-v1-member-members.http.ts","../src/members-v1-member-members.context.ts"],"sourcesContent":["export * from './src/members-v1-member-members.context.js';\n","import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { EventDefinition, HttpClient } from '@wix/sdk-types';\nimport {\n  ApproveMemberResponse,\n  BlockMemberResponse,\n  BulkApproveMembersResponse,\n  BulkBlockMembersResponse,\n  BulkDeleteMembersByFilterOptions,\n  BulkDeleteMembersByFilterResponse,\n  BulkDeleteMembersResponse,\n  CreateMemberOptions,\n  DeleteMemberAddressesResponse,\n  DeleteMemberEmailsResponse,\n  DeleteMemberPhonesResponse,\n  DeleteMyMemberOptions,\n  DisconnectMemberResponse,\n  GetCurrentMemberOptions,\n  GetMemberOptions,\n  GetMyMemberResponse,\n  JoinCommunityResponse,\n  LeaveCommunityResponse,\n  ListMembersOptions,\n  ListMembersResponse,\n  Member,\n  MemberCreatedEnvelope,\n  MemberDeletedEnvelope,\n  MemberUpdatedEnvelope,\n  MembersQueryBuilder,\n  MuteMemberResponse,\n  QueryMembersOptions,\n  UnmuteMemberResponse,\n  UpdateMember,\n  UpdateMemberSlugResponse,\n  UpdateMySlugResponse,\n  approveMember as universalApproveMember,\n  blockMember as universalBlockMember,\n  bulkApproveMembers as universalBulkApproveMembers,\n  bulkBlockMembers as universalBulkBlockMembers,\n  bulkDeleteMembers as universalBulkDeleteMembers,\n  bulkDeleteMembersByFilter as universalBulkDeleteMembersByFilter,\n  createMember as universalCreateMember,\n  deleteMember as universalDeleteMember,\n  deleteMemberAddresses as universalDeleteMemberAddresses,\n  deleteMemberEmails as universalDeleteMemberEmails,\n  deleteMemberPhones as universalDeleteMemberPhones,\n  deleteMyMember as universalDeleteMyMember,\n  disconnectMember as universalDisconnectMember,\n  getCurrentMember as universalGetCurrentMember,\n  getMember as universalGetMember,\n  joinCommunity as universalJoinCommunity,\n  leaveCommunity as universalLeaveCommunity,\n  listMembers as universalListMembers,\n  muteMember as universalMuteMember,\n  queryMembers as universalQueryMembers,\n  unmuteMember as universalUnmuteMember,\n  updateCurrentMemberSlug as universalUpdateCurrentMemberSlug,\n  updateMember as universalUpdateMember,\n  updateMemberSlug as universalUpdateMemberSlug,\n} from './members-v1-member-members.universal.js';\n\nexport const __metadata = { PACKAGE_NAME: '@wix/members' };\n\nexport function updateCurrentMemberSlug(\n  httpClient: HttpClient\n): UpdateCurrentMemberSlugSignature {\n  return (slug: string) =>\n    universalUpdateCurrentMemberSlug(\n      slug,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateCurrentMemberSlugSignature {\n  /**\n   * Updates the currently logged in member's slug.\n   *\n   * The `slug` is the end of a member's URL that refers to a specific logged-in member. For example, if a member's URL is `https://example.com/member/{my-member-slug}`, the slug is `my-member-slug`. The slug is case-sensitive and is generally derived from the member's `nickname`; otherwise, it's derived from the `loginEmail`.\n   *\n   * > **Note:**\n   * > Only logged-in members can call this method without elevated permissions.\n   * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n   * @param - New slug.\n   */\n  (slug: string): Promise<UpdateMySlugResponse>;\n}\n\nexport function updateMemberSlug(\n  httpClient: HttpClient\n): UpdateMemberSlugSignature {\n  return (_id: string, slug: string) =>\n    universalUpdateMemberSlug(\n      _id,\n      slug,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateMemberSlugSignature {\n  /**\n   * Updates a member's slug.\n   * @param - Member ID.\n   * @param - New slug.\n   */\n  (_id: string, slug: string): Promise<UpdateMemberSlugResponse>;\n}\n\nexport function joinCommunity(httpClient: HttpClient): JoinCommunitySignature {\n  return () =>\n    universalJoinCommunity(\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface JoinCommunitySignature {\n  /**\n   * Joins the current member to the site community and sets their profile to public.\n   *\n   * When a member's profile is public, they have access to the site's\n   * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)\n   * features, such as chat, forum, and followers,\n   * and their profile is visible to other members and site visitors.\n   *\n   * > **Note:**\n   * > Only logged-in members can call this method without elevated permissions.\n   * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n   * @returns Member profile.\n   */\n  (): Promise<JoinCommunityResponse>;\n}\n\nexport function leaveCommunity(\n  httpClient: HttpClient\n): LeaveCommunitySignature {\n  return () =>\n    universalLeaveCommunity(\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface LeaveCommunitySignature {\n  /**\n   * Removes the current member from the site community and sets their profile to private.\n   *\n   * When a member's profile is private,\n   * they do not have access to the site's\n   * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)\n   * features, such as chat, forum, and followers,\n   * and their profile is hidden from other members and site visitors.\n   *\n   * > **Notes:**\n   * > + If a member leaves the site's community, their content, such as forum posts and blog comments, remain publicly visible.\n   *\n   * > + Only logged-in members can call this method without elevated permissions.\n   * > + To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n   * @returns Member profile.\n   */\n  (): Promise<LeaveCommunityResponse>;\n}\n\nexport function getCurrentMember(\n  httpClient: HttpClient\n): GetCurrentMemberSignature {\n  return (options?: GetCurrentMemberOptions) =>\n    universalGetCurrentMember(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetCurrentMemberSignature {\n  /**\n   * Retrieves the current member.\n   *\n   * >**Note:**\n   * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).\n   * @returns Member profile.\n   */\n  (options?: GetCurrentMemberOptions | undefined): Promise<GetMyMemberResponse>;\n}\n\nexport function getMember(httpClient: HttpClient): GetMemberSignature {\n  return (_id: string, options?: GetMemberOptions) =>\n    universalGetMember(\n      _id,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface GetMemberSignature {\n  /**\n   * Retrieves a member by ID.\n   *\n   * >**Note:** The returned Member object contains only the fields that were explicitly added to the Member object. Custom Contact fields are **not** automatically added to the Member object. They must be [added to the Member object by the site owner](https://support.wix.com/en/article/site-members-customizing-your-member-profile-fields).\n   *\n   * @param - Member ID.\n   * @param - Fieldset options.\n   * @returns The requested member.\n   */\n  (_id: string, options?: GetMemberOptions | undefined): Promise<Member>;\n}\n\nexport function listMembers(httpClient: HttpClient): ListMembersSignature {\n  return (options?: ListMembersOptions) =>\n    universalListMembers(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ListMembersSignature {\n  /**\n   * Lists site members, given the provided paging and fieldsets.\n   * @param - Options for paging, sorting, and specifying fields to return.\n   */\n  (options?: ListMembersOptions | undefined): Promise<ListMembersResponse>;\n}\n\nexport function queryMembers(httpClient: HttpClient): QueryMembersSignature {\n  return (options?: QueryMembersOptions) =>\n    universalQueryMembers(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface QueryMembersSignature {\n  /**\n   * Retrieves a list of up to 100 members, given the specified filters, fieldsets, sorting and paging, and returns a `MembersQueryBuilder` object.\n   *\n   * The returned object contains the query definition which is typically used to run the query using the `find()` method.\n   *\n   * You can refine the query by chaining `MembersQueryBuilder` methods onto the query. `MembersQueryBuilder` methods enable you to sort, filter, and control the results that `queryMembers()` returns. The methods that are chained to `queryMembers()` are applied in the order they are called.\n   *\n   * `queryMembers()` runs with the following `MembersQueryBuilder` defaults that you can override:\n   * - `skip`: `0`\n   * - `limit`: `50`\n   *\n   * Currently supported fields for sorting:\n   * - `profile.nickname`\n   * - `contact.firstName`\n   * - `contact.lastName`\n   * - `createdDate`\n   * - `lastLoginDate`\n   *\n   * The following `MembersQueryBuilder` methods are supported for the `queryMembers()` method. For a full description of the Locations object, see the returned for the `items` property in `MembersQueryResult`.\n   * @param - Query options.\n   */\n  (options?: QueryMembersOptions | undefined): MembersQueryBuilder;\n}\n\nexport function muteMember(httpClient: HttpClient): MuteMemberSignature {\n  return (_id: string) =>\n    universalMuteMember(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface MuteMemberSignature {\n  /**\n   * Mutes a member.\n   *\n   * Muted members can't engage with a community. For example, they can't leave comments, like posts or comments, or share content.\n   *\n   * You can mute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).\n   * @param - ID of the member to mute.\n   */\n  (_id: string): Promise<MuteMemberResponse>;\n}\n\nexport function unmuteMember(httpClient: HttpClient): UnmuteMemberSignature {\n  return (_id: string) =>\n    universalUnmuteMember(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UnmuteMemberSignature {\n  /**\n   * Unmutes a member.\n   *\n   * Unmuted members can engage with the community. For example, leave comments, like posts or comments, and share content.\n   *\n   * You can unmute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).\n   * @param - ID of the member to unmute.\n   */\n  (_id: string): Promise<UnmuteMemberResponse>;\n}\n\nexport function approveMember(httpClient: HttpClient): ApproveMemberSignature {\n  return (_id: string) =>\n    universalApproveMember(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface ApproveMemberSignature {\n  /**\n   * Changes member status to `\"APPROVED\"` and gives access to members-only pages.\n   *\n   * Call this API to:\n   * - Approve a pending member.\n   * - Unblock a blocked member.\n   * @param - ID of the member to approve.\n   */\n  (_id: string): Promise<ApproveMemberResponse>;\n}\n\nexport function blockMember(httpClient: HttpClient): BlockMemberSignature {\n  return (_id: string) =>\n    universalBlockMember(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BlockMemberSignature {\n  /**\n   * Blocks a member.\n   *\n   * A blocked member can't log in to members-only pages.\n   *\n   * To unblock a member, call Approve Member.\n   * @param - ID of a member to block.\n   */\n  (_id: string): Promise<BlockMemberResponse>;\n}\n\nexport function disconnectMember(\n  httpClient: HttpClient\n): DisconnectMemberSignature {\n  return (_id: string) =>\n    universalDisconnectMember(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DisconnectMemberSignature {\n  /**\n   * Disconnects a member.\n   *\n   * A disconnected member can't log in to members-only pages, and the member isn't visible in the dashboard.\n   *\n   * >**Note:** This action is irreversible. To connect the same member again, you have to create a member with a new slug.\n   * @param - ID of a member to disconnect.\n   */\n  (_id: string): Promise<DisconnectMemberResponse>;\n}\n\nexport function deleteMember(httpClient: HttpClient): DeleteMemberSignature {\n  return (_id: string) =>\n    universalDeleteMember(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteMemberSignature {\n  /**\n   * Deletes a member by ID.\n   *\n   * All content created by this member is transferred to a site owner's account. For example, if a Wix user had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n   * @param - ID of a member to delete.\n   */\n  (_id: string): Promise<void>;\n}\n\nexport function deleteMyMember(\n  httpClient: HttpClient\n): DeleteMyMemberSignature {\n  return (options?: DeleteMyMemberOptions) =>\n    universalDeleteMyMember(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteMyMemberSignature {\n  /**\n   * Deletes the current member.\n   *\n   * After calling this method, the member is logged out of the site.\n   *\n   * All content created by this member is transferred to another account. For example, if a Wix user had blog posts, those posts are transferred to the account specified in `contentAssignedId`, which then becomes the owner of those posts.\n   *\n   * >**Note:**\n   * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).\n   */\n  (options?: DeleteMyMemberOptions | undefined): Promise<void>;\n}\n\nexport function bulkDeleteMembers(\n  httpClient: HttpClient\n): BulkDeleteMembersSignature {\n  return (memberIds: string[]) =>\n    universalBulkDeleteMembers(\n      memberIds,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkDeleteMembersSignature {\n  /**\n   * Deletes multiple members by `memberId`.\n   *\n   * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n   * @param - IDs of members to be deleted.\n   */\n  (memberIds: string[]): Promise<BulkDeleteMembersResponse>;\n}\n\nexport function bulkDeleteMembersByFilter(\n  httpClient: HttpClient\n): BulkDeleteMembersByFilterSignature {\n  return (filter: any, options?: BulkDeleteMembersByFilterOptions) =>\n    universalBulkDeleteMembersByFilter(\n      filter,\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkDeleteMembersByFilterSignature {\n  /**\n   * Deletes multiple members by the specified filter.\n   *\n   * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n   * @param - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.\n   */\n  (\n    filter: any,\n    options?: BulkDeleteMembersByFilterOptions | undefined\n  ): Promise<BulkDeleteMembersByFilterResponse>;\n}\n\nexport function bulkApproveMembers(\n  httpClient: HttpClient\n): BulkApproveMembersSignature {\n  return (filter: any) =>\n    universalBulkApproveMembers(\n      filter,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkApproveMembersSignature {\n  /**\n   * Changes status of multiple members to `\"APPROVED\"`, and gives access to members-only pages.\n   *\n   * Call this API to:\n   * - Approve pending members.\n   * - Unblock blocked members.\n   * @param - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.\n   */\n  (filter: any): Promise<BulkApproveMembersResponse>;\n}\n\nexport function bulkBlockMembers(\n  httpClient: HttpClient\n): BulkBlockMembersSignature {\n  return (filter: any) =>\n    universalBulkBlockMembers(\n      filter,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface BulkBlockMembersSignature {\n  /**\n   * Blocks multiple members by a specified filter.\n   *\n   * Blocked members can't log in to members-only pages.\n   *\n   * To unblock multiple members, call Bulk Approve Members.\n   * @param - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.\n   */\n  (filter: any): Promise<BulkBlockMembersResponse>;\n}\n\nexport function createMember(httpClient: HttpClient): CreateMemberSignature {\n  return (options?: CreateMemberOptions) =>\n    universalCreateMember(\n      options,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface CreateMemberSignature {\n  /**\n   * Creates a site member.\n   *\n   * After creation, you can call\n   * [Send Set Password Email ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/authentication/send-set-password-email) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/member-authentication/send-set-password-email))\n   * to email the member with a link to set their password.\n   * The member can log in to the site\n   * when they set their password for the first time.\n   *\n   * > **Note:**\n   * > When creating multiple members,\n   * > set your requests at least 1 second apart to keep below rate limits.\n   * @returns New member.\n   */\n  (options?: CreateMemberOptions | undefined): Promise<Member>;\n}\n\nexport function updateMember(httpClient: HttpClient): UpdateMemberSignature {\n  return (_id: string, member: UpdateMember) =>\n    universalUpdateMember(\n      _id,\n      member,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface UpdateMemberSignature {\n  /**\n   * Updates a member's properties.\n   *\n   * Only the requested fields are updated.\n   * To clear a field's value, set an empty value with an empty string `\"\"`.\n   *\n   * > **Note:**\n   * > Updating the `contact.addresses`, `contact.emails`, or `contact.phones` array overwrites the entire array, so any existing values you want to retain must be passed in the `updateMember()` call along with the new values to add.\n   * > However, passing an empty array will have no effect, and these methods must be used to clear all data from the respective array:\n   * >- To clear `contact.addresses`, use `deleteMemberAddresses()`.\n   * >- To clear `contact.emails`, use `deleteMemberEmails()`.\n   * >- To clear `contact.phones`, use `deleteMemberPhones()`.\n   *\n   * > **Note:**\n   * > Only logged-in members can call this method without elevated permissions.\n   * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n   * @param - Member ID.\n   * @param - Member to update.\n   * @returns Updated member.\n   */\n  (_id: string, member: UpdateMember): Promise<Member>;\n}\n\nexport function deleteMemberPhones(\n  httpClient: HttpClient\n): DeleteMemberPhonesSignature {\n  return (_id: string) =>\n    universalDeleteMemberPhones(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteMemberPhonesSignature {\n  /**\n   * Clears a member's phone numbers.\n   *\n   * `deleteMemberPhones()` clears the `phones` array under the `contact` property.\n   *\n   * > **Note:**\n   * > Only logged-in members can call this method without elevated permissions.\n   * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n   * @param - ID of the member whose phone numbers will be deleted.\n   */\n  (_id: string): Promise<DeleteMemberPhonesResponse>;\n}\n\nexport function deleteMemberEmails(\n  httpClient: HttpClient\n): DeleteMemberEmailsSignature {\n  return (_id: string) =>\n    universalDeleteMemberEmails(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteMemberEmailsSignature {\n  /**\n   * Clears a member's email addresses.\n   *\n   * `deleteMemberEmails()` clears the `emails` array under the `contact` property.\n   *\n   * > **Notes:**\n   * > A member can still log in with their `loginEmail`,\n   * > which is not cleared when this method is called.\n   *\n   * > Only logged-in members can call this method without elevated permissions.\n   * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n   * @param - ID of the member whose email addresses will be deleted.\n   */\n  (_id: string): Promise<DeleteMemberEmailsResponse>;\n}\n\nexport function deleteMemberAddresses(\n  httpClient: HttpClient\n): DeleteMemberAddressesSignature {\n  return (_id: string) =>\n    universalDeleteMemberAddresses(\n      _id,\n      // @ts-ignore\n      { httpClient }\n    );\n}\n\ninterface DeleteMemberAddressesSignature {\n  /**\n   * Deletes a member's street addresses.\n   *\n   * `deleteMemberAddresses()` clears the `addresses` array under the `contact` property.\n   *\n   * > **Note:**\n   * > Only logged-in members can call this method without elevated permissions.\n   * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n   * @param - ID of the member whose street addresses will be deleted.\n   */\n  (_id: string): Promise<DeleteMemberAddressesResponse>;\n}\n\nexport const onMemberCreated = EventDefinition(\n  'wix.members.v1.member_created',\n  true,\n  (event: MemberCreatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'entity.lastLoginDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<MemberCreatedEnvelope>();\nexport const onMemberDeleted = EventDefinition(\n  'wix.members.v1.member_deleted',\n  true,\n  (event: MemberDeletedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'undefined.createdDate' },\n            { path: 'undefined.updatedDate' },\n            { path: 'undefined.lastLoginDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<MemberDeletedEnvelope>();\nexport const onMemberUpdated = EventDefinition(\n  'wix.members.v1.member_updated',\n  true,\n  (event: MemberUpdatedEnvelope) =>\n    renameKeysFromRESTResponseToSDKResponse(\n      transformPaths(event, [\n        {\n          transformFn: transformRESTTimestampToSDKTimestamp,\n          paths: [\n            { path: 'entity.createdDate' },\n            { path: 'entity.updatedDate' },\n            { path: 'entity.lastLoginDate' },\n            { path: 'metadata.eventTime' },\n          ],\n        },\n      ])\n    )\n)<MemberUpdatedEnvelope>();\n\nexport {\n  ActionEvent,\n  ActiveSubscriptionMemberBlockForbiddenPayload,\n  ActiveSubscriptionMemberDeleteForbiddenPayload,\n  ActivityStatusStatus,\n  Address,\n  AddressStreetOneOf,\n  App,\n  ApplicationError,\n  ApproveMemberRequest,\n  ApproveMemberResponse,\n  Asset,\n  BaseEventMetadata,\n  BlockMemberRequest,\n  BlockMemberResponse,\n  BulkActionMetadata,\n  BulkApproveMembersRequest,\n  BulkApproveMembersResponse,\n  BulkBlockMembersRequest,\n  BulkBlockMembersResponse,\n  BulkDeleteMembersByFilterOptions,\n  BulkDeleteMembersByFilterRequest,\n  BulkDeleteMembersByFilterResponse,\n  BulkDeleteMembersRequest,\n  BulkDeleteMembersResponse,\n  BulkMemberResult,\n  Contact,\n  ContentDeletionRequested,\n  ContentReassignmentRequested,\n  CreateMemberOptions,\n  CreateMemberRequest,\n  CreateMemberResponse,\n  CursorPaging,\n  CursorPagingMetadata,\n  Cursors,\n  CustomField,\n  DeleteContext,\n  DeleteMemberAddressesRequest,\n  DeleteMemberAddressesResponse,\n  DeleteMemberEmailsRequest,\n  DeleteMemberEmailsResponse,\n  DeleteMemberPhonesRequest,\n  DeleteMemberPhonesResponse,\n  DeleteMemberRequest,\n  DeleteMemberResponse,\n  DeleteMyMemberOptions,\n  DeleteMyMemberRequest,\n  DeleteMyMemberResponse,\n  DeleteStatus,\n  DisconnectMemberRequest,\n  DisconnectMemberResponse,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  Empty,\n  EntityCreatedEvent,\n  EntityDeletedEvent,\n  EntityUpdatedEvent,\n  EventMetadata,\n  ExtendedFields,\n  File,\n  GetCurrentMemberOptions,\n  GetMemberOptions,\n  GetMemberRequest,\n  GetMemberResponse,\n  GetMyMemberRequest,\n  GetMyMemberResponse,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  Image,\n  InvalidCustomFieldUrlPayload,\n  InvalidateCache,\n  InvalidateCacheGetByOneOf,\n  ItemMetadata,\n  JoinCommunityRequest,\n  JoinCommunityResponse,\n  LeaveCommunityRequest,\n  LeaveCommunityResponse,\n  ListMembersOptions,\n  ListMembersRequest,\n  ListMembersResponse,\n  Member,\n  MemberApproved,\n  MemberBlocked,\n  MemberCreatedEnvelope,\n  MemberDeletedEnvelope,\n  MemberIdChanged,\n  MemberJoinedCommunity,\n  MemberLeftCommunity,\n  MemberMuted,\n  MemberOwnershipTransferred,\n  MemberSelfBlockForbiddenPayload,\n  MemberToMemberBlockedPayload,\n  MemberUnmuted,\n  MemberUpdatedEnvelope,\n  MembersQueryBuilder,\n  MembersQueryResult,\n  MessageEnvelope,\n  MetaSiteSpecialEvent,\n  MetaSiteSpecialEventPayloadOneOf,\n  MuteMemberRequest,\n  MuteMemberResponse,\n  Namespace,\n  NamespaceChanged,\n  OwnerMemberBlockForbiddenPayload,\n  OwnerOrContributorDeleteForbiddenPayload,\n  Page,\n  Paging,\n  PagingMetadata,\n  PrivacyStatusStatus,\n  Profile,\n  Query,\n  QueryMembersOptions,\n  QueryMembersRequest,\n  QueryMembersResponse,\n  RestoreInfo,\n  Search,\n  ServiceProvisioned,\n  ServiceRemoved,\n  Set,\n  SiteCreated,\n  SiteCreatedContext,\n  SiteDeleted,\n  SiteHardDeleted,\n  SiteMarkedAsTemplate,\n  SiteMarkedAsWixSite,\n  SitePublished,\n  SitePurgedExternally,\n  SiteRenamed,\n  SiteTransferred,\n  SiteUndeleted,\n  SiteUnpublished,\n  SiteUrlChanged,\n  SlugAlreadyExistsPayload,\n  SortOrder,\n  Sorting,\n  State,\n  Status,\n  StreetAddress,\n  StudioAssigned,\n  StudioUnassigned,\n  URI,\n  UnmuteMemberRequest,\n  UnmuteMemberResponse,\n  UpdateMember,\n  UpdateMemberRequest,\n  UpdateMemberResponse,\n  UpdateMemberSlugRequest,\n  UpdateMemberSlugResponse,\n  UpdateMySlugRequest,\n  UpdateMySlugResponse,\n  WebhookIdentityType,\n} from './members-v1-member-members.universal.js';\n","import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';\nimport { queryBuilder } from '@wix/sdk-runtime/query-builder';\nimport {\n  renameKeysFromSDKRequestToRESTRequest,\n  renameKeysFromRESTResponseToSDKResponse,\n} from '@wix/sdk-runtime/rename-all-nested-keys';\nimport { HttpClient, HttpResponse, NonNullablePaths } from '@wix/sdk-types';\nimport * as ambassadorWixMembersV1Member from './members-v1-member-members.http.js';\n// @ts-ignore\n\nexport interface Member {\n  /**\n   * Member ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Email used by a member to log in to the site.\n   * @format EMAIL\n   */\n  loginEmail?: string | null;\n  /**\n   * Whether the email used by a member has been verified.\n   * @readonly\n   */\n  loginEmailVerified?: boolean | null;\n  /**\n   * Member site access status.\n   * @readonly\n   */\n  status?: Status;\n  /**\n   * Contact ID.\n   * @format GUID\n   * @readonly\n   */\n  contactId?: string | null;\n  /**\n   * Member's contact information. Contact information is stored in the\n   * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).\n   *\n   * The full set of contact data can be accessed and managed with the\n   * Contacts API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/crm/contacts/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/introduction)).\n   */\n  contact?: Contact;\n  /** Profile display details. */\n  profile?: Profile;\n  /** Member privacy status. */\n  privacyStatus?: PrivacyStatusStatus;\n  /**\n   * Member activity status.\n   * @readonly\n   */\n  activityStatus?: ActivityStatusStatus;\n  /**\n   * Date and time when the member was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time when the member was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Date and time when the member last logged in to the site.\n   * @readonly\n   */\n  lastLoginDate?: Date | null;\n}\n\nexport enum Status {\n  /** Insufficient permissions to get the status. */\n  UNKNOWN = 'UNKNOWN',\n  /** Member is created and is waiting for approval by a Wix user. */\n  PENDING = 'PENDING',\n  /** Member can log in to the site. */\n  APPROVED = 'APPROVED',\n  /** Member is blocked and can't log in to the site. */\n  BLOCKED = 'BLOCKED',\n  /** Member is a [guest author](https://support.wix.com/en/article/wix-blog-adding-managed-writers-to-your-blog) for the site blog and can't log in to the site. */\n  OFFLINE = 'OFFLINE',\n}\n\n/** Contact info associated with the member. */\nexport interface Contact {\n  /** Contact's first name. */\n  firstName?: string | null;\n  /** Contact's last name. */\n  lastName?: string | null;\n  /** List of phone numbers. */\n  phones?: string[] | null;\n  /**\n   * List of email addresses.\n   * @format EMAIL\n   */\n  emails?: string[] | null;\n  /** List of street addresses. */\n  addresses?: Address[];\n  /**\n   * Contact's birthdate, formatted as `\"YYYY-MM-DD\"`.\n   *\n   * Example: `\"2020-03-15\"` for March 15, 2020.\n   * @maxLength 100\n   */\n  birthdate?: string | null;\n  /**\n   * Contact's company name.\n   * @maxLength 100\n   */\n  company?: string | null;\n  /**\n   * Contact's job title.\n   * @maxLength 100\n   */\n  jobTitle?: string | null;\n  /**\n   * Custom fields are structured as key:value pairs where each key is the field `name`, and each value is the field's `value` for the member.\n   *\n   * > **Notes:**\n   * > - Only custom fields added to the member profile in the dashboard are available through the Members API. Empty fields are not returned.\n   * > - When updating a member, `name` is ignored.\n   */\n  customFields?: Record<string, CustomField>;\n}\n\n/** Street address. */\nexport interface Address extends AddressStreetOneOf {\n  /** Street address object, with number and name in separate fields. */\n  streetAddress?: StreetAddress;\n  /**\n   * Main address line, usually street and number, as free text.\n   * @maxLength 200\n   */\n  addressLine?: string | null;\n  /**\n   * Street address ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Free text providing more detailed address information,\n   * such as apartment, suite, or floor.\n   */\n  addressLine2?: string | null;\n  /** City name. */\n  city?: string | null;\n  /**\n   * Code for a subdivision (such as state, prefecture, or province) in an\n   * [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.\n   */\n  subdivision?: string | null;\n  /**\n   * 2-letter country code in an\n   * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.\n   */\n  country?: string | null;\n  /** Postal code. */\n  postalCode?: string | null;\n}\n\n/** @oneof */\nexport interface AddressStreetOneOf {\n  /** Street address object, with number and name in separate fields. */\n  streetAddress?: StreetAddress;\n  /**\n   * Main address line, usually street and number, as free text.\n   * @maxLength 200\n   */\n  addressLine?: string | null;\n}\n\nexport interface StreetAddress {\n  /**\n   * Street number.\n   * @maxLength 100\n   */\n  number?: string;\n  /**\n   * Street name.\n   * @maxLength 200\n   */\n  name?: string;\n}\n\nexport interface CustomField {\n  /** Custom field name. */\n  name?: string | null;\n  /** Custom field value. */\n  value?: any;\n}\n\n/** Member Profile */\nexport interface Profile {\n  /**\n   * Name that identifies the member to other members.\n   * Displayed on the member's profile page\n   * and interactions in the forum or blog.\n   */\n  nickname?: string | null;\n  /**\n   * Slug that determines the member's profile page URL.\n   * @readonly\n   */\n  slug?: string | null;\n  /** Member's profile photo. */\n  photo?: Image;\n  /**\n   * Member's cover photo,\n   * used as a background picture in a member's profile page.\n   *\n   * Cover positioning can be altered with `cover.offsetX` and `cover.offsetY`.\n   * When left empty, the values default to `0`.\n   */\n  cover?: Image;\n  /**\n   * Member title.\n   *\n   * Currently available through the API only.\n   */\n  title?: string | null;\n}\n\nexport interface Image {\n  /**\n   * Wix Media image ID,\n   * set when the member selects an image from Wix Media.\n   */\n  _id?: string;\n  /** Image URL. */\n  url?: string;\n  /** Original image width. */\n  height?: number;\n  /** Original image height. */\n  width?: number;\n  /**\n   * X-axis offset.\n   *\n   * Default: `0`.\n   */\n  offsetX?: number | null;\n  /**\n   * Y-axis offset.\n   *\n   * Default: `0`.\n   */\n  offsetY?: number | null;\n}\n\nexport enum PrivacyStatusStatus {\n  /** Insufficient permissions to get the status. */\n  UNKNOWN = 'UNKNOWN',\n  /** Member is hidden from site visitors and other site members. Member is returned only to Wix users. */\n  PRIVATE = 'PRIVATE',\n  /** Member is visible to everyone. */\n  PUBLIC = 'PUBLIC',\n}\n\nexport enum ActivityStatusStatus {\n  /** Insufficient permissions to get the status. */\n  UNKNOWN = 'UNKNOWN',\n  /** Member can write forum posts and blog comments. */\n  ACTIVE = 'ACTIVE',\n  /** Member can't write forum posts or blog comments. */\n  MUTED = 'MUTED',\n}\n\nexport interface ExtendedFields {\n  /**\n   * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.\n   * The value of each key is structured according to the schema defined when the extended fields were configured.\n   *\n   * You can only access fields for which you have the appropriate permissions.\n   *\n   * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).\n   */\n  namespaces?: Record<string, Record<string, any>>;\n}\n\nexport interface InvalidateCache extends InvalidateCacheGetByOneOf {\n  /**\n   * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  siteId?: string;\n  /** Invalidate by App */\n  app?: App;\n  /** Invalidate by page id */\n  page?: Page;\n  /** Invalidate by URI path */\n  uri?: URI;\n  /** Invalidate by file (for media files such as PDFs) */\n  file?: File;\n  /**\n   * tell us why you're invalidating the cache. You don't need to add your app name\n   * @maxLength 256\n   */\n  reason?: string | null;\n  /** Is local DS */\n  localDc?: boolean;\n  hardPurge?: boolean;\n}\n\n/** @oneof */\nexport interface InvalidateCacheGetByOneOf {\n  /**\n   * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!\n   * @format GUID\n   */\n  siteId?: string;\n  /** Invalidate by App */\n  app?: App;\n  /** Invalidate by page id */\n  page?: Page;\n  /** Invalidate by URI path */\n  uri?: URI;\n  /** Invalidate by file (for media files such as PDFs) */\n  file?: File;\n}\n\nexport interface App {\n  /**\n   * The AppDefId\n   * @minLength 1\n   */\n  appDefId?: string;\n  /**\n   * The instance Id\n   * @format GUID\n   */\n  instanceId?: string;\n}\n\nexport interface Page {\n  /**\n   * the msid the page is on\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by Page ID\n   * @minLength 1\n   */\n  pageId?: string;\n}\n\nexport interface URI {\n  /**\n   * the msid the URI is on\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes\n   * @minLength 1\n   */\n  uriPath?: string;\n}\n\nexport interface File {\n  /**\n   * the msid the file is related to\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /**\n   * Invalidate by filename (for media files such as PDFs)\n   * @minLength 1\n   * @maxLength 256\n   */\n  fileName?: string;\n}\n\nexport interface UpdateMySlugRequest {\n  /**\n   * New slug.\n   * @maxLength 255\n   */\n  slug: string;\n}\n\nexport interface UpdateMySlugResponse {\n  /** Updated member. */\n  member?: Member;\n}\n\nexport interface SlugAlreadyExistsPayload {\n  slug?: string;\n}\n\nexport interface UpdateMemberSlugRequest {\n  /**\n   * Member ID.\n   * @format GUID\n   */\n  _id: string;\n  /**\n   * New slug.\n   * @maxLength 255\n   */\n  slug: string;\n}\n\nexport interface UpdateMemberSlugResponse {\n  /** Updated member. */\n  member?: Member;\n}\n\nexport interface JoinCommunityRequest {}\n\n/** Member profile. */\nexport interface JoinCommunityResponse {\n  /** The updated member. */\n  member?: Member;\n}\n\nexport interface MemberJoinedCommunity {\n  /**\n   * ID of the member who joined the community.\n   * @format GUID\n   * @readonly\n   */\n  memberId?: string;\n}\n\nexport interface LeaveCommunityRequest {}\n\n/** Member profile. */\nexport interface LeaveCommunityResponse {\n  /** The updated member. */\n  member?: Member;\n}\n\nexport interface MemberLeftCommunity {\n  /**\n   * ID of the site member who left the community.\n   * @format GUID\n   * @readonly\n   */\n  memberId?: string;\n}\n\nexport interface GetMyMemberRequest {\n  /**\n   * Predefined set of fields to return.\n   *\n   * Default: `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[];\n}\n\nexport enum Set {\n  /**\n   * Includes `id`, `contactId`, `createdDate`, `updatedDate` and the `profile` object.\n   * `status`, `privacyStatus`, and `activityStatus` are returned as `UNKNOWN`.\n   */\n  PUBLIC = 'PUBLIC',\n  /** Includes `id`, `loginEmail`, `status`, `contactId`, `createdDate`, `updatedDate`, `privacyStatus`, `activityStatus` and the `profile` object. */\n  EXTENDED = 'EXTENDED',\n  /** Includes all fields. */\n  FULL = 'FULL',\n}\n\n/** Member profile. */\nexport interface GetMyMemberResponse {\n  /** The retrieved member. */\n  member?: Member;\n}\n\nexport interface GetMemberRequest {\n  /**\n   * Member ID.\n   * @format GUID\n   */\n  _id: string;\n  /**\n   * Predefined set of fields to return.\n   *\n   * Defaults to `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[];\n}\n\nexport interface GetMemberResponse {\n  /** The requested member. */\n  member?: Member;\n}\n\nexport interface MemberToMemberBlockedPayload {\n  /**\n   * Member ID.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface ListMembersRequest {\n  paging?: Paging;\n  /**\n   * Predefined sets of fields to return.\n   *\n   * Default: `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[];\n  sorting?: Sorting[];\n}\n\nexport interface Paging {\n  /** Number of items to load. */\n  limit?: number | null;\n  /** Number of items to skip in the current sort order. */\n  offset?: number | null;\n}\n\nexport interface Sorting {\n  /**\n   * Name of the field to sort by.\n   * @maxLength 512\n   */\n  fieldName?: string;\n  /** Sort order. */\n  order?: SortOrder;\n}\n\nexport enum SortOrder {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\nexport interface CursorPaging {\n  /**\n   * Maximum number of items to return in the results.\n   * @max 100\n   */\n  limit?: number | null;\n  /**\n   * Pointer to the next or previous page in the list of results.\n   *\n   * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.\n   * Not relevant for the first request.\n   * @maxLength 16000\n   */\n  cursor?: string | null;\n}\n\nexport interface ListMembersResponse {\n  /** List of members. */\n  members?: Member[];\n  /** Metadata for the paginated results. */\n  metadata?: PagingMetadata;\n}\n\nexport interface PagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Offset that was requested. */\n  offset?: number | null;\n  /** Total number of items that match the query. */\n  total?: number | null;\n  /** Flag that indicates the server failed to calculate the `total` field. */\n  tooManyToCount?: boolean | null;\n}\n\nexport interface CursorPagingMetadata {\n  /** Number of items returned in the response. */\n  count?: number | null;\n  /** Cursor strings that point to the next page, previous page, or both. */\n  cursors?: Cursors;\n  /**\n   * Whether there are more pages to retrieve following the current page.\n   *\n   * + `true`: Another page of results can be retrieved.\n   * + `false`: This is the last page.\n   */\n  hasNext?: boolean | null;\n}\n\nexport interface Cursors {\n  /**\n   * Cursor string pointing to the next page in the list of results.\n   * @maxLength 16000\n   */\n  next?: string | null;\n  /**\n   * Cursor pointing to the previous page in the list of results.\n   * @maxLength 16000\n   */\n  prev?: string | null;\n}\n\nexport interface QueryMembersRequest {\n  /** Query options. */\n  query?: Query;\n  /**\n   * Predefined sets of fields to return.\n   *\n   * Default: `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[];\n  /** Plain text search. */\n  search?: Search;\n}\n\nexport interface Query {\n  /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */\n  filter?: any;\n  /** Limit number of results */\n  paging?: Paging;\n  /** Sort the results */\n  sorting?: Sorting[];\n}\n\n/** Free text to match in searchable fields */\nexport interface Search {\n  /**\n   * Search term or expression.\n   * @minLength 1\n   * @maxLength 100\n   */\n  expression?: string | null;\n  /**\n   * Currently supported fields for search:\n   *\n   * - `loginEmail`\n   * - `contact.firstName`\n   * - `contact.lastName`\n   * - `profile.title`\n   * - `profile.nickname`\n   * - `profile.slug`\n   *\n   * Default: `profile.nickname`.\n   * @maxSize 4\n   */\n  fields?: string[];\n}\n\nexport interface QueryMembersResponse {\n  /** List of members that met the query filter criteria. */\n  members?: Member[];\n  /** Metadata for the paginated results. */\n  metadata?: PagingMetadata;\n}\n\nexport interface MuteMemberRequest {\n  /**\n   * ID of the member to mute.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface MuteMemberResponse {\n  /** Muted member. */\n  member?: Member;\n}\n\nexport interface MemberMuted {\n  /**\n   * ID of the member who got muted.\n   * @format GUID\n   * @readonly\n   */\n  memberId?: string;\n}\n\nexport interface UnmuteMemberRequest {\n  /**\n   * ID of the member to unmute.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface UnmuteMemberResponse {\n  /** Unmuted member. */\n  member?: Member;\n}\n\nexport interface MemberUnmuted {\n  /**\n   * ID of the member who got unmuted.\n   * @format GUID\n   * @readonly\n   */\n  memberId?: string;\n}\n\nexport interface ApproveMemberRequest {\n  /**\n   * ID of the member to approve.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface ApproveMemberResponse {\n  /** Approved member. */\n  member?: Member;\n}\n\nexport interface MemberApproved {\n  /**\n   * ID of the member who got approved.\n   * @format GUID\n   * @readonly\n   */\n  memberId?: string;\n}\n\nexport interface BlockMemberRequest {\n  /**\n   * ID of a member to block.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface BlockMemberResponse {\n  /** Blocked member. */\n  member?: Member;\n}\n\nexport interface MemberBlocked {\n  /**\n   * ID of the member who got blocked.\n   * @format GUID\n   * @readonly\n   */\n  memberId?: string;\n}\n\nexport interface MemberSelfBlockForbiddenPayload {\n  /**\n   * Target's member ID.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface OwnerMemberBlockForbiddenPayload {\n  /**\n   * Owner's member ID.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface ActiveSubscriptionMemberBlockForbiddenPayload {\n  /**\n   * Active subscription member ID.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface DisconnectMemberRequest {\n  /**\n   * ID of a member to disconnect.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface DisconnectMemberResponse {\n  /** Disconnected member. */\n  member?: Member;\n}\n\nexport interface DeleteMemberRequest {\n  /**\n   * ID of a member to delete.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface DeleteMemberResponse {}\n\nexport interface ContentReassignmentRequested {\n  fromMember?: Member;\n  toMember?: Member;\n}\n\nexport interface ContentDeletionRequested {\n  member?: Member;\n}\n\nexport interface OwnerOrContributorDeleteForbiddenPayload {\n  /**\n   * Owner's or contributor's member ID.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface ActiveSubscriptionMemberDeleteForbiddenPayload {\n  /**\n   * Active subscription member ID.\n   * @format GUID\n   */\n  memberId?: string;\n}\n\nexport interface DeleteMyMemberRequest {\n  /**\n   * ID of a member receiving the deleted member's content.\n   * @format GUID\n   */\n  contentAssigneeId?: string | null;\n}\n\nexport interface DeleteMyMemberResponse {}\n\nexport interface BulkDeleteMembersRequest {\n  /**\n   * IDs of members to be deleted.\n   * @minSize 1\n   * @maxSize 100\n   * @format GUID\n   */\n  memberIds: string[];\n}\n\nexport interface BulkDeleteMembersResponse {\n  /** Result. */\n  results?: BulkMemberResult[];\n  /** Bulk action result metadata. */\n  bulkActionMetadata?: BulkActionMetadata;\n}\n\nexport interface ItemMetadata {\n  /**\n   * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).\n   * @maxLength 255\n   */\n  _id?: string | null;\n  /** Index of the item within the request array. Allows for correlation between request and response items. */\n  originalIndex?: number;\n  /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */\n  success?: boolean;\n  /** Details about the error in case of failure. */\n  error?: ApplicationError;\n}\n\nexport interface ApplicationError {\n  /** Error code. */\n  code?: string;\n  /** Description of the error. */\n  description?: string;\n  /** Data related to the error. */\n  data?: Record<string, any> | null;\n}\n\nexport interface BulkMemberResult {\n  itemMetadata?: ItemMetadata;\n}\n\nexport interface BulkActionMetadata {\n  /** Number of items that were successfully processed. */\n  totalSuccesses?: number;\n  /** Number of items that couldn't be processed. */\n  totalFailures?: number;\n  /** Number of failures without details because detailed failure threshold was exceeded. */\n  undetailedFailures?: number;\n}\n\nexport interface BulkDeleteMembersByFilterRequest {\n  /** Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details. */\n  filter: any;\n  /**\n   * ID of a member receiving the deleted member's content.\n   * @format GUID\n   */\n  contentAssigneeId?: string | null;\n  /** Plain text search. */\n  search?: Search;\n}\n\nexport interface BulkDeleteMembersByFilterResponse {\n  /**\n   * Job ID.\n   * Specify this ID when calling Get Async Job ([SDK](https://dev.wix.com/docs/sdk/backend-modules/async-jobs/get-async-job) | [REST](https://dev.wix.com/docs/rest/business-management/async-job/introduction)) to retrieve job details and metadata.\n   */\n  jobId?: string;\n}\n\nexport interface BulkApproveMembersRequest {\n  /** Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details. */\n  filter: any;\n}\n\nexport interface BulkApproveMembersResponse {\n  /**\n   * Job ID.\n   * Specify this ID when calling Get Async Job ([SDK](https://dev.wix.com/docs/sdk/backend-modules/async-jobs/get-async-job) | [REST](https://dev.wix.com/docs/rest/business-management/async-job/introduction)) to retrieve job details and metadata.\n   */\n  jobId?: string;\n}\n\nexport interface BulkBlockMembersRequest {\n  /** Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details. */\n  filter: any;\n}\n\nexport interface BulkBlockMembersResponse {\n  /**\n   * Job ID.\n   * Specify this ID when calling Get Async Job ([SDK](https://dev.wix.com/docs/sdk/backend-modules/async-jobs/get-async-job) | [REST](https://dev.wix.com/docs/rest/business-management/async-job/introduction)) to retrieve job details and metadata.\n   */\n  jobId?: string;\n}\n\nexport interface CreateMemberRequest {\n  /** Member to create. */\n  member?: Member;\n}\n\nexport interface CreateMemberResponse {\n  /** New member. */\n  member?: Member;\n}\n\nexport interface UpdateMemberRequest {\n  /** Member info to update. */\n  member?: Member;\n}\n\nexport interface UpdateMemberResponse {\n  /** Updated member. */\n  member?: Member;\n}\n\nexport interface InvalidCustomFieldUrlPayload {\n  /** Custom field key and invalid URL. */\n  fields?: Record<string, string>;\n}\n\nexport interface DeleteMemberPhonesRequest {\n  /**\n   * ID of the member whose phone numbers will be deleted.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface DeleteMemberPhonesResponse {\n  /** Updated member. */\n  member?: Member;\n}\n\nexport interface DeleteMemberEmailsRequest {\n  /**\n   * ID of the member whose email addresses will be deleted.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface DeleteMemberEmailsResponse {\n  /** Updated member. */\n  member?: Member;\n}\n\nexport interface DeleteMemberAddressesRequest {\n  /**\n   * ID of the member whose street addresses will be deleted.\n   * @format GUID\n   */\n  _id: string;\n}\n\nexport interface DeleteMemberAddressesResponse {\n  /** Updated member. */\n  member?: Member;\n}\n\nexport interface Empty {}\n\nexport interface DomainEvent extends DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n  /**\n   * Unique event ID.\n   * Allows clients to ignore duplicate webhooks.\n   */\n  _id?: string;\n  /**\n   * Assumes actions are also always typed to an entity_type\n   * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction\n   */\n  entityFqdn?: string;\n  /**\n   * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\n   * This is although the created/updated/deleted notion is duplication of the oneof types\n   * Example: created/updated/deleted/started/completed/email_opened\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number defining the order of updates to the underlying entity.\n   * For example, given that some entity was updated at 16:00 and than again at 16:01,\n   * it is guaranteed that the sequence number of the second update is strictly higher than the first.\n   * As the consumer, you can use this value to ensure that you handle messages in the correct order.\n   * To do so, you will need to persist this number on your end, and compare the sequence number from the\n   * message against the one you have stored. Given that the stored number is higher, you should ignore the message.\n   */\n  entityEventSequence?: string | null;\n}\n\n/** @oneof */\nexport interface DomainEventBodyOneOf {\n  createdEvent?: EntityCreatedEvent;\n  updatedEvent?: EntityUpdatedEvent;\n  deletedEvent?: EntityDeletedEvent;\n  actionEvent?: ActionEvent;\n}\n\nexport interface EntityCreatedEvent {\n  entity?: string;\n}\n\nexport interface RestoreInfo {\n  deletedDate?: Date | null;\n}\n\nexport interface EntityUpdatedEvent {\n  /**\n   * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.\n   * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.\n   * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.\n   */\n  currentEntity?: string;\n}\n\nexport interface EntityDeletedEvent {\n  /** Entity that was deleted */\n  deletedEntity?: string | null;\n}\n\nexport interface ActionEvent {\n  body?: string;\n}\n\nexport interface MetaSiteSpecialEvent extends MetaSiteSpecialEventPayloadOneOf {\n  /** Emitted on a meta site creation. */\n  siteCreated?: SiteCreated;\n  /** Emitted on a meta site transfer completion. */\n  siteTransferred?: SiteTransferred;\n  /** Emitted on a meta site deletion. */\n  siteDeleted?: SiteDeleted;\n  /** Emitted on a meta site restoration. */\n  siteUndeleted?: SiteUndeleted;\n  /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */\n  sitePublished?: SitePublished;\n  /** Emitted on a meta site unpublish. */\n  siteUnpublished?: SiteUnpublished;\n  /** Emitted when meta site is marked as template. */\n  siteMarkedAsTemplate?: SiteMarkedAsTemplate;\n  /** Emitted when meta site is marked as a WixSite. */\n  siteMarkedAsWixSite?: SiteMarkedAsWixSite;\n  /** Emitted when an application is provisioned (installed). */\n  serviceProvisioned?: ServiceProvisioned;\n  /** Emitted when an application is removed (uninstalled). */\n  serviceRemoved?: ServiceRemoved;\n  /** Emitted when meta site name (URL slug) is changed. */\n  siteRenamedPayload?: SiteRenamed;\n  /** Emitted when meta site was permanently deleted. */\n  hardDeleted?: SiteHardDeleted;\n  /** Emitted on a namespace change. */\n  namespaceChanged?: NamespaceChanged;\n  /** Emitted when Studio is attached. */\n  studioAssigned?: StudioAssigned;\n  /** Emitted when Studio is detached. */\n  studioUnassigned?: StudioUnassigned;\n  /**\n   * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch\n   * the actual URL.\n   *\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459\n   */\n  urlChanged?: SiteUrlChanged;\n  /** Site is marked as PurgedExternally */\n  sitePurgedExternally?: SitePurgedExternally;\n  /**\n   * A meta site id.\n   * @format GUID\n   */\n  metaSiteId?: string;\n  /** A meta site version. Monotonically increasing. */\n  version?: string;\n  /** A timestamp of the event. */\n  timestamp?: string;\n  /**\n   * TODO(meta-site): Change validation once validations are disabled for consumers\n   * More context: https://wix.slack.com/archives/C0UHEBPFT/p1720957844413149 and https://wix.slack.com/archives/CFWKX325T/p1728892152855659\n   * @maxSize 4000\n   */\n  assets?: Asset[];\n}\n\n/** @oneof */\nexport interface MetaSiteSpecialEventPayloadOneOf {\n  /** Emitted on a meta site creation. */\n  siteCreated?: SiteCreated;\n  /** Emitted on a meta site transfer completion. */\n  siteTransferred?: SiteTransferred;\n  /** Emitted on a meta site deletion. */\n  siteDeleted?: SiteDeleted;\n  /** Emitted on a meta site restoration. */\n  siteUndeleted?: SiteUndeleted;\n  /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */\n  sitePublished?: SitePublished;\n  /** Emitted on a meta site unpublish. */\n  siteUnpublished?: SiteUnpublished;\n  /** Emitted when meta site is marked as template. */\n  siteMarkedAsTemplate?: SiteMarkedAsTemplate;\n  /** Emitted when meta site is marked as a WixSite. */\n  siteMarkedAsWixSite?: SiteMarkedAsWixSite;\n  /** Emitted when an application is provisioned (installed). */\n  serviceProvisioned?: ServiceProvisioned;\n  /** Emitted when an application is removed (uninstalled). */\n  serviceRemoved?: ServiceRemoved;\n  /** Emitted when meta site name (URL slug) is changed. */\n  siteRenamedPayload?: SiteRenamed;\n  /** Emitted when meta site was permanently deleted. */\n  hardDeleted?: SiteHardDeleted;\n  /** Emitted on a namespace change. */\n  namespaceChanged?: NamespaceChanged;\n  /** Emitted when Studio is attached. */\n  studioAssigned?: StudioAssigned;\n  /** Emitted when Studio is detached. */\n  studioUnassigned?: StudioUnassigned;\n  /**\n   * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch\n   * the actual URL.\n   *\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT\n   * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459\n   */\n  urlChanged?: SiteUrlChanged;\n  /** Site is marked as PurgedExternally */\n  sitePurgedExternally?: SitePurgedExternally;\n}\n\nexport interface Asset {\n  /**\n   * An application definition id (app_id in dev-center). For legacy reasons may be UUID or a string (from Java Enum).\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * An instance id. For legacy reasons may be UUID or a string.\n   * @maxLength 200\n   */\n  instanceId?: string;\n  /** An application state. */\n  state?: State;\n}\n\nexport enum State {\n  UNKNOWN = 'UNKNOWN',\n  ENABLED = 'ENABLED',\n  DISABLED = 'DISABLED',\n  PENDING = 'PENDING',\n  DEMO = 'DEMO',\n}\n\nexport interface SiteCreated {\n  /**\n   * A template identifier (empty if not created from a template).\n   * @maxLength 36\n   */\n  originTemplateId?: string;\n  /**\n   * An account id of the owner.\n   * @format GUID\n   */\n  ownerId?: string;\n  /** A context in which meta site was created. */\n  context?: SiteCreatedContext;\n  /**\n   * A meta site id from which this site was created.\n   *\n   * In case of a creation from a template it's a template id.\n   * In case of a site duplication (\"Save As\" in dashboard or duplicate in UM) it's an id of a source site.\n   * @format GUID\n   */\n  originMetaSiteId?: string | null;\n  /**\n   * A meta site name (URL slug).\n   * @maxLength 20\n   */\n  siteName?: string;\n  /** A namespace. */\n  namespace?: Namespace;\n}\n\nexport enum SiteCreatedContext {\n  /** A valid option, we don't expose all reasons why site might be created. */\n  OTHER = 'OTHER',\n  /** A meta site was created from template. */\n  FROM_TEMPLATE = 'FROM_TEMPLATE',\n  /** A meta site was created by copying of the transfferred meta site. */\n  DUPLICATE_BY_SITE_TRANSFER = 'DUPLICATE_BY_SITE_TRANSFER',\n  /** A copy of existing meta site. */\n  DUPLICATE = 'DUPLICATE',\n  /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */\n  OLD_SITE_TRANSFER = 'OLD_SITE_TRANSFER',\n  /** deprecated A meta site was created for Flash editor. */\n  FLASH = 'FLASH',\n}\n\nexport enum Namespace {\n  UNKNOWN_NAMESPACE = 'UNKNOWN_NAMESPACE',\n  /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */\n  WIX = 'WIX',\n  /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  SHOUT_OUT = 'SHOUT_OUT',\n  /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  ALBUMS = 'ALBUMS',\n  /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  WIX_STORES_TEST_DRIVE = 'WIX_STORES_TEST_DRIVE',\n  /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  HOTELS = 'HOTELS',\n  /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  CLUBS = 'CLUBS',\n  /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  ONBOARDING_DRAFT = 'ONBOARDING_DRAFT',\n  /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  DEV_SITE = 'DEV_SITE',\n  /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  LOGOS = 'LOGOS',\n  /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  VIDEO_MAKER = 'VIDEO_MAKER',\n  /** MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  PARTNER_DASHBOARD = 'PARTNER_DASHBOARD',\n  /** MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  DEV_CENTER_COMPANY = 'DEV_CENTER_COMPANY',\n  /**\n   * A draft created by HTML editor on open. Upon \"first save\" it will be moved to be of WIX domain.\n   *\n   * Meta site with this namespace will *not* be shown in a user's site list by default.\n   */\n  HTML_DRAFT = 'HTML_DRAFT',\n  /**\n   * the user-journey for Fitness users who want to start from managing their business instead of designing their website.\n   * Will be accessible from Site List and will not have a website app.\n   * Once the user attaches a site, the site will become a regular wixsite.\n   */\n  SITELESS_BUSINESS = 'SITELESS_BUSINESS',\n  /** Belongs to \"strategic products\" company. Supports new product in the creator's economy space. */\n  CREATOR_ECONOMY = 'CREATOR_ECONOMY',\n  /** It is to be used in the Business First efforts. */\n  DASHBOARD_FIRST = 'DASHBOARD_FIRST',\n  /** Bookings business flow with no site. */\n  ANYWHERE = 'ANYWHERE',\n  /** Namespace for Headless Backoffice with no editor */\n  HEADLESS = 'HEADLESS',\n  /**\n   * Namespace for master site that will exist in parent account that will be referenced by subaccounts\n   * The site will be used for account level CSM feature for enterprise\n   */\n  ACCOUNT_MASTER_CMS = 'ACCOUNT_MASTER_CMS',\n  /** Rise.ai Siteless account management for Gift Cards and Store Credit. */\n  RISE = 'RISE',\n  /**\n   * As part of the branded app new funnel, users now can create a meta site that will be branded app first.\n   * There's a blank site behind the scene but it's blank).\n   * The Mobile company will be the owner of this namespace.\n   */\n  BRANDED_FIRST = 'BRANDED_FIRST',\n  /** Nownia.com Siteless account management for Ai Scheduling Assistant. */\n  NOWNIA = 'NOWNIA',\n  /**\n   * UGC Templates are templates that are created by users for personal use and to sale to other users.\n   * The Partners company owns this namespace.\n   */\n  UGC_TEMPLATE = 'UGC_TEMPLATE',\n  /** Codux Headless Sites */\n  CODUX = 'CODUX',\n  /** Bobb - AI Design Creator. */\n  MEDIA_DESIGN_CREATOR = 'MEDIA_DESIGN_CREATOR',\n  /**\n   * Shared Blog Site is a unique single site across Enterprise account,\n   * This site will hold all Blog posts related to the Marketing product.\n   */\n  SHARED_BLOG_ENTERPRISE = 'SHARED_BLOG_ENTERPRISE',\n  /** Standalone forms (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  STANDALONE_FORMS = 'STANDALONE_FORMS',\n  /** Standalone events (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */\n  STANDALONE_EVENTS = 'STANDALONE_EVENTS',\n  /** MIMIR - Siteless account for MIMIR Ai Job runner. */\n  MIMIR = 'MIMIR',\n}\n\n/** Site transferred to another user. */\nexport interface SiteTransferred {\n  /**\n   * A previous owner id (user that transfers meta site).\n   * @format GUID\n   */\n  oldOwnerId?: string;\n  /**\n   * A new owner id (user that accepts meta site).\n   * @format GUID\n   */\n  newOwnerId?: string;\n}\n\n/** Soft deletion of the meta site. Could be restored. */\nexport interface SiteDeleted {\n  /** A deletion context. */\n  deleteContext?: DeleteContext;\n}\n\nexport interface DeleteContext {\n  /** When the meta site was deleted. */\n  dateDeleted?: Date | null;\n  /** A status. */\n  deleteStatus?: DeleteStatus;\n  /**\n   * A reason (flow).\n   * @maxLength 255\n   */\n  deleteOrigin?: string;\n  /**\n   * A service that deleted it.\n   * @maxLength 255\n   */\n  initiatorId?: string | null;\n}\n\nexport enum DeleteStatus {\n  UNKNOWN = 'UNKNOWN',\n  TRASH = 'TRASH',\n  DELETED = 'DELETED',\n  PENDING_PURGE = 'PENDING_PURGE',\n  PURGED_EXTERNALLY = 'PURGED_EXTERNALLY',\n}\n\n/** Restoration of the meta site. */\nexport interface SiteUndeleted {}\n\n/** First publish of a meta site. Or subsequent publish after unpublish. */\nexport interface SitePublished {}\n\nexport interface SiteUnpublished {\n  /**\n   * A list of URLs previously associated with the meta site.\n   * @maxLength 4000\n   * @maxSize 10000\n   */\n  urls?: string[];\n}\n\nexport interface SiteMarkedAsTemplate {}\n\nexport interface SiteMarkedAsWixSite {}\n\n/**\n * Represents a service provisioned a site.\n *\n * Note on `origin_instance_id`:\n * There is no guarantee that you will be able to find a meta site using `origin_instance_id`.\n * This is because of the following scenario:\n *\n * Imagine you have a template where a third-party application (TPA) includes some stub data,\n * such as a product catalog. When you create a site from this template, you inherit this\n * default product catalog. However, if the template's product catalog is modified,\n * your site will retain the catalog as it was at the time of site creation. This ensures that\n * your site remains consistent with what you initially received and does not include any\n * changes made to the original template afterward.\n * To ensure this, the TPA on the template gets a new instance_id.\n */\nexport interface ServiceProvisioned {\n  /**\n   * Either UUID or EmbeddedServiceType.\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * Not only UUID. Something here could be something weird.\n   * @maxLength 36\n   */\n  instanceId?: string;\n  /**\n   * An instance id from which this instance is originated.\n   * @maxLength 36\n   */\n  originInstanceId?: string;\n  /**\n   * A version.\n   * @maxLength 500\n   */\n  version?: string | null;\n  /**\n   * The origin meta site id\n   * @format GUID\n   */\n  originMetaSiteId?: string | null;\n}\n\nexport interface ServiceRemoved {\n  /**\n   * Either UUID or EmbeddedServiceType.\n   * @maxLength 36\n   */\n  appDefId?: string;\n  /**\n   * Not only UUID. Something here could be something weird.\n   * @maxLength 36\n   */\n  instanceId?: string;\n  /**\n   * A version.\n   * @maxLength 500\n   */\n  version?: string | null;\n}\n\n/** Rename of the site. Meaning, free public url has been changed as well. */\nexport interface SiteRenamed {\n  /**\n   * A new meta site name (URL slug).\n   * @maxLength 20\n   */\n  newSiteName?: string;\n  /**\n   * A previous meta site name (URL slug).\n   * @maxLength 255\n   */\n  oldSiteName?: string;\n}\n\n/**\n * Hard deletion of the meta site.\n *\n * Could not be restored. Therefore it's desirable to cleanup data.\n */\nexport interface SiteHardDeleted {\n  /** A deletion context. */\n  deleteContext?: DeleteContext;\n}\n\nexport interface NamespaceChanged {\n  /** A previous namespace. */\n  oldNamespace?: Namespace;\n  /** A new namespace. */\n  newNamespace?: Namespace;\n}\n\n/** Assigned Studio editor */\nexport interface StudioAssigned {}\n\n/** Unassigned Studio editor */\nexport interface StudioUnassigned {}\n\n/**\n * Fired in case site URLs were changed in any way: new secondary domain, published, account slug rename, site rename etc.\n *\n * This is an internal event, it's not propagated in special events, because it's non-actionable. If you need to keep up\n * with sites and its urls, you need to listen to another topic/event. Read about it:\n *\n * https://bo.wix.com/wix-docs/rest/meta-site/meta-site---urls-service\n */\nexport interface SiteUrlChanged {}\n\n/**\n * Used at the end of the deletion flow for both draft sites and when a user deletes a site.\n * Consumed by other teams to remove relevant data.\n */\nexport interface SitePurgedExternally {\n  /**\n   * @maxLength 2048\n   * @maxSize 100\n   * @deprecated\n   * @targetRemovalDate 2025-04-15\n   */\n  appDefId?: string[];\n}\n\nexport interface MemberOwnershipTransferred {\n  fromMember?: Member;\n  toMember?: Member;\n}\n\nexport interface MemberIdChanged {\n  /** @format GUID */\n  fromId?: string;\n  /** @format GUID */\n  toId?: string;\n}\n\nexport interface MessageEnvelope {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n  /** Stringify payload. */\n  data?: string;\n}\n\nexport interface IdentificationData extends IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n  /** @readonly */\n  identityType?: WebhookIdentityType;\n}\n\n/** @oneof */\nexport interface IdentificationDataIdOneOf {\n  /**\n   * ID of a site visitor that has not logged in to the site.\n   * @format GUID\n   */\n  anonymousVisitorId?: string;\n  /**\n   * ID of a site visitor that has logged in to the site.\n   * @format GUID\n   */\n  memberId?: string;\n  /**\n   * ID of a Wix user (site owner, contributor, etc.).\n   * @format GUID\n   */\n  wixUserId?: string;\n  /**\n   * ID of an app.\n   * @format GUID\n   */\n  appId?: string;\n}\n\nexport enum WebhookIdentityType {\n  UNKNOWN = 'UNKNOWN',\n  ANONYMOUS_VISITOR = 'ANONYMOUS_VISITOR',\n  MEMBER = 'MEMBER',\n  WIX_USER = 'WIX_USER',\n  APP = 'APP',\n}\n\nexport interface BaseEventMetadata {\n  /**\n   * App instance ID.\n   * @format GUID\n   */\n  instanceId?: string | null;\n  /**\n   * Event type.\n   * @maxLength 150\n   */\n  eventType?: string;\n  /** The identification type and identity data. */\n  identity?: IdentificationData;\n}\n\nexport interface EventMetadata extends BaseEventMetadata {\n  /**\n   * Unique event ID.\n   * Allows clients to ignore duplicate webhooks.\n   */\n  _id?: string;\n  /**\n   * Assumes actions are also always typed to an entity_type\n   * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction\n   */\n  entityFqdn?: string;\n  /**\n   * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)\n   * This is although the created/updated/deleted notion is duplication of the oneof types\n   * Example: created/updated/deleted/started/completed/email_opened\n   */\n  slug?: string;\n  /** ID of the entity associated with the event. */\n  entityId?: string;\n  /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */\n  eventTime?: Date | null;\n  /**\n   * Whether the event was triggered as a result of a privacy regulation application\n   * (for example, GDPR).\n   */\n  triggeredByAnonymizeRequest?: boolean | null;\n  /** If present, indicates the action that triggered the event. */\n  originatedFrom?: string | null;\n  /**\n   * A sequence number defining the order of updates to the underlying entity.\n   * For example, given that some entity was updated at 16:00 and than again at 16:01,\n   * it is guaranteed that the sequence number of the second update is strictly higher than the first.\n   * As the consumer, you can use this value to ensure that you handle messages in the correct order.\n   * To do so, you will need to persist this number on your end, and compare the sequence number from the\n   * message against the one you have stored. Given that the stored number is higher, you should ignore the message.\n   */\n  entityEventSequence?: string | null;\n}\n\nexport interface MemberCreatedEnvelope {\n  entity: Member;\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a member is created.\n *\n * The site owner can configure the site to automatically approve members or require manual approval.\n *\n * A member who has been approved either automatically or manually has a `status` of `\"APPROVED\"`. A created member waiting for approval has a `status` of `\"PENDING\"`. A `\"PENDING\"` member can't log in to the site.\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @permissionId MEMBERS.MEMBER_READ\n * @webhook\n * @eventType wix.members.v1.member_created\n * @serviceIdentifier com.wixpress.members.api.Members\n * @slug created\n */\nexport declare function onMemberCreated(\n  handler: (event: MemberCreatedEnvelope) => void | Promise<void>\n): void;\n\nexport interface MemberDeletedEnvelope {\n  metadata: EventMetadata;\n}\n\n/**\n * Triggered when a member is deleted.\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @permissionId MEMBERS.MEMBER_READ\n * @webhook\n * @eventType wix.members.v1.member_deleted\n * @serviceIdentifier com.wixpress.members.api.Members\n * @slug deleted\n */\nexport declare function onMemberDeleted(\n  handler: (event: MemberDeletedEnvelope) => void | Promise<void>\n): void;\n\nexport interface MemberUpdatedEnvelope {\n  entity: Member;\n  metadata: EventMetadata;\n}\n\n/** @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @permissionId MEMBERS.MEMBER_READ\n * @webhook\n * @eventType wix.members.v1.member_updated\n * @serviceIdentifier com.wixpress.members.api.Members\n * @slug updated\n */\nexport declare function onMemberUpdated(\n  handler: (event: MemberUpdatedEnvelope) => void | Promise<void>\n): void;\n\ntype MemberNonNullablePaths =\n  | `status`\n  | `contact.phones`\n  | `contact.emails`\n  | `contact.addresses`\n  | `contact.addresses.${number}.streetAddress.number`\n  | `contact.addresses.${number}.streetAddress.name`\n  | `profile.photo._id`\n  | `profile.photo.url`\n  | `profile.photo.height`\n  | `profile.photo.width`\n  | `privacyStatus`\n  | `activityStatus`;\n\n/**\n * Updates the currently logged in member's slug.\n *\n * The `slug` is the end of a member's URL that refers to a specific logged-in member. For example, if a member's URL is `https://example.com/member/{my-member-slug}`, the slug is `my-member-slug`. The slug is case-sensitive and is generally derived from the member's `nickname`; otherwise, it's derived from the `loginEmail`.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n * @param slug - New slug.\n * @public\n * @requiredField slug\n * @permissionId MEMBERS.MEMBER_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.api.Members.UpdateMySlug\n */\nexport async function updateCurrentMemberSlug(\n  slug: string\n): Promise<\n  NonNullablePaths<\n    UpdateMySlugResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ slug: slug });\n\n  const reqOpts = ambassadorWixMembersV1Member.updateMySlug(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { slug: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['slug']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Updates a member's slug.\n * @param _id - Member ID.\n * @param slug - New slug.\n * @public\n * @requiredField _id\n * @requiredField slug\n * @permissionId MEMBERS.MEMBER_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.api.Members.UpdateMemberSlug\n */\nexport async function updateMemberSlug(\n  _id: string,\n  slug: string\n): Promise<\n  NonNullablePaths<\n    UpdateMemberSlugResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    slug: slug,\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.updateMemberSlug(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', slug: '$[1]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'slug']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Joins the current member to the site community and sets their profile to public.\n *\n * When a member's profile is public, they have access to the site's\n * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)\n * features, such as chat, forum, and followers,\n * and their profile is visible to other members and site visitors.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n * @public\n * @permissionId MEMBERS.MEMBER_JOIN_COMMUNITY\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @returns Member profile.\n * @fqn com.wixpress.members.api.Members.JoinCommunity\n */\nexport async function joinCommunity(): Promise<\n  NonNullablePaths<\n    JoinCommunityResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts = ambassadorWixMembersV1Member.joinCommunity(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Removes the current member from the site community and sets their profile to private.\n *\n * When a member's profile is private,\n * they do not have access to the site's\n * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)\n * features, such as chat, forum, and followers,\n * and their profile is hidden from other members and site visitors.\n *\n * > **Notes:**\n * > + If a member leaves the site's community, their content, such as forum posts and blog comments, remain publicly visible.\n *\n * > + Only logged-in members can call this method without elevated permissions.\n * > + To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n * @public\n * @permissionId MEMBERS.MEMBER_JOIN_COMMUNITY\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @returns Member profile.\n * @fqn com.wixpress.members.api.Members.LeaveCommunity\n */\nexport async function leaveCommunity(): Promise<\n  NonNullablePaths<\n    LeaveCommunityResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[0] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({});\n\n  const reqOpts = ambassadorWixMembersV1Member.leaveCommunity(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {},\n        singleArgumentUnchanged: false,\n      },\n      []\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Retrieves the current member.\n *\n * >**Note:**\n * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).\n * @public\n * @permissionId MEMBERS.MEMBER_READ\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @returns Member profile.\n * @fqn com.wixpress.members.api.Members.GetMyMember\n */\nexport async function getCurrentMember(\n  options?: GetCurrentMemberOptions\n): Promise<\n  NonNullablePaths<\n    GetMyMemberResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    fieldsets: options?.fieldsets,\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.getMyMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { fieldsets: '$[0].fieldsets' },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetCurrentMemberOptions {\n  /**\n   * Predefined set of fields to return.\n   *\n   * Default: `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[];\n}\n\n/**\n * Retrieves a member by ID.\n *\n * >**Note:** The returned Member object contains only the fields that were explicitly added to the Member object. Custom Contact fields are **not** automatically added to the Member object. They must be [added to the Member object by the site owner](https://support.wix.com/en/article/site-members-customizing-your-member-profile-fields).\n *\n * @param _id - Member ID.\n * @public\n * @requiredField _id\n * @param options - Fieldset options.\n * @permissionId MEMBERS.MEMBER_READ\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @returns The requested member.\n * @fqn com.wixpress.members.api.Members.GetMember\n */\nexport async function getMember(\n  _id: string,\n  options?: GetMemberOptions\n): Promise<NonNullablePaths<Member, MemberNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    id: _id,\n    fieldsets: options?.fieldsets,\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.getMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.member!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]', fieldsets: '$[1].fieldsets' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface GetMemberOptions {\n  /**\n   * Predefined set of fields to return.\n   *\n   * Defaults to `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[];\n}\n\n/**\n * Lists site members, given the provided paging and fieldsets.\n * @public\n * @param options - Options for paging, sorting, and specifying fields to return.\n * @permissionId MEMBERS.MEMBER_READ\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.members.api.Members.ListMembers\n */\nexport async function listMembers(\n  options?: ListMembersOptions\n): Promise<\n  NonNullablePaths<\n    ListMembersResponse,\n    {\n      [P in MemberNonNullablePaths]: `members.${number}.${P}`;\n    }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    paging: options?.paging,\n    fieldsets: options?.fieldsets,\n    sorting: options?.sorting,\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.listMembers(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          paging: '$[0].paging',\n          fieldsets: '$[0].fieldsets',\n          sorting: '$[0].sorting',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface ListMembersOptions {\n  /** Paging options. */\n  paging?: Paging;\n  /**\n   * Predefined sets of fields to return.\n   *\n   * Default: `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[];\n  /** Sorting options. */\n  sorting?: Sorting[];\n}\n\n/**\n * Retrieves a list of up to 100 members, given the specified filters, fieldsets, sorting and paging, and returns a `MembersQueryBuilder` object.\n *\n * The returned object contains the query definition which is typically used to run the query using the `find()` method.\n *\n * You can refine the query by chaining `MembersQueryBuilder` methods onto the query. `MembersQueryBuilder` methods enable you to sort, filter, and control the results that `queryMembers()` returns. The methods that are chained to `queryMembers()` are applied in the order they are called.\n *\n * `queryMembers()` runs with the following `MembersQueryBuilder` defaults that you can override:\n * - `skip`: `0`\n * - `limit`: `50`\n *\n * Currently supported fields for sorting:\n * - `profile.nickname`\n * - `contact.firstName`\n * - `contact.lastName`\n * - `createdDate`\n * - `lastLoginDate`\n *\n * The following `MembersQueryBuilder` methods are supported for the `queryMembers()` method. For a full description of the Locations object, see the returned for the `items` property in `MembersQueryResult`.\n * @public\n * @param options - Query options.\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Read Members and Contacts - all read permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.READ-MEMBERS-CONTACTS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Read Members\n * @permissionScopeId SCOPE.DC-MEMBERS.READ-MEMBERS\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @permissionScope Manage Members and Contacts - all permissions\n * @permissionScopeId SCOPE.DC-CONTACTS-MEGA.MANAGE-MEMBERS-CONTACTS\n * @permissionId MEMBERS.MEMBER_READ\n * @applicableIdentity APP\n * @applicableIdentity VISITOR\n * @fqn com.wixpress.members.api.Members.QueryMembers\n */\nexport function queryMembers(\n  options?: QueryMembersOptions\n): MembersQueryBuilder {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  return queryBuilder<\n    Member,\n    'OFFSET',\n    QueryMembersRequest,\n    QueryMembersResponse\n  >({\n    func: async (payload: QueryMembersRequest) => {\n      const reqOpts = ambassadorWixMembersV1Member.queryMembers({\n        ...payload,\n        ...(options ?? {}),\n      });\n\n      sideEffects?.onSiteCall?.();\n      try {\n        const result = await httpClient.request(reqOpts);\n        sideEffects?.onSuccess?.(result);\n        return result;\n      } catch (err) {\n        sideEffects?.onError?.(err);\n        throw err;\n      }\n    },\n    requestTransformer: (query: QueryMembersRequest['query']) => {\n      const args = [query, options] as [\n        QueryMembersRequest['query'],\n        QueryMembersOptions\n      ];\n      return renameKeysFromSDKRequestToRESTRequest({\n        ...args?.[1],\n        query: args?.[0],\n      });\n    },\n    responseTransformer: ({ data }: HttpResponse<QueryMembersResponse>) => {\n      const transformedData = renameKeysFromRESTResponseToSDKResponse(data);\n\n      return {\n        items: transformedData?.members,\n        pagingMetadata: transformedData?.metadata,\n      };\n    },\n    errorTransformer: (err: unknown) => {\n      const transformedError = sdkTransformError(err, {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { query: '$[0]' },\n        singleArgumentUnchanged: false,\n      });\n\n      throw transformedError;\n    },\n    pagingMethod: 'OFFSET',\n    transformationPaths: {},\n  });\n}\n\nexport interface QueryMembersOptions {\n  /**\n   * Predefined sets of fields to return.\n   *\n   * Default: `\"PUBLIC\"`.\n   * @maxSize 3\n   */\n  fieldsets?: Set[] | undefined;\n  /** Plain text search. */\n  search?: Search | undefined;\n}\n\ninterface QueryOffsetResult {\n  currentPage: number | undefined;\n  totalPages: number | undefined;\n  totalCount: number | undefined;\n  hasNext: () => boolean;\n  hasPrev: () => boolean;\n  length: number;\n  pageSize: number;\n}\n\nexport interface MembersQueryResult extends QueryOffsetResult {\n  items: Member[];\n  query: MembersQueryBuilder;\n  next: () => Promise<MembersQueryResult>;\n  prev: () => Promise<MembersQueryResult>;\n}\n\nexport interface MembersQueryBuilder {\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  eq: (\n    propertyName:\n      | '_id'\n      | 'loginEmail'\n      | 'contactId'\n      | 'contact.firstName'\n      | 'contact.lastName'\n      | 'profile.nickname'\n      | 'profile.slug'\n      | 'privacyStatus',\n    value: any\n  ) => MembersQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `value`.\n   * @param value - Value to compare against.\n   */\n  ne: (\n    propertyName:\n      | '_id'\n      | 'loginEmail'\n      | 'contactId'\n      | 'contact.firstName'\n      | 'contact.lastName'\n      | 'profile.nickname'\n      | 'profile.slug'\n      | 'privacyStatus',\n    value: any\n  ) => MembersQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `string`.\n   * @param string - String to compare against. Case-insensitive.\n   */\n  startsWith: (\n    propertyName:\n      | '_id'\n      | 'loginEmail'\n      | 'contactId'\n      | 'contact.firstName'\n      | 'contact.lastName'\n      | 'profile.nickname'\n      | 'profile.slug',\n    value: string\n  ) => MembersQueryBuilder;\n  /** @param propertyName - Property whose value is compared with `values`.\n   * @param values - List of values to compare against.\n   */\n  hasSome: (\n    propertyName:\n      | '_id'\n      | 'loginEmail'\n      | 'contactId'\n      | 'contact.firstName'\n      | 'contact.lastName'\n      | 'profile.nickname'\n      | 'profile.slug'\n      | 'privacyStatus',\n    value: any[]\n  ) => MembersQueryBuilder;\n  in: (\n    propertyName:\n      | '_id'\n      | 'loginEmail'\n      | 'contactId'\n      | 'contact.firstName'\n      | 'contact.lastName'\n      | 'profile.nickname'\n      | 'profile.slug'\n      | 'privacyStatus',\n    value: any\n  ) => MembersQueryBuilder;\n  exists: (\n    propertyName:\n      | '_id'\n      | 'loginEmail'\n      | 'contactId'\n      | 'contact.firstName'\n      | 'contact.lastName'\n      | 'profile.nickname'\n      | 'profile.slug'\n      | 'privacyStatus',\n    value: boolean\n  ) => MembersQueryBuilder;\n  /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */\n  limit: (limit: number) => MembersQueryBuilder;\n  /** @param skip - Number of items to skip in the query results before returning the results. */\n  skip: (skip: number) => MembersQueryBuilder;\n  find: () => Promise<MembersQueryResult>;\n}\n\n/**\n * Mutes a member.\n *\n * Muted members can't engage with a community. For example, they can't leave comments, like posts or comments, or share content.\n *\n * You can mute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).\n * @param _id - ID of the member to mute.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_MUTE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.MuteMember\n */\nexport async function muteMember(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    MuteMemberResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.muteMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Unmutes a member.\n *\n * Unmuted members can engage with the community. For example, leave comments, like posts or comments, and share content.\n *\n * You can unmute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).\n * @param _id - ID of the member to unmute.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_MUTE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.UnmuteMember\n */\nexport async function unmuteMember(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    UnmuteMemberResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.unmuteMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Changes member status to `\"APPROVED\"` and gives access to members-only pages.\n *\n * Call this API to:\n * - Approve a pending member.\n * - Unblock a blocked member.\n * @param _id - ID of the member to approve.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_APPROVE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.ApproveMember\n */\nexport async function approveMember(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    ApproveMemberResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.approveMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Blocks a member.\n *\n * A blocked member can't log in to members-only pages.\n *\n * To unblock a member, call Approve Member.\n * @param _id - ID of a member to block.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_BLOCK\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.BlockMember\n */\nexport async function blockMember(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    BlockMemberResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.blockMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Disconnects a member.\n *\n * A disconnected member can't log in to members-only pages, and the member isn't visible in the dashboard.\n *\n * >**Note:** This action is irreversible. To connect the same member again, you have to create a member with a new slug.\n * @param _id - ID of a member to disconnect.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_DISCONNECT\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.DisconnectMember\n */\nexport async function disconnectMember(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    DisconnectMemberResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.disconnectMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Deletes a member by ID.\n *\n * All content created by this member is transferred to a site owner's account. For example, if a Wix user had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n * @param _id - ID of a member to delete.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_DELETE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.DeleteMember\n */\nexport async function deleteMember(_id: string): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.deleteMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Deletes the current member.\n *\n * After calling this method, the member is logged out of the site.\n *\n * All content created by this member is transferred to another account. For example, if a Wix user had blog posts, those posts are transferred to the account specified in `contentAssignedId`, which then becomes the owner of those posts.\n *\n * >**Note:**\n * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).\n * @public\n * @permissionId MEMBERS.MEMBER_DELETE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.DeleteMyMember\n */\nexport async function deleteMyMember(\n  options?: DeleteMyMemberOptions\n): Promise<void> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    contentAssigneeId: options?.contentAssigneeId,\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.deleteMyMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          contentAssigneeId: '$[0].contentAssigneeId',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface DeleteMyMemberOptions {\n  /**\n   * ID of a member receiving the deleted member's content.\n   * @format GUID\n   */\n  contentAssigneeId?: string | null;\n}\n\n/**\n * Deletes multiple members by `memberId`.\n *\n * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n * @param memberIds - IDs of members to be deleted.\n * @public\n * @requiredField memberIds\n * @permissionId MEMBERS.MEMBER_DELETE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.BulkDeleteMembers\n */\nexport async function bulkDeleteMembers(\n  memberIds: string[]\n): Promise<\n  NonNullablePaths<\n    BulkDeleteMembersResponse,\n    | `results`\n    | `results.${number}.itemMetadata.originalIndex`\n    | `results.${number}.itemMetadata.success`\n    | `results.${number}.itemMetadata.error.code`\n    | `results.${number}.itemMetadata.error.description`\n    | `bulkActionMetadata.totalSuccesses`\n    | `bulkActionMetadata.totalFailures`\n    | `bulkActionMetadata.undetailedFailures`\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    memberIds: memberIds,\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.bulkDeleteMembers(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { memberIds: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['memberIds']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Deletes multiple members by the specified filter.\n *\n * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n * @param filter - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.\n * @public\n * @requiredField filter\n * @permissionId MEMBERS.MEMBER_DELETE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.BulkDeleteMembersByFilter\n */\nexport async function bulkDeleteMembersByFilter(\n  filter: any,\n  options?: BulkDeleteMembersByFilterOptions\n): Promise<NonNullablePaths<BulkDeleteMembersByFilterResponse, `jobId`>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    filter: filter,\n    contentAssigneeId: options?.contentAssigneeId,\n    search: options?.search,\n  });\n\n  const reqOpts =\n    ambassadorWixMembersV1Member.bulkDeleteMembersByFilter(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: {\n          filter: '$[0]',\n          contentAssigneeId: '$[1].contentAssigneeId',\n          search: '$[1].search',\n        },\n        singleArgumentUnchanged: false,\n      },\n      ['filter', 'options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface BulkDeleteMembersByFilterOptions {\n  /**\n   * ID of a member receiving the deleted member's content.\n   * @format GUID\n   */\n  contentAssigneeId?: string | null;\n  /** Plain text search. */\n  search?: Search;\n}\n\n/**\n * Changes status of multiple members to `\"APPROVED\"`, and gives access to members-only pages.\n *\n * Call this API to:\n * - Approve pending members.\n * - Unblock blocked members.\n * @param filter - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.\n * @public\n * @requiredField filter\n * @permissionId MEMBERS.MEMBER_APPROVE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.BulkApproveMembers\n */\nexport async function bulkApproveMembers(\n  filter: any\n): Promise<NonNullablePaths<BulkApproveMembersResponse, `jobId`>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ filter: filter });\n\n  const reqOpts = ambassadorWixMembersV1Member.bulkApproveMembers(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { filter: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['filter']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Blocks multiple members by a specified filter.\n *\n * Blocked members can't log in to members-only pages.\n *\n * To unblock multiple members, call Bulk Approve Members.\n * @param filter - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.\n * @public\n * @requiredField filter\n * @permissionId MEMBERS.MEMBER_BLOCK\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @applicableIdentity APP\n * @fqn com.wixpress.members.api.Members.BulkBlockMembers\n */\nexport async function bulkBlockMembers(\n  filter: any\n): Promise<NonNullablePaths<BulkBlockMembersResponse, `jobId`>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ filter: filter });\n\n  const reqOpts = ambassadorWixMembersV1Member.bulkBlockMembers(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { filter: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['filter']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Creates a site member.\n *\n * After creation, you can call\n * [Send Set Password Email ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/authentication/send-set-password-email) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/member-authentication/send-set-password-email))\n * to email the member with a link to set their password.\n * The member can log in to the site\n * when they set their password for the first time.\n *\n * > **Note:**\n * > When creating multiple members,\n * > set your requests at least 1 second apart to keep below rate limits.\n * @public\n * @permissionId MEMBERS.MEMBER_CREATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @applicableIdentity APP\n * @returns New member.\n * @fqn com.wixpress.members.api.Members.CreateMember\n */\nexport async function createMember(\n  options?: CreateMemberOptions\n): Promise<NonNullablePaths<Member, MemberNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    member: options?.member,\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.createMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.member!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { member: '$[0].member' },\n        singleArgumentUnchanged: false,\n      },\n      ['options']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface CreateMemberOptions {\n  /** Member to create. */\n  member?: Member;\n}\n\n/**\n * Updates a member's properties.\n *\n * Only the requested fields are updated.\n * To clear a field's value, set an empty value with an empty string `\"\"`.\n *\n * > **Note:**\n * > Updating the `contact.addresses`, `contact.emails`, or `contact.phones` array overwrites the entire array, so any existing values you want to retain must be passed in the `updateMember()` call along with the new values to add.\n * > However, passing an empty array will have no effect, and these methods must be used to clear all data from the respective array:\n * >- To clear `contact.addresses`, use `deleteMemberAddresses()`.\n * >- To clear `contact.emails`, use `deleteMemberEmails()`.\n * >- To clear `contact.phones`, use `deleteMemberPhones()`.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n * @param _id - Member ID.\n * @public\n * @requiredField _id\n * @requiredField member\n * @param options - Member to update.\n * @permissionId MEMBERS.MEMBER_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @returns Updated member.\n * @fqn com.wixpress.members.api.Members.UpdateMember\n */\nexport async function updateMember(\n  _id: string,\n  member: UpdateMember\n): Promise<NonNullablePaths<Member, MemberNonNullablePaths>> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[2] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({\n    member: { ...member, id: _id },\n  });\n\n  const reqOpts = ambassadorWixMembersV1Member.updateMember(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)?.member!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: { member: '$[1]' },\n        explicitPathsToArguments: { 'member.id': '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id', 'member']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\nexport interface UpdateMember {\n  /**\n   * Member ID.\n   * @format GUID\n   * @readonly\n   */\n  _id?: string | null;\n  /**\n   * Email used by a member to log in to the site.\n   * @format EMAIL\n   */\n  loginEmail?: string | null;\n  /**\n   * Whether the email used by a member has been verified.\n   * @readonly\n   */\n  loginEmailVerified?: boolean | null;\n  /**\n   * Member site access status.\n   * @readonly\n   */\n  status?: Status;\n  /**\n   * Contact ID.\n   * @format GUID\n   * @readonly\n   */\n  contactId?: string | null;\n  /**\n   * Member's contact information. Contact information is stored in the\n   * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).\n   *\n   * The full set of contact data can be accessed and managed with the\n   * Contacts API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/crm/contacts/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/introduction)).\n   */\n  contact?: Contact;\n  /** Profile display details. */\n  profile?: Profile;\n  /** Member privacy status. */\n  privacyStatus?: PrivacyStatusStatus;\n  /**\n   * Member activity status.\n   * @readonly\n   */\n  activityStatus?: ActivityStatusStatus;\n  /**\n   * Date and time when the member was created.\n   * @readonly\n   */\n  _createdDate?: Date | null;\n  /**\n   * Date and time when the member was updated.\n   * @readonly\n   */\n  _updatedDate?: Date | null;\n  /**\n   * Date and time when the member last logged in to the site.\n   * @readonly\n   */\n  lastLoginDate?: Date | null;\n}\n\n/**\n * Clears a member's phone numbers.\n *\n * `deleteMemberPhones()` clears the `phones` array under the `contact` property.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n * @param _id - ID of the member whose phone numbers will be deleted.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.api.Members.DeleteMemberPhones\n */\nexport async function deleteMemberPhones(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    DeleteMemberPhonesResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.deleteMemberPhones(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Clears a member's email addresses.\n *\n * `deleteMemberEmails()` clears the `emails` array under the `contact` property.\n *\n * > **Notes:**\n * > A member can still log in with their `loginEmail`,\n * > which is not cleared when this method is called.\n *\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n * @param _id - ID of the member whose email addresses will be deleted.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.api.Members.DeleteMemberEmails\n */\nexport async function deleteMemberEmails(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    DeleteMemberEmailsResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.deleteMemberEmails(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n\n/**\n * Deletes a member's street addresses.\n *\n * `deleteMemberAddresses()` clears the `addresses` array under the `contact` property.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n * @param _id - ID of the member whose street addresses will be deleted.\n * @public\n * @requiredField _id\n * @permissionId MEMBERS.MEMBER_UPDATE\n * @permissionScope Manage Members\n * @permissionScopeId SCOPE.DC-MEMBERS.MANAGE-MEMBERS\n * @permissionScope Manage Bookings Services and Settings\n * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION\n * @permissionScope Manage Events\n * @permissionScopeId SCOPE.EVENTS.MANAGE-EVENTS\n * @permissionScope Manage Challenges\n * @permissionScopeId SCOPE.CHALLENGES.MANAGE\n * @permissionScope Manage Portfolio\n * @permissionScopeId SCOPE.PORTFOLIO.MANAGE-PORTFOLIO\n * @permissionScope Access Verticals by Automations\n * @permissionScopeId SCOPE.CRM.ACCESS-VERTICALS-BY-AUTOMATIONS\n * @permissionScope Manage Restaurants - all permissions\n * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES\n * @permissionScope Set Up Automations\n * @permissionScopeId SCOPE.CRM.SETUP-AUTOMATIONS\n * @applicableIdentity APP\n * @applicableIdentity MEMBER\n * @fqn com.wixpress.members.api.Members.DeleteMemberAddresses\n */\nexport async function deleteMemberAddresses(\n  _id: string\n): Promise<\n  NonNullablePaths<\n    DeleteMemberAddressesResponse,\n    { [P in MemberNonNullablePaths]: `member.${P}` }[MemberNonNullablePaths]\n  >\n> {\n  // @ts-ignore\n  const { httpClient, sideEffects } = arguments[1] as {\n    httpClient: HttpClient;\n    sideEffects?: any;\n  };\n\n  const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });\n\n  const reqOpts = ambassadorWixMembersV1Member.deleteMemberAddresses(payload);\n\n  sideEffects?.onSiteCall?.();\n  try {\n    const result = await httpClient.request(reqOpts);\n    sideEffects?.onSuccess?.(result);\n\n    return renameKeysFromRESTResponseToSDKResponse(result.data)!;\n  } catch (err: any) {\n    const transformedError = sdkTransformError(\n      err,\n      {\n        spreadPathsToArguments: {},\n        explicitPathsToArguments: { id: '$[0]' },\n        singleArgumentUnchanged: false,\n      },\n      ['_id']\n    );\n    sideEffects?.onError?.(err);\n\n    throw transformedError;\n  }\n}\n","import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';\nimport { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';\nimport { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';\nimport { resolveUrl } from '@wix/sdk-runtime/rest-modules';\nimport { ResolveUrlOpts } from '@wix/sdk-runtime/rest-modules';\nimport { RequestOptionsFactory } from '@wix/sdk-types';\n\nfunction resolveComWixpressMembersApiMembersUrl(\n  opts: Omit<ResolveUrlOpts, 'domainToMappings'>\n) {\n  const domainToMappings = {\n    'www.wixapis.com': [\n      {\n        srcPath: '/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'api._api_base_domain_': [\n      {\n        srcPath: '/members-ng-api',\n        destPath: '',\n      },\n    ],\n    'www._base_domain_': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'manage._base_domain_': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'editor._base_domain_': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'blocks._base_domain_': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'create.editorx': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'editor.wixapps.net': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    '*.dev.wix-code.com': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'bo._base_domain_': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'wixbo.ai': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'wix-bo.com': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    _: [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n    'members.wixapps.net': [\n      {\n        srcPath: '/_api/members/v1/members',\n        destPath: '/v1/members',\n      },\n    ],\n  };\n\n  return resolveUrl(Object.assign(opts, { domainToMappings }));\n}\n\nconst PACKAGE_NAME = '@wix/auto_sdk_members_members';\n\n/**\n * Updates the currently logged in member's slug.\n *\n * The `slug` is the end of a member's URL that refers to a specific logged-in member. For example, if a member's URL is `https://example.com/member/{my-member-slug}`, the slug is `my-member-slug`. The slug is case-sensitive and is generally derived from the member's `nickname`; otherwise, it's derived from the `loginEmail`.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n */\nexport function updateMySlug(payload: object): RequestOptionsFactory<any> {\n  function __updateMySlug({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.UpdateMySlug',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/my/slug',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateMySlug;\n}\n\n/** Updates a member's slug. */\nexport function updateMemberSlug(payload: object): RequestOptionsFactory<any> {\n  function __updateMemberSlug({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.UpdateMemberSlug',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/slug',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateMemberSlug;\n}\n\n/**\n * Joins the current member to the site community and sets their profile to public.\n *\n * When a member's profile is public, they have access to the site's\n * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)\n * features, such as chat, forum, and followers,\n * and their profile is visible to other members and site visitors.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n */\nexport function joinCommunity(payload: object): RequestOptionsFactory<any> {\n  function __joinCommunity({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.JoinCommunity',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/join-community',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __joinCommunity;\n}\n\n/**\n * Removes the current member from the site community and sets their profile to private.\n *\n * When a member's profile is private,\n * they do not have access to the site's\n * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)\n * features, such as chat, forum, and followers,\n * and their profile is hidden from other members and site visitors.\n *\n * > **Notes:**\n * > + If a member leaves the site's community, their content, such as forum posts and blog comments, remain publicly visible.\n *\n * > + Only logged-in members can call this method without elevated permissions.\n * > + To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n */\nexport function leaveCommunity(payload: object): RequestOptionsFactory<any> {\n  function __leaveCommunity({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.LeaveCommunity',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/leave-community',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __leaveCommunity;\n}\n\n/**\n * Retrieves the current member.\n *\n * >**Note:**\n * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).\n */\nexport function getMyMember(payload: object): RequestOptionsFactory<any> {\n  function __getMyMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.members.api.Members.GetMyMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/my',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getMyMember;\n}\n\n/**\n * Retrieves a member by ID.\n *\n * >**Note:** The returned Member object contains only the fields that were explicitly added to the Member object. Custom Contact fields are **not** automatically added to the Member object. They must be [added to the Member object by the site owner](https://support.wix.com/en/article/site-members-customizing-your-member-profile-fields).\n *\n */\nexport function getMember(payload: object): RequestOptionsFactory<any> {\n  function __getMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.members.api.Members.GetMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __getMember;\n}\n\n/** Lists site members, given the provided paging and fieldsets. */\nexport function listMembers(payload: object): RequestOptionsFactory<any> {\n  function __listMembers({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'GET' as any,\n      methodFqn: 'com.wixpress.members.api.Members.ListMembers',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload, true),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'members.createdDate' },\n              { path: 'members.updatedDate' },\n              { path: 'members.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __listMembers;\n}\n\n/**\n * Retrieves a list of up to 100 members, given the specified filters, fieldsets, sorting and paging, and returns a `MembersQueryBuilder` object.\n *\n * The returned object contains the query definition which is typically used to run the query using the `find()` method.\n *\n * You can refine the query by chaining `MembersQueryBuilder` methods onto the query. `MembersQueryBuilder` methods enable you to sort, filter, and control the results that `queryMembers()` returns. The methods that are chained to `queryMembers()` are applied in the order they are called.\n *\n * `queryMembers()` runs with the following `MembersQueryBuilder` defaults that you can override:\n * - `skip`: `0`\n * - `limit`: `50`\n *\n * Currently supported fields for sorting:\n * - `profile.nickname`\n * - `contact.firstName`\n * - `contact.lastName`\n * - `createdDate`\n * - `lastLoginDate`\n *\n * The following `MembersQueryBuilder` methods are supported for the `queryMembers()` method. For a full description of the Locations object, see the returned for the `items` property in `MembersQueryResult`.\n */\nexport function queryMembers(payload: object): RequestOptionsFactory<any> {\n  function __queryMembers({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.QueryMembers',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/query',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'members.createdDate' },\n              { path: 'members.updatedDate' },\n              { path: 'members.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __queryMembers;\n}\n\n/**\n * Mutes a member.\n *\n * Muted members can't engage with a community. For example, they can't leave comments, like posts or comments, or share content.\n *\n * You can mute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).\n */\nexport function muteMember(payload: object): RequestOptionsFactory<any> {\n  function __muteMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.MuteMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/mute',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __muteMember;\n}\n\n/**\n * Unmutes a member.\n *\n * Unmuted members can engage with the community. For example, leave comments, like posts or comments, and share content.\n *\n * You can unmute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).\n */\nexport function unmuteMember(payload: object): RequestOptionsFactory<any> {\n  function __unmuteMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.UnmuteMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/unmute',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __unmuteMember;\n}\n\n/**\n * Changes member status to `\"APPROVED\"` and gives access to members-only pages.\n *\n * Call this API to:\n * - Approve a pending member.\n * - Unblock a blocked member.\n */\nexport function approveMember(payload: object): RequestOptionsFactory<any> {\n  function __approveMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.ApproveMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/approve',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __approveMember;\n}\n\n/**\n * Blocks a member.\n *\n * A blocked member can't log in to members-only pages.\n *\n * To unblock a member, call Approve Member.\n */\nexport function blockMember(payload: object): RequestOptionsFactory<any> {\n  function __blockMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.BlockMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/block',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __blockMember;\n}\n\n/**\n * Disconnects a member.\n *\n * A disconnected member can't log in to members-only pages, and the member isn't visible in the dashboard.\n *\n * >**Note:** This action is irreversible. To connect the same member again, you have to create a member with a new slug.\n */\nexport function disconnectMember(payload: object): RequestOptionsFactory<any> {\n  function __disconnectMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.DisconnectMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/disconnect',\n        data: payload,\n        host,\n      }),\n      data: payload,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __disconnectMember;\n}\n\n/**\n * Deletes a member by ID.\n *\n * All content created by this member is transferred to a site owner's account. For example, if a Wix user had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n */\nexport function deleteMember(payload: object): RequestOptionsFactory<any> {\n  function __deleteMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.members.api.Members.DeleteMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteMember;\n}\n\n/**\n * Deletes the current member.\n *\n * After calling this method, the member is logged out of the site.\n *\n * All content created by this member is transferred to another account. For example, if a Wix user had blog posts, those posts are transferred to the account specified in `contentAssignedId`, which then becomes the owner of those posts.\n *\n * >**Note:**\n * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).\n */\nexport function deleteMyMember(payload: object): RequestOptionsFactory<any> {\n  function __deleteMyMember({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.members.api.Members.DeleteMyMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/my',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n    };\n\n    return metadata;\n  }\n\n  return __deleteMyMember;\n}\n\n/**\n * Deletes multiple members by `memberId`.\n *\n * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n */\nexport function bulkDeleteMembers(payload: object): RequestOptionsFactory<any> {\n  function __bulkDeleteMembers({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.BulkDeleteMembers',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/bulk/delete',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __bulkDeleteMembers;\n}\n\n/**\n * Deletes multiple members by the specified filter.\n *\n * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.\n */\nexport function bulkDeleteMembersByFilter(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkDeleteMembersByFilter({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.BulkDeleteMembersByFilter',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/bulk/delete-by-filter',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __bulkDeleteMembersByFilter;\n}\n\n/**\n * Changes status of multiple members to `\"APPROVED\"`, and gives access to members-only pages.\n *\n * Call this API to:\n * - Approve pending members.\n * - Unblock blocked members.\n */\nexport function bulkApproveMembers(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __bulkApproveMembers({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.BulkApproveMembers',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/bulk/approve-by-filter',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __bulkApproveMembers;\n}\n\n/**\n * Blocks multiple members by a specified filter.\n *\n * Blocked members can't log in to members-only pages.\n *\n * To unblock multiple members, call Bulk Approve Members.\n */\nexport function bulkBlockMembers(payload: object): RequestOptionsFactory<any> {\n  function __bulkBlockMembers({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.BulkBlockMembers',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/bulk/block-by-filter',\n        data: payload,\n        host,\n      }),\n      data: payload,\n    };\n\n    return metadata;\n  }\n\n  return __bulkBlockMembers;\n}\n\n/**\n * Creates a site member.\n *\n * After creation, you can call\n * [Send Set Password Email ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/authentication/send-set-password-email) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/member-authentication/send-set-password-email))\n * to email the member with a link to set their password.\n * The member can log in to the site\n * when they set their password for the first time.\n *\n * > **Note:**\n * > When creating multiple members,\n * > set your requests at least 1 second apart to keep below rate limits.\n */\nexport function createMember(payload: object): RequestOptionsFactory<any> {\n  function __createMember({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'member.createdDate' },\n          { path: 'member.updatedDate' },\n          { path: 'member.lastLoginDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'POST' as any,\n      methodFqn: 'com.wixpress.members.api.Members.CreateMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __createMember;\n}\n\n/**\n * Updates a member's properties.\n *\n * Only the requested fields are updated.\n * To clear a field's value, set an empty value with an empty string `\"\"`.\n *\n * > **Note:**\n * > Updating the `contact.addresses`, `contact.emails`, or `contact.phones` array overwrites the entire array, so any existing values you want to retain must be passed in the `updateMember()` call along with the new values to add.\n * > However, passing an empty array will have no effect, and these methods must be used to clear all data from the respective array:\n * >- To clear `contact.addresses`, use `deleteMemberAddresses()`.\n * >- To clear `contact.emails`, use `deleteMemberEmails()`.\n * >- To clear `contact.phones`, use `deleteMemberPhones()`.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n */\nexport function updateMember(payload: object): RequestOptionsFactory<any> {\n  function __updateMember({ host }: any) {\n    const serializedData = transformPaths(payload, [\n      {\n        transformFn: transformSDKTimestampToRESTTimestamp,\n        paths: [\n          { path: 'member.createdDate' },\n          { path: 'member.updatedDate' },\n          { path: 'member.lastLoginDate' },\n        ],\n      },\n    ]);\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'PATCH' as any,\n      methodFqn: 'com.wixpress.members.api.Members.UpdateMember',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{member.id}',\n        data: serializedData,\n        host,\n      }),\n      data: serializedData,\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __updateMember;\n}\n\n/**\n * Clears a member's phone numbers.\n *\n * `deleteMemberPhones()` clears the `phones` array under the `contact` property.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n */\nexport function deleteMemberPhones(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __deleteMemberPhones({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.members.api.Members.DeleteMemberPhones',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/phones',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __deleteMemberPhones;\n}\n\n/**\n * Clears a member's email addresses.\n *\n * `deleteMemberEmails()` clears the `emails` array under the `contact` property.\n *\n * > **Notes:**\n * > A member can still log in with their `loginEmail`,\n * > which is not cleared when this method is called.\n *\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n */\nexport function deleteMemberEmails(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __deleteMemberEmails({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.members.api.Members.DeleteMemberEmails',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/emails',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __deleteMemberEmails;\n}\n\n/**\n * Deletes a member's street addresses.\n *\n * `deleteMemberAddresses()` clears the `addresses` array under the `contact` property.\n *\n * > **Note:**\n * > Only logged-in members can call this method without elevated permissions.\n * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.\n */\nexport function deleteMemberAddresses(\n  payload: object\n): RequestOptionsFactory<any> {\n  function __deleteMemberAddresses({ host }: any) {\n    const metadata = {\n      entityFqdn: 'wix.members.v1.member',\n      method: 'DELETE' as any,\n      methodFqn: 'com.wixpress.members.api.Members.DeleteMemberAddresses',\n      packageName: PACKAGE_NAME,\n      url: resolveComWixpressMembersApiMembersUrl({\n        protoPath: '/v1/members/{id}/addresses',\n        data: payload,\n        host,\n      }),\n      params: toURLSearchParams(payload),\n      transformResponse: (payload: any) =>\n        transformPaths(payload, [\n          {\n            transformFn: transformRESTTimestampToSDKTimestamp,\n            paths: [\n              { path: 'member.createdDate' },\n              { path: 'member.updatedDate' },\n              { path: 'member.lastLoginDate' },\n            ],\n          },\n        ]),\n    };\n\n    return metadata;\n  }\n\n  return __deleteMemberAddresses;\n}\n","import {\n  updateCurrentMemberSlug as publicUpdateCurrentMemberSlug,\n  updateMemberSlug as publicUpdateMemberSlug,\n  joinCommunity as publicJoinCommunity,\n  leaveCommunity as publicLeaveCommunity,\n  getCurrentMember as publicGetCurrentMember,\n  getMember as publicGetMember,\n  listMembers as publicListMembers,\n  queryMembers as publicQueryMembers,\n  muteMember as publicMuteMember,\n  unmuteMember as publicUnmuteMember,\n  approveMember as publicApproveMember,\n  blockMember as publicBlockMember,\n  disconnectMember as publicDisconnectMember,\n  deleteMember as publicDeleteMember,\n  deleteMyMember as publicDeleteMyMember,\n  bulkDeleteMembers as publicBulkDeleteMembers,\n  bulkDeleteMembersByFilter as publicBulkDeleteMembersByFilter,\n  bulkApproveMembers as publicBulkApproveMembers,\n  bulkBlockMembers as publicBulkBlockMembers,\n  createMember as publicCreateMember,\n  updateMember as publicUpdateMember,\n  deleteMemberPhones as publicDeleteMemberPhones,\n  deleteMemberEmails as publicDeleteMemberEmails,\n  deleteMemberAddresses as publicDeleteMemberAddresses,\n} from './members-v1-member-members.public.js';\nimport { createRESTModule } from '@wix/sdk-runtime/rest-modules';\nimport { createEventModule } from '@wix/sdk-runtime/event-definition-modules';\nimport { BuildRESTFunction, MaybeContext } from '@wix/sdk-types';\nimport { onMemberCreated as publicOnMemberCreated } from './members-v1-member-members.public.js';\nimport { onMemberDeleted as publicOnMemberDeleted } from './members-v1-member-members.public.js';\nimport { onMemberUpdated as publicOnMemberUpdated } from './members-v1-member-members.public.js';\n\nexport const updateCurrentMemberSlug: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateCurrentMemberSlug> &\n    typeof publicUpdateCurrentMemberSlug\n> = /*#__PURE__*/ createRESTModule(publicUpdateCurrentMemberSlug);\nexport const updateMemberSlug: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateMemberSlug> &\n    typeof publicUpdateMemberSlug\n> = /*#__PURE__*/ createRESTModule(publicUpdateMemberSlug);\nexport const joinCommunity: MaybeContext<\n  BuildRESTFunction<typeof publicJoinCommunity> & typeof publicJoinCommunity\n> = /*#__PURE__*/ createRESTModule(publicJoinCommunity);\nexport const leaveCommunity: MaybeContext<\n  BuildRESTFunction<typeof publicLeaveCommunity> & typeof publicLeaveCommunity\n> = /*#__PURE__*/ createRESTModule(publicLeaveCommunity);\nexport const getCurrentMember: MaybeContext<\n  BuildRESTFunction<typeof publicGetCurrentMember> &\n    typeof publicGetCurrentMember\n> = /*#__PURE__*/ createRESTModule(publicGetCurrentMember);\nexport const getMember: MaybeContext<\n  BuildRESTFunction<typeof publicGetMember> & typeof publicGetMember\n> = /*#__PURE__*/ createRESTModule(publicGetMember);\nexport const listMembers: MaybeContext<\n  BuildRESTFunction<typeof publicListMembers> & typeof publicListMembers\n> = /*#__PURE__*/ createRESTModule(publicListMembers);\nexport const queryMembers: MaybeContext<\n  BuildRESTFunction<typeof publicQueryMembers> & typeof publicQueryMembers\n> = /*#__PURE__*/ createRESTModule(publicQueryMembers);\nexport const muteMember: MaybeContext<\n  BuildRESTFunction<typeof publicMuteMember> & typeof publicMuteMember\n> = /*#__PURE__*/ createRESTModule(publicMuteMember);\nexport const unmuteMember: MaybeContext<\n  BuildRESTFunction<typeof publicUnmuteMember> & typeof publicUnmuteMember\n> = /*#__PURE__*/ createRESTModule(publicUnmuteMember);\nexport const approveMember: MaybeContext<\n  BuildRESTFunction<typeof publicApproveMember> & typeof publicApproveMember\n> = /*#__PURE__*/ createRESTModule(publicApproveMember);\nexport const blockMember: MaybeContext<\n  BuildRESTFunction<typeof publicBlockMember> & typeof publicBlockMember\n> = /*#__PURE__*/ createRESTModule(publicBlockMember);\nexport const disconnectMember: MaybeContext<\n  BuildRESTFunction<typeof publicDisconnectMember> &\n    typeof publicDisconnectMember\n> = /*#__PURE__*/ createRESTModule(publicDisconnectMember);\nexport const deleteMember: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteMember> & typeof publicDeleteMember\n> = /*#__PURE__*/ createRESTModule(publicDeleteMember);\nexport const deleteMyMember: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteMyMember> & typeof publicDeleteMyMember\n> = /*#__PURE__*/ createRESTModule(publicDeleteMyMember);\nexport const bulkDeleteMembers: MaybeContext<\n  BuildRESTFunction<typeof publicBulkDeleteMembers> &\n    typeof publicBulkDeleteMembers\n> = /*#__PURE__*/ createRESTModule(publicBulkDeleteMembers);\nexport const bulkDeleteMembersByFilter: MaybeContext<\n  BuildRESTFunction<typeof publicBulkDeleteMembersByFilter> &\n    typeof publicBulkDeleteMembersByFilter\n> = /*#__PURE__*/ createRESTModule(publicBulkDeleteMembersByFilter);\nexport const bulkApproveMembers: MaybeContext<\n  BuildRESTFunction<typeof publicBulkApproveMembers> &\n    typeof publicBulkApproveMembers\n> = /*#__PURE__*/ createRESTModule(publicBulkApproveMembers);\nexport const bulkBlockMembers: MaybeContext<\n  BuildRESTFunction<typeof publicBulkBlockMembers> &\n    typeof publicBulkBlockMembers\n> = /*#__PURE__*/ createRESTModule(publicBulkBlockMembers);\nexport const createMember: MaybeContext<\n  BuildRESTFunction<typeof publicCreateMember> & typeof publicCreateMember\n> = /*#__PURE__*/ createRESTModule(publicCreateMember);\nexport const updateMember: MaybeContext<\n  BuildRESTFunction<typeof publicUpdateMember> & typeof publicUpdateMember\n> = /*#__PURE__*/ createRESTModule(publicUpdateMember);\nexport const deleteMemberPhones: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteMemberPhones> &\n    typeof publicDeleteMemberPhones\n> = /*#__PURE__*/ createRESTModule(publicDeleteMemberPhones);\nexport const deleteMemberEmails: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteMemberEmails> &\n    typeof publicDeleteMemberEmails\n> = /*#__PURE__*/ createRESTModule(publicDeleteMemberEmails);\nexport const deleteMemberAddresses: MaybeContext<\n  BuildRESTFunction<typeof publicDeleteMemberAddresses> &\n    typeof publicDeleteMemberAddresses\n> = /*#__PURE__*/ createRESTModule(publicDeleteMemberAddresses);\n/**\n * Triggered when a member is created.\n *\n * The site owner can configure the site to automatically approve members or require manual approval.\n *\n * A member who has been approved either automatically or manually has a `status` of `\"APPROVED\"`. A created member waiting for approval has a `status` of `\"PENDING\"`. A `\"PENDING\"` member can't log in to the site.\n */\nexport const onMemberCreated: ReturnType<\n  typeof createEventModule<typeof publicOnMemberCreated>\n> = createEventModule(publicOnMemberCreated);\n/**\n * Triggered when a member is deleted.\n */\nexport const onMemberDeleted: ReturnType<\n  typeof createEventModule<typeof publicOnMemberDeleted>\n> = createEventModule(publicOnMemberDeleted);\n/** */\nexport const onMemberUpdated: ReturnType<\n  typeof createEventModule<typeof publicOnMemberUpdated>\n> = createEventModule(publicOnMemberUpdated);\n\nexport {\n  Status,\n  PrivacyStatusStatus,\n  ActivityStatusStatus,\n  Set,\n  SortOrder,\n  State,\n  SiteCreatedContext,\n  Namespace,\n  DeleteStatus,\n  WebhookIdentityType,\n} from './members-v1-member-members.universal.js';\nexport {\n  Member,\n  Contact,\n  Address,\n  AddressStreetOneOf,\n  StreetAddress,\n  CustomField,\n  Profile,\n  Image,\n  ExtendedFields,\n  InvalidateCache,\n  InvalidateCacheGetByOneOf,\n  App,\n  Page,\n  URI,\n  File,\n  UpdateMySlugRequest,\n  UpdateMySlugResponse,\n  SlugAlreadyExistsPayload,\n  UpdateMemberSlugRequest,\n  UpdateMemberSlugResponse,\n  JoinCommunityRequest,\n  JoinCommunityResponse,\n  MemberJoinedCommunity,\n  LeaveCommunityRequest,\n  LeaveCommunityResponse,\n  MemberLeftCommunity,\n  GetMyMemberRequest,\n  GetMyMemberResponse,\n  GetMemberRequest,\n  GetMemberResponse,\n  MemberToMemberBlockedPayload,\n  ListMembersRequest,\n  Paging,\n  Sorting,\n  CursorPaging,\n  ListMembersResponse,\n  PagingMetadata,\n  CursorPagingMetadata,\n  Cursors,\n  QueryMembersRequest,\n  Query,\n  Search,\n  QueryMembersResponse,\n  MuteMemberRequest,\n  MuteMemberResponse,\n  MemberMuted,\n  UnmuteMemberRequest,\n  UnmuteMemberResponse,\n  MemberUnmuted,\n  ApproveMemberRequest,\n  ApproveMemberResponse,\n  MemberApproved,\n  BlockMemberRequest,\n  BlockMemberResponse,\n  MemberBlocked,\n  MemberSelfBlockForbiddenPayload,\n  OwnerMemberBlockForbiddenPayload,\n  ActiveSubscriptionMemberBlockForbiddenPayload,\n  DisconnectMemberRequest,\n  DisconnectMemberResponse,\n  DeleteMemberRequest,\n  DeleteMemberResponse,\n  ContentReassignmentRequested,\n  ContentDeletionRequested,\n  OwnerOrContributorDeleteForbiddenPayload,\n  ActiveSubscriptionMemberDeleteForbiddenPayload,\n  DeleteMyMemberRequest,\n  DeleteMyMemberResponse,\n  BulkDeleteMembersRequest,\n  BulkDeleteMembersResponse,\n  ItemMetadata,\n  ApplicationError,\n  BulkMemberResult,\n  BulkActionMetadata,\n  BulkDeleteMembersByFilterRequest,\n  BulkDeleteMembersByFilterResponse,\n  BulkApproveMembersRequest,\n  BulkApproveMembersResponse,\n  BulkBlockMembersRequest,\n  BulkBlockMembersResponse,\n  CreateMemberRequest,\n  CreateMemberResponse,\n  UpdateMemberRequest,\n  UpdateMemberResponse,\n  InvalidCustomFieldUrlPayload,\n  DeleteMemberPhonesRequest,\n  DeleteMemberPhonesResponse,\n  DeleteMemberEmailsRequest,\n  DeleteMemberEmailsResponse,\n  DeleteMemberAddressesRequest,\n  DeleteMemberAddressesResponse,\n  Empty,\n  DomainEvent,\n  DomainEventBodyOneOf,\n  EntityCreatedEvent,\n  RestoreInfo,\n  EntityUpdatedEvent,\n  EntityDeletedEvent,\n  ActionEvent,\n  MetaSiteSpecialEvent,\n  MetaSiteSpecialEventPayloadOneOf,\n  Asset,\n  SiteCreated,\n  SiteTransferred,\n  SiteDeleted,\n  DeleteContext,\n  SiteUndeleted,\n  SitePublished,\n  SiteUnpublished,\n  SiteMarkedAsTemplate,\n  SiteMarkedAsWixSite,\n  ServiceProvisioned,\n  ServiceRemoved,\n  SiteRenamed,\n  SiteHardDeleted,\n  NamespaceChanged,\n  StudioAssigned,\n  StudioUnassigned,\n  SiteUrlChanged,\n  SitePurgedExternally,\n  MemberOwnershipTransferred,\n  MemberIdChanged,\n  MessageEnvelope,\n  IdentificationData,\n  IdentificationDataIdOneOf,\n  BaseEventMetadata,\n  EventMetadata,\n  MemberCreatedEnvelope,\n  MemberDeletedEnvelope,\n  MemberUpdatedEnvelope,\n  GetCurrentMemberOptions,\n  GetMemberOptions,\n  ListMembersOptions,\n  QueryMembersOptions,\n  MembersQueryResult,\n  MembersQueryBuilder,\n  DeleteMyMemberOptions,\n  BulkDeleteMembersByFilterOptions,\n  CreateMemberOptions,\n  UpdateMember,\n} from './members-v1-member-members.universal.js';\n"],"mappings":"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","names":["approveMember","blockMember","bulkApproveMembers","bulkBlockMembers","bulkDeleteMembers","bulkDeleteMembersByFilter","createMember","deleteMember","deleteMemberAddresses","deleteMemberEmails","deleteMemberPhones","deleteMyMember","disconnectMember","getCurrentMember","getMember","joinCommunity","leaveCommunity","listMembers","muteMember","onMemberCreated","onMemberDeleted","onMemberUpdated","queryMembers","unmuteMember","updateCurrentMemberSlug","updateMember","updateMemberSlug","import_rename_all_nested_keys","import_timestamp","import_transform_paths","import_timestamp","import_rest_modules","payload","Status","PrivacyStatusStatus","ActivityStatusStatus","Set","SortOrder","State","SiteCreatedContext","Namespace","DeleteStatus","WebhookIdentityType","sdkTransformError","updateMemberSlug","joinCommunity","leaveCommunity","getMember","listMembers","queryMembers","muteMember","unmuteMember","approveMember","blockMember","disconnectMember","deleteMember","deleteMyMember","bulkDeleteMembers","bulkDeleteMembersByFilter","bulkApproveMembers","bulkBlockMembers","createMember","updateMember","deleteMemberPhones","deleteMemberEmails","deleteMemberAddresses","updateCurrentMemberSlug","updateMemberSlug","joinCommunity","leaveCommunity","getCurrentMember","getMember","listMembers","queryMembers","muteMember","unmuteMember","approveMember","blockMember","disconnectMember","deleteMember","deleteMyMember","bulkDeleteMembers","bulkDeleteMembersByFilter","bulkApproveMembers","bulkBlockMembers","createMember","updateMember","deleteMemberPhones","deleteMemberEmails","deleteMemberAddresses","import_rest_modules","updateCurrentMemberSlug","updateMemberSlug","joinCommunity","leaveCommunity","getCurrentMember","getMember","listMembers","queryMembers","muteMember","unmuteMember","approveMember","blockMember","disconnectMember","deleteMember","deleteMyMember","bulkDeleteMembers","bulkDeleteMembersByFilter","bulkApproveMembers","bulkBlockMembers","createMember","updateMember","deleteMemberPhones","deleteMemberEmails","deleteMemberAddresses","onMemberCreated","onMemberDeleted","onMemberUpdated"]}