interface Member {
    /**
     * Member ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Email used by a member to log in to the site.
     * @format EMAIL
     */
    loginEmail?: string | null;
    /**
     * Whether the email used by a member has been verified.
     * @readonly
     */
    loginEmailVerified?: boolean | null;
    /**
     * Member site access status.
     * @readonly
     */
    status?: Status;
    /**
     * Contact ID.
     * @format GUID
     * @readonly
     */
    contactId?: string | null;
    /**
     * Member's contact information. Contact information is stored in the
     * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
     *
     * The full set of contact data can be accessed and managed with the
     * Contacts API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/crm/contacts/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/introduction)).
     */
    contact?: Contact;
    /** Profile display details. */
    profile?: Profile;
    /** Member privacy status. */
    privacyStatus?: PrivacyStatusStatus;
    /**
     * Member activity status.
     * @readonly
     */
    activityStatus?: ActivityStatusStatus;
    /**
     * Date and time when the member was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time when the member was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Date and time when the member last logged in to the site.
     * @readonly
     */
    lastLoginDate?: Date | null;
}
declare enum Status {
    /** Insufficient permissions to get the status. */
    UNKNOWN = "UNKNOWN",
    /** Member is created and is waiting for approval by a Wix user. */
    PENDING = "PENDING",
    /** Member can log in to the site. */
    APPROVED = "APPROVED",
    /** Member is blocked and can't log in to the site. */
    BLOCKED = "BLOCKED",
    /** Member is a [guest author](https://support.wix.com/en/article/wix-blog-adding-managed-writers-to-your-blog) for the site blog and can't log in to the site. */
    OFFLINE = "OFFLINE"
}
/** Contact info associated with the member. */
interface Contact {
    /** Contact's first name. */
    firstName?: string | null;
    /** Contact's last name. */
    lastName?: string | null;
    /** List of phone numbers. */
    phones?: string[] | null;
    /**
     * List of email addresses.
     * @format EMAIL
     */
    emails?: string[] | null;
    /** List of street addresses. */
    addresses?: Address[];
    /**
     * Contact's birthdate, formatted as `"YYYY-MM-DD"`.
     *
     * Example: `"2020-03-15"` for March 15, 2020.
     * @maxLength 100
     */
    birthdate?: string | null;
    /**
     * Contact's company name.
     * @maxLength 100
     */
    company?: string | null;
    /**
     * Contact's job title.
     * @maxLength 100
     */
    jobTitle?: string | null;
    /**
     * Custom fields are structured as key:value pairs where each key is the field `name`, and each value is the field's `value` for the member.
     *
     * > **Notes:**
     * > - Only custom fields added to the member profile in the dashboard are available through the Members API. Empty fields are not returned.
     * > - When updating a member, `name` is ignored.
     */
    customFields?: Record<string, CustomField>;
}
/** Street address. */
interface Address extends AddressStreetOneOf {
    /** Street address object, with number and name in separate fields. */
    streetAddress?: StreetAddress;
    /**
     * Main address line, usually street and number, as free text.
     * @maxLength 200
     */
    addressLine?: string | null;
    /**
     * Street address ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Free text providing more detailed address information,
     * such as apartment, suite, or floor.
     */
    addressLine2?: string | null;
    /** City name. */
    city?: string | null;
    /**
     * Code for a subdivision (such as state, prefecture, or province) in an
     * [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) format.
     */
    subdivision?: string | null;
    /**
     * 2-letter country code in an
     * [ISO-3166 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
     */
    country?: string | null;
    /** Postal code. */
    postalCode?: string | null;
}
/** @oneof */
interface AddressStreetOneOf {
    /** Street address object, with number and name in separate fields. */
    streetAddress?: StreetAddress;
    /**
     * Main address line, usually street and number, as free text.
     * @maxLength 200
     */
    addressLine?: string | null;
}
interface StreetAddress {
    /**
     * Street number.
     * @maxLength 100
     */
    number?: string;
    /**
     * Street name.
     * @maxLength 200
     */
    name?: string;
}
interface CustomField {
    /** Custom field name. */
    name?: string | null;
    /** Custom field value. */
    value?: any;
}
/** Member Profile */
interface Profile {
    /**
     * Name that identifies the member to other members.
     * Displayed on the member's profile page
     * and interactions in the forum or blog.
     */
    nickname?: string | null;
    /**
     * Slug that determines the member's profile page URL.
     * @readonly
     */
    slug?: string | null;
    /** Member's profile photo. */
    photo?: Image;
    /**
     * Member's cover photo,
     * used as a background picture in a member's profile page.
     *
     * Cover positioning can be altered with `cover.offsetX` and `cover.offsetY`.
     * When left empty, the values default to `0`.
     */
    cover?: Image;
    /**
     * Member title.
     *
     * Currently available through the API only.
     */
    title?: string | null;
}
interface Image {
    /**
     * Wix Media image ID,
     * set when the member selects an image from Wix Media.
     */
    _id?: string;
    /** Image URL. */
    url?: string;
    /** Original image width. */
    height?: number;
    /** Original image height. */
    width?: number;
    /**
     * X-axis offset.
     *
     * Default: `0`.
     */
    offsetX?: number | null;
    /**
     * Y-axis offset.
     *
     * Default: `0`.
     */
    offsetY?: number | null;
}
declare enum PrivacyStatusStatus {
    /** Insufficient permissions to get the status. */
    UNKNOWN = "UNKNOWN",
    /** Member is hidden from site visitors and other site members. Member is returned only to Wix users. */
    PRIVATE = "PRIVATE",
    /** Member is visible to everyone. */
    PUBLIC = "PUBLIC"
}
declare enum ActivityStatusStatus {
    /** Insufficient permissions to get the status. */
    UNKNOWN = "UNKNOWN",
    /** Member can write forum posts and blog comments. */
    ACTIVE = "ACTIVE",
    /** Member can't write forum posts or blog comments. */
    MUTED = "MUTED"
}
interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
interface InvalidateCache extends InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
    /**
     * tell us why you're invalidating the cache. You don't need to add your app name
     * @maxLength 256
     */
    reason?: string | null;
    /** Is local DS */
    localDc?: boolean;
    hardPurge?: boolean;
}
/** @oneof */
interface InvalidateCacheGetByOneOf {
    /**
     * Invalidate by msId. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Site ID. NOT recommended, as this will invalidate the entire site cache!
     * @format GUID
     */
    siteId?: string;
    /** Invalidate by App */
    app?: App;
    /** Invalidate by page id */
    page?: Page;
    /** Invalidate by URI path */
    uri?: URI;
    /** Invalidate by file (for media files such as PDFs) */
    file?: File;
}
interface App {
    /**
     * The AppDefId
     * @minLength 1
     */
    appDefId?: string;
    /**
     * The instance Id
     * @format GUID
     */
    instanceId?: string;
}
interface Page {
    /**
     * the msid the page is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by Page ID
     * @minLength 1
     */
    pageId?: string;
}
interface URI {
    /**
     * the msid the URI is on
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * URI path to invalidate (e.g. page/my/path) - without leading/trailing slashes
     * @minLength 1
     */
    uriPath?: string;
}
interface File {
    /**
     * the msid the file is related to
     * @format GUID
     */
    metaSiteId?: string;
    /**
     * Invalidate by filename (for media files such as PDFs)
     * @minLength 1
     * @maxLength 256
     */
    fileName?: string;
}
interface UpdateMySlugRequest {
    /**
     * New slug.
     * @maxLength 255
     */
    slug: string;
}
interface UpdateMySlugResponse {
    /** Updated member. */
    member?: Member;
}
interface SlugAlreadyExistsPayload {
    slug?: string;
}
interface UpdateMemberSlugRequest {
    /**
     * Member ID.
     * @format GUID
     */
    _id: string;
    /**
     * New slug.
     * @maxLength 255
     */
    slug: string;
}
interface UpdateMemberSlugResponse {
    /** Updated member. */
    member?: Member;
}
interface JoinCommunityRequest {
}
/** Member profile. */
interface JoinCommunityResponse {
    /** The updated member. */
    member?: Member;
}
interface MemberJoinedCommunity {
    /**
     * ID of the member who joined the community.
     * @format GUID
     * @readonly
     */
    memberId?: string;
}
interface LeaveCommunityRequest {
}
/** Member profile. */
interface LeaveCommunityResponse {
    /** The updated member. */
    member?: Member;
}
interface MemberLeftCommunity {
    /**
     * ID of the site member who left the community.
     * @format GUID
     * @readonly
     */
    memberId?: string;
}
interface GetMyMemberRequest {
    /**
     * Predefined set of fields to return.
     *
     * Default: `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[];
}
declare enum Set {
    /**
     * Includes `id`, `contactId`, `createdDate`, `updatedDate` and the `profile` object.
     * `status`, `privacyStatus`, and `activityStatus` are returned as `UNKNOWN`.
     */
    PUBLIC = "PUBLIC",
    /** Includes `id`, `loginEmail`, `status`, `contactId`, `createdDate`, `updatedDate`, `privacyStatus`, `activityStatus` and the `profile` object. */
    EXTENDED = "EXTENDED",
    /** Includes all fields. */
    FULL = "FULL"
}
/** Member profile. */
interface GetMyMemberResponse {
    /** The retrieved member. */
    member?: Member;
}
interface GetMemberRequest {
    /**
     * Member ID.
     * @format GUID
     */
    _id: string;
    /**
     * Predefined set of fields to return.
     *
     * Defaults to `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[];
}
interface GetMemberResponse {
    /** The requested member. */
    member?: Member;
}
interface MemberToMemberBlockedPayload {
    /**
     * Member ID.
     * @format GUID
     */
    memberId?: string;
}
interface ListMembersRequest {
    paging?: Paging;
    /**
     * Predefined sets of fields to return.
     *
     * Default: `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[];
    sorting?: Sorting[];
}
interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
interface ListMembersResponse {
    /** List of members. */
    members?: Member[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface PagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
}
interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
interface QueryMembersRequest {
    /** Query options. */
    query?: Query;
    /**
     * Predefined sets of fields to return.
     *
     * Default: `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[];
    /** Plain text search. */
    search?: Search;
}
interface Query {
    /** Query options. See [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language) for more details. */
    filter?: any;
    /** Limit number of results */
    paging?: Paging;
    /** Sort the results */
    sorting?: Sorting[];
}
/** Free text to match in searchable fields */
interface Search {
    /**
     * Search term or expression.
     * @minLength 1
     * @maxLength 100
     */
    expression?: string | null;
    /**
     * Currently supported fields for search:
     *
     * - `loginEmail`
     * - `contact.firstName`
     * - `contact.lastName`
     * - `profile.title`
     * - `profile.nickname`
     * - `profile.slug`
     *
     * Default: `profile.nickname`.
     * @maxSize 4
     */
    fields?: string[];
}
interface QueryMembersResponse {
    /** List of members that met the query filter criteria. */
    members?: Member[];
    /** Metadata for the paginated results. */
    metadata?: PagingMetadata;
}
interface MuteMemberRequest {
    /**
     * ID of the member to mute.
     * @format GUID
     */
    _id: string;
}
interface MuteMemberResponse {
    /** Muted member. */
    member?: Member;
}
interface MemberMuted {
    /**
     * ID of the member who got muted.
     * @format GUID
     * @readonly
     */
    memberId?: string;
}
interface UnmuteMemberRequest {
    /**
     * ID of the member to unmute.
     * @format GUID
     */
    _id: string;
}
interface UnmuteMemberResponse {
    /** Unmuted member. */
    member?: Member;
}
interface MemberUnmuted {
    /**
     * ID of the member who got unmuted.
     * @format GUID
     * @readonly
     */
    memberId?: string;
}
interface ApproveMemberRequest {
    /**
     * ID of the member to approve.
     * @format GUID
     */
    _id: string;
}
interface ApproveMemberResponse {
    /** Approved member. */
    member?: Member;
}
interface MemberApproved {
    /**
     * ID of the member who got approved.
     * @format GUID
     * @readonly
     */
    memberId?: string;
}
interface BlockMemberRequest {
    /**
     * ID of a member to block.
     * @format GUID
     */
    _id: string;
}
interface BlockMemberResponse {
    /** Blocked member. */
    member?: Member;
}
interface MemberBlocked {
    /**
     * ID of the member who got blocked.
     * @format GUID
     * @readonly
     */
    memberId?: string;
}
interface MemberSelfBlockForbiddenPayload {
    /**
     * Target's member ID.
     * @format GUID
     */
    memberId?: string;
}
interface OwnerMemberBlockForbiddenPayload {
    /**
     * Owner's member ID.
     * @format GUID
     */
    memberId?: string;
}
interface ActiveSubscriptionMemberBlockForbiddenPayload {
    /**
     * Active subscription member ID.
     * @format GUID
     */
    memberId?: string;
}
interface DisconnectMemberRequest {
    /**
     * ID of a member to disconnect.
     * @format GUID
     */
    _id: string;
}
interface DisconnectMemberResponse {
    /** Disconnected member. */
    member?: Member;
}
interface DeleteMemberRequest {
    /**
     * ID of a member to delete.
     * @format GUID
     */
    _id: string;
}
interface DeleteMemberResponse {
}
interface ContentReassignmentRequested {
    fromMember?: Member;
    toMember?: Member;
}
interface ContentDeletionRequested {
    member?: Member;
}
interface OwnerOrContributorDeleteForbiddenPayload {
    /**
     * Owner's or contributor's member ID.
     * @format GUID
     */
    memberId?: string;
}
interface ActiveSubscriptionMemberDeleteForbiddenPayload {
    /**
     * Active subscription member ID.
     * @format GUID
     */
    memberId?: string;
}
interface DeleteMyMemberRequest {
    /**
     * ID of a member receiving the deleted member's content.
     * @format GUID
     */
    contentAssigneeId?: string | null;
}
interface DeleteMyMemberResponse {
}
interface BulkDeleteMembersRequest {
    /**
     * IDs of members to be deleted.
     * @minSize 1
     * @maxSize 100
     * @format GUID
     */
    memberIds: string[];
}
interface BulkDeleteMembersResponse {
    /** Result. */
    results?: BulkMemberResult[];
    /** Bulk action result metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
interface ItemMetadata {
    /**
     * Item ID. Should always be available, unless it's impossible (for example, when failing to create an item).
     * @maxLength 255
     */
    _id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
interface BulkMemberResult {
    itemMetadata?: ItemMetadata;
}
interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
interface BulkDeleteMembersByFilterRequest {
    /** Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details. */
    filter: any;
    /**
     * ID of a member receiving the deleted member's content.
     * @format GUID
     */
    contentAssigneeId?: string | null;
    /** Plain text search. */
    search?: Search;
}
interface BulkDeleteMembersByFilterResponse {
    /**
     * Job ID.
     * Specify this ID when calling Get Async Job ([SDK](https://dev.wix.com/docs/sdk/backend-modules/async-jobs/get-async-job) | [REST](https://dev.wix.com/docs/rest/business-management/async-job/introduction)) to retrieve job details and metadata.
     */
    jobId?: string;
}
interface BulkApproveMembersRequest {
    /** Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details. */
    filter: any;
}
interface BulkApproveMembersResponse {
    /**
     * Job ID.
     * Specify this ID when calling Get Async Job ([SDK](https://dev.wix.com/docs/sdk/backend-modules/async-jobs/get-async-job) | [REST](https://dev.wix.com/docs/rest/business-management/async-job/introduction)) to retrieve job details and metadata.
     */
    jobId?: string;
}
interface BulkBlockMembersRequest {
    /** Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details. */
    filter: any;
}
interface BulkBlockMembersResponse {
    /**
     * Job ID.
     * Specify this ID when calling Get Async Job ([SDK](https://dev.wix.com/docs/sdk/backend-modules/async-jobs/get-async-job) | [REST](https://dev.wix.com/docs/rest/business-management/async-job/introduction)) to retrieve job details and metadata.
     */
    jobId?: string;
}
interface CreateMemberRequest {
    /** Member to create. */
    member?: Member;
}
interface CreateMemberResponse {
    /** New member. */
    member?: Member;
}
interface UpdateMemberRequest {
    /** Member info to update. */
    member?: Member;
}
interface UpdateMemberResponse {
    /** Updated member. */
    member?: Member;
}
interface InvalidCustomFieldUrlPayload {
    /** Custom field key and invalid URL. */
    fields?: Record<string, string>;
}
interface DeleteMemberPhonesRequest {
    /**
     * ID of the member whose phone numbers will be deleted.
     * @format GUID
     */
    _id: string;
}
interface DeleteMemberPhonesResponse {
    /** Updated member. */
    member?: Member;
}
interface DeleteMemberEmailsRequest {
    /**
     * ID of the member whose email addresses will be deleted.
     * @format GUID
     */
    _id: string;
}
interface DeleteMemberEmailsResponse {
    /** Updated member. */
    member?: Member;
}
interface DeleteMemberAddressesRequest {
    /**
     * ID of the member whose street addresses will be deleted.
     * @format GUID
     */
    _id: string;
}
interface DeleteMemberAddressesResponse {
    /** Updated member. */
    member?: Member;
}
interface Empty {
}
interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
interface EntityCreatedEvent {
    entity?: string;
}
interface RestoreInfo {
    deletedDate?: Date | null;
}
interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
interface ActionEvent {
    body?: string;
}
interface MetaSiteSpecialEvent extends MetaSiteSpecialEventPayloadOneOf {
    /** Emitted on a meta site creation. */
    siteCreated?: SiteCreated;
    /** Emitted on a meta site transfer completion. */
    siteTransferred?: SiteTransferred;
    /** Emitted on a meta site deletion. */
    siteDeleted?: SiteDeleted;
    /** Emitted on a meta site restoration. */
    siteUndeleted?: SiteUndeleted;
    /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */
    sitePublished?: SitePublished;
    /** Emitted on a meta site unpublish. */
    siteUnpublished?: SiteUnpublished;
    /** Emitted when meta site is marked as template. */
    siteMarkedAsTemplate?: SiteMarkedAsTemplate;
    /** Emitted when meta site is marked as a WixSite. */
    siteMarkedAsWixSite?: SiteMarkedAsWixSite;
    /** Emitted when an application is provisioned (installed). */
    serviceProvisioned?: ServiceProvisioned;
    /** Emitted when an application is removed (uninstalled). */
    serviceRemoved?: ServiceRemoved;
    /** Emitted when meta site name (URL slug) is changed. */
    siteRenamedPayload?: SiteRenamed;
    /** Emitted when meta site was permanently deleted. */
    hardDeleted?: SiteHardDeleted;
    /** Emitted on a namespace change. */
    namespaceChanged?: NamespaceChanged;
    /** Emitted when Studio is attached. */
    studioAssigned?: StudioAssigned;
    /** Emitted when Studio is detached. */
    studioUnassigned?: StudioUnassigned;
    /**
     * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch
     * the actual URL.
     *
     * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT
     * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459
     */
    urlChanged?: SiteUrlChanged;
    /** Site is marked as PurgedExternally */
    sitePurgedExternally?: SitePurgedExternally;
    /**
     * A meta site id.
     * @format GUID
     */
    metaSiteId?: string;
    /** A meta site version. Monotonically increasing. */
    version?: string;
    /** A timestamp of the event. */
    timestamp?: string;
    /**
     * TODO(meta-site): Change validation once validations are disabled for consumers
     * More context: https://wix.slack.com/archives/C0UHEBPFT/p1720957844413149 and https://wix.slack.com/archives/CFWKX325T/p1728892152855659
     * @maxSize 4000
     */
    assets?: Asset[];
}
/** @oneof */
interface MetaSiteSpecialEventPayloadOneOf {
    /** Emitted on a meta site creation. */
    siteCreated?: SiteCreated;
    /** Emitted on a meta site transfer completion. */
    siteTransferred?: SiteTransferred;
    /** Emitted on a meta site deletion. */
    siteDeleted?: SiteDeleted;
    /** Emitted on a meta site restoration. */
    siteUndeleted?: SiteUndeleted;
    /** Emitted on the first* publish of the meta site (* switching from unpublished to published state). */
    sitePublished?: SitePublished;
    /** Emitted on a meta site unpublish. */
    siteUnpublished?: SiteUnpublished;
    /** Emitted when meta site is marked as template. */
    siteMarkedAsTemplate?: SiteMarkedAsTemplate;
    /** Emitted when meta site is marked as a WixSite. */
    siteMarkedAsWixSite?: SiteMarkedAsWixSite;
    /** Emitted when an application is provisioned (installed). */
    serviceProvisioned?: ServiceProvisioned;
    /** Emitted when an application is removed (uninstalled). */
    serviceRemoved?: ServiceRemoved;
    /** Emitted when meta site name (URL slug) is changed. */
    siteRenamedPayload?: SiteRenamed;
    /** Emitted when meta site was permanently deleted. */
    hardDeleted?: SiteHardDeleted;
    /** Emitted on a namespace change. */
    namespaceChanged?: NamespaceChanged;
    /** Emitted when Studio is attached. */
    studioAssigned?: StudioAssigned;
    /** Emitted when Studio is detached. */
    studioUnassigned?: StudioUnassigned;
    /**
     * Emitted when one of the URLs is changed. After this event you may call `urls-server` to fetch
     * the actual URL.
     *
     * See: https://wix.slack.com/archives/C0UHEBPFT/p1732520791210559?thread_ts=1732027914.294059&cid=C0UHEBPFT
     * See: https://wix.slack.com/archives/C0UHEBPFT/p1744115197619459
     */
    urlChanged?: SiteUrlChanged;
    /** Site is marked as PurgedExternally */
    sitePurgedExternally?: SitePurgedExternally;
}
interface Asset {
    /**
     * An application definition id (app_id in dev-center). For legacy reasons may be UUID or a string (from Java Enum).
     * @maxLength 36
     */
    appDefId?: string;
    /**
     * An instance id. For legacy reasons may be UUID or a string.
     * @maxLength 200
     */
    instanceId?: string;
    /** An application state. */
    state?: State;
}
declare enum State {
    UNKNOWN = "UNKNOWN",
    ENABLED = "ENABLED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    DEMO = "DEMO"
}
interface SiteCreated {
    /**
     * A template identifier (empty if not created from a template).
     * @maxLength 36
     */
    originTemplateId?: string;
    /**
     * An account id of the owner.
     * @format GUID
     */
    ownerId?: string;
    /** A context in which meta site was created. */
    context?: SiteCreatedContext;
    /**
     * A meta site id from which this site was created.
     *
     * In case of a creation from a template it's a template id.
     * In case of a site duplication ("Save As" in dashboard or duplicate in UM) it's an id of a source site.
     * @format GUID
     */
    originMetaSiteId?: string | null;
    /**
     * A meta site name (URL slug).
     * @maxLength 20
     */
    siteName?: string;
    /** A namespace. */
    namespace?: Namespace;
}
declare enum SiteCreatedContext {
    /** A valid option, we don't expose all reasons why site might be created. */
    OTHER = "OTHER",
    /** A meta site was created from template. */
    FROM_TEMPLATE = "FROM_TEMPLATE",
    /** A meta site was created by copying of the transfferred meta site. */
    DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER",
    /** A copy of existing meta site. */
    DUPLICATE = "DUPLICATE",
    /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */
    OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER",
    /** deprecated A meta site was created for Flash editor. */
    FLASH = "FLASH"
}
declare enum Namespace {
    UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE",
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    WIX = "WIX",
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    SHOUT_OUT = "SHOUT_OUT",
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ALBUMS = "ALBUMS",
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE",
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    HOTELS = "HOTELS",
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    CLUBS = "CLUBS",
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ONBOARDING_DRAFT = "ONBOARDING_DRAFT",
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_SITE = "DEV_SITE",
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    LOGOS = "LOGOS",
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    VIDEO_MAKER = "VIDEO_MAKER",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    PARTNER_DASHBOARD = "PARTNER_DASHBOARD",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY",
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    HTML_DRAFT = "HTML_DRAFT",
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    SITELESS_BUSINESS = "SITELESS_BUSINESS",
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    CREATOR_ECONOMY = "CREATOR_ECONOMY",
    /** It is to be used in the Business First efforts. */
    DASHBOARD_FIRST = "DASHBOARD_FIRST",
    /** Bookings business flow with no site. */
    ANYWHERE = "ANYWHERE",
    /** Namespace for Headless Backoffice with no editor */
    HEADLESS = "HEADLESS",
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS",
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    RISE = "RISE",
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    BRANDED_FIRST = "BRANDED_FIRST",
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    NOWNIA = "NOWNIA",
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    UGC_TEMPLATE = "UGC_TEMPLATE",
    /** Codux Headless Sites */
    CODUX = "CODUX",
    /** Bobb - AI Design Creator. */
    MEDIA_DESIGN_CREATOR = "MEDIA_DESIGN_CREATOR",
    /**
     * Shared Blog Site is a unique single site across Enterprise account,
     * This site will hold all Blog posts related to the Marketing product.
     */
    SHARED_BLOG_ENTERPRISE = "SHARED_BLOG_ENTERPRISE",
    /** Standalone forms (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    STANDALONE_FORMS = "STANDALONE_FORMS",
    /** Standalone events (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    STANDALONE_EVENTS = "STANDALONE_EVENTS",
    /** MIMIR - Siteless account for MIMIR Ai Job runner. */
    MIMIR = "MIMIR"
}
/** Site transferred to another user. */
interface SiteTransferred {
    /**
     * A previous owner id (user that transfers meta site).
     * @format GUID
     */
    oldOwnerId?: string;
    /**
     * A new owner id (user that accepts meta site).
     * @format GUID
     */
    newOwnerId?: string;
}
/** Soft deletion of the meta site. Could be restored. */
interface SiteDeleted {
    /** A deletion context. */
    deleteContext?: DeleteContext;
}
interface DeleteContext {
    /** When the meta site was deleted. */
    dateDeleted?: Date | null;
    /** A status. */
    deleteStatus?: DeleteStatus;
    /**
     * A reason (flow).
     * @maxLength 255
     */
    deleteOrigin?: string;
    /**
     * A service that deleted it.
     * @maxLength 255
     */
    initiatorId?: string | null;
}
declare enum DeleteStatus {
    UNKNOWN = "UNKNOWN",
    TRASH = "TRASH",
    DELETED = "DELETED",
    PENDING_PURGE = "PENDING_PURGE",
    PURGED_EXTERNALLY = "PURGED_EXTERNALLY"
}
/** Restoration of the meta site. */
interface SiteUndeleted {
}
/** First publish of a meta site. Or subsequent publish after unpublish. */
interface SitePublished {
}
interface SiteUnpublished {
    /**
     * A list of URLs previously associated with the meta site.
     * @maxLength 4000
     * @maxSize 10000
     */
    urls?: string[];
}
interface SiteMarkedAsTemplate {
}
interface SiteMarkedAsWixSite {
}
/**
 * Represents a service provisioned a site.
 *
 * Note on `origin_instance_id`:
 * There is no guarantee that you will be able to find a meta site using `origin_instance_id`.
 * This is because of the following scenario:
 *
 * Imagine you have a template where a third-party application (TPA) includes some stub data,
 * such as a product catalog. When you create a site from this template, you inherit this
 * default product catalog. However, if the template's product catalog is modified,
 * your site will retain the catalog as it was at the time of site creation. This ensures that
 * your site remains consistent with what you initially received and does not include any
 * changes made to the original template afterward.
 * To ensure this, the TPA on the template gets a new instance_id.
 */
interface ServiceProvisioned {
    /**
     * Either UUID or EmbeddedServiceType.
     * @maxLength 36
     */
    appDefId?: string;
    /**
     * Not only UUID. Something here could be something weird.
     * @maxLength 36
     */
    instanceId?: string;
    /**
     * An instance id from which this instance is originated.
     * @maxLength 36
     */
    originInstanceId?: string;
    /**
     * A version.
     * @maxLength 500
     */
    version?: string | null;
    /**
     * The origin meta site id
     * @format GUID
     */
    originMetaSiteId?: string | null;
}
interface ServiceRemoved {
    /**
     * Either UUID or EmbeddedServiceType.
     * @maxLength 36
     */
    appDefId?: string;
    /**
     * Not only UUID. Something here could be something weird.
     * @maxLength 36
     */
    instanceId?: string;
    /**
     * A version.
     * @maxLength 500
     */
    version?: string | null;
}
/** Rename of the site. Meaning, free public url has been changed as well. */
interface SiteRenamed {
    /**
     * A new meta site name (URL slug).
     * @maxLength 20
     */
    newSiteName?: string;
    /**
     * A previous meta site name (URL slug).
     * @maxLength 255
     */
    oldSiteName?: string;
}
/**
 * Hard deletion of the meta site.
 *
 * Could not be restored. Therefore it's desirable to cleanup data.
 */
interface SiteHardDeleted {
    /** A deletion context. */
    deleteContext?: DeleteContext;
}
interface NamespaceChanged {
    /** A previous namespace. */
    oldNamespace?: Namespace;
    /** A new namespace. */
    newNamespace?: Namespace;
}
/** Assigned Studio editor */
interface StudioAssigned {
}
/** Unassigned Studio editor */
interface StudioUnassigned {
}
/**
 * Fired in case site URLs were changed in any way: new secondary domain, published, account slug rename, site rename etc.
 *
 * This is an internal event, it's not propagated in special events, because it's non-actionable. If you need to keep up
 * with sites and its urls, you need to listen to another topic/event. Read about it:
 *
 * https://bo.wix.com/wix-docs/rest/meta-site/meta-site---urls-service
 */
interface SiteUrlChanged {
}
/**
 * Used at the end of the deletion flow for both draft sites and when a user deletes a site.
 * Consumed by other teams to remove relevant data.
 */
interface SitePurgedExternally {
    /**
     * @maxLength 2048
     * @maxSize 100
     * @deprecated
     * @targetRemovalDate 2025-04-15
     */
    appDefId?: string[];
}
interface MemberOwnershipTransferred {
    fromMember?: Member;
    toMember?: Member;
}
interface MemberIdChanged {
    /** @format GUID */
    fromId?: string;
    /** @format GUID */
    toId?: string;
}
interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
interface MemberCreatedEnvelope {
    entity: Member;
    metadata: EventMetadata;
}
interface MemberDeletedEnvelope {
    metadata: EventMetadata;
}
interface MemberUpdatedEnvelope {
    entity: Member;
    metadata: EventMetadata;
}
interface GetCurrentMemberOptions {
    /**
     * Predefined set of fields to return.
     *
     * Default: `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[];
}
interface GetMemberOptions {
    /**
     * Predefined set of fields to return.
     *
     * Defaults to `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[];
}
interface ListMembersOptions {
    /** Paging options. */
    paging?: Paging;
    /**
     * Predefined sets of fields to return.
     *
     * Default: `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[];
    /** Sorting options. */
    sorting?: Sorting[];
}
interface QueryMembersOptions {
    /**
     * Predefined sets of fields to return.
     *
     * Default: `"PUBLIC"`.
     * @maxSize 3
     */
    fieldsets?: Set[] | undefined;
    /** Plain text search. */
    search?: Search | undefined;
}
interface QueryOffsetResult {
    currentPage: number | undefined;
    totalPages: number | undefined;
    totalCount: number | undefined;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
interface MembersQueryResult extends QueryOffsetResult {
    items: Member[];
    query: MembersQueryBuilder;
    next: () => Promise<MembersQueryResult>;
    prev: () => Promise<MembersQueryResult>;
}
interface MembersQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'loginEmail' | 'contactId' | 'contact.firstName' | 'contact.lastName' | 'profile.nickname' | 'profile.slug' | 'privacyStatus', value: any) => MembersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'loginEmail' | 'contactId' | 'contact.firstName' | 'contact.lastName' | 'profile.nickname' | 'profile.slug' | 'privacyStatus', value: any) => MembersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'loginEmail' | 'contactId' | 'contact.firstName' | 'contact.lastName' | 'profile.nickname' | 'profile.slug', value: string) => MembersQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | 'loginEmail' | 'contactId' | 'contact.firstName' | 'contact.lastName' | 'profile.nickname' | 'profile.slug' | 'privacyStatus', value: any[]) => MembersQueryBuilder;
    in: (propertyName: '_id' | 'loginEmail' | 'contactId' | 'contact.firstName' | 'contact.lastName' | 'profile.nickname' | 'profile.slug' | 'privacyStatus', value: any) => MembersQueryBuilder;
    exists: (propertyName: '_id' | 'loginEmail' | 'contactId' | 'contact.firstName' | 'contact.lastName' | 'profile.nickname' | 'profile.slug' | 'privacyStatus', value: boolean) => MembersQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => MembersQueryBuilder;
    /** @param skip - Number of items to skip in the query results before returning the results. */
    skip: (skip: number) => MembersQueryBuilder;
    find: () => Promise<MembersQueryResult>;
}
interface DeleteMyMemberOptions {
    /**
     * ID of a member receiving the deleted member's content.
     * @format GUID
     */
    contentAssigneeId?: string | null;
}
interface BulkDeleteMembersByFilterOptions {
    /**
     * ID of a member receiving the deleted member's content.
     * @format GUID
     */
    contentAssigneeId?: string | null;
    /** Plain text search. */
    search?: Search;
}
interface CreateMemberOptions {
    /** Member to create. */
    member?: Member;
}
interface UpdateMember {
    /**
     * Member ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Email used by a member to log in to the site.
     * @format EMAIL
     */
    loginEmail?: string | null;
    /**
     * Whether the email used by a member has been verified.
     * @readonly
     */
    loginEmailVerified?: boolean | null;
    /**
     * Member site access status.
     * @readonly
     */
    status?: Status;
    /**
     * Contact ID.
     * @format GUID
     * @readonly
     */
    contactId?: string | null;
    /**
     * Member's contact information. Contact information is stored in the
     * [Contact List](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Fcontacts).
     *
     * The full set of contact data can be accessed and managed with the
     * Contacts API ([SDK](https://dev.wix.com/docs/sdk/backend-modules/crm/contacts/introduction) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/introduction)).
     */
    contact?: Contact;
    /** Profile display details. */
    profile?: Profile;
    /** Member privacy status. */
    privacyStatus?: PrivacyStatusStatus;
    /**
     * Member activity status.
     * @readonly
     */
    activityStatus?: ActivityStatusStatus;
    /**
     * Date and time when the member was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time when the member was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Date and time when the member last logged in to the site.
     * @readonly
     */
    lastLoginDate?: Date | null;
}

export { type SlugAlreadyExistsPayload as $, type ApproveMemberResponse as A, type BlockMemberResponse as B, type CreateMemberOptions as C, type DisconnectMemberResponse as D, type AddressStreetOneOf as E, type StreetAddress as F, type GetCurrentMemberOptions as G, type CustomField as H, type Profile as I, type JoinCommunityResponse as J, type Image as K, type LeaveCommunityResponse as L, type Member as M, Namespace as N, type ExtendedFields as O, PrivacyStatusStatus as P, type QueryMembersOptions as Q, type InvalidateCache as R, Status as S, type InvalidateCacheGetByOneOf as T, type UpdateMySlugResponse as U, type App as V, WebhookIdentityType as W, type Page as X, type URI as Y, type File as Z, type UpdateMySlugRequest as _, type UpdateMemberSlugResponse as a, type ActionEvent as a$, type UpdateMemberSlugRequest as a0, type JoinCommunityRequest as a1, type MemberJoinedCommunity as a2, type LeaveCommunityRequest as a3, type MemberLeftCommunity as a4, type GetMyMemberRequest as a5, type GetMemberRequest as a6, type GetMemberResponse as a7, type MemberToMemberBlockedPayload as a8, type ListMembersRequest as a9, type OwnerOrContributorDeleteForbiddenPayload as aA, type ActiveSubscriptionMemberDeleteForbiddenPayload as aB, type DeleteMyMemberRequest as aC, type DeleteMyMemberResponse as aD, type BulkDeleteMembersRequest as aE, type ItemMetadata as aF, type ApplicationError as aG, type BulkMemberResult as aH, type BulkActionMetadata as aI, type BulkDeleteMembersByFilterRequest as aJ, type BulkApproveMembersRequest as aK, type BulkBlockMembersRequest as aL, type CreateMemberRequest as aM, type CreateMemberResponse as aN, type UpdateMemberRequest as aO, type UpdateMemberResponse as aP, type InvalidCustomFieldUrlPayload as aQ, type DeleteMemberPhonesRequest as aR, type DeleteMemberEmailsRequest as aS, type DeleteMemberAddressesRequest as aT, type Empty as aU, type DomainEvent as aV, type DomainEventBodyOneOf as aW, type EntityCreatedEvent as aX, type RestoreInfo as aY, type EntityUpdatedEvent as aZ, type EntityDeletedEvent as a_, type Paging as aa, type Sorting as ab, type CursorPaging as ac, type PagingMetadata as ad, type CursorPagingMetadata as ae, type Cursors as af, type QueryMembersRequest as ag, type Query as ah, type Search as ai, type QueryMembersResponse as aj, type MuteMemberRequest as ak, type MemberMuted as al, type UnmuteMemberRequest as am, type MemberUnmuted as an, type ApproveMemberRequest as ao, type MemberApproved as ap, type BlockMemberRequest as aq, type MemberBlocked as ar, type MemberSelfBlockForbiddenPayload as as, type OwnerMemberBlockForbiddenPayload as at, type ActiveSubscriptionMemberBlockForbiddenPayload as au, type DisconnectMemberRequest as av, type DeleteMemberRequest as aw, type DeleteMemberResponse as ax, type ContentReassignmentRequested as ay, type ContentDeletionRequested as az, type GetMyMemberResponse as b, type MetaSiteSpecialEvent as b0, type MetaSiteSpecialEventPayloadOneOf as b1, type Asset as b2, type SiteCreated as b3, type SiteTransferred as b4, type SiteDeleted as b5, type DeleteContext as b6, type SiteUndeleted as b7, type SitePublished as b8, type SiteUnpublished as b9, type SiteMarkedAsTemplate as ba, type SiteMarkedAsWixSite as bb, type ServiceProvisioned as bc, type ServiceRemoved as bd, type SiteRenamed as be, type SiteHardDeleted as bf, type NamespaceChanged as bg, type StudioAssigned as bh, type StudioUnassigned as bi, type SiteUrlChanged as bj, type SitePurgedExternally as bk, type MemberOwnershipTransferred as bl, type MemberIdChanged as bm, type MessageEnvelope as bn, type IdentificationData as bo, type IdentificationDataIdOneOf as bp, type BaseEventMetadata as bq, type EventMetadata as br, type MemberCreatedEnvelope as bs, type MemberDeletedEnvelope as bt, type MemberUpdatedEnvelope as bu, type MembersQueryResult as bv, type GetMemberOptions as c, type ListMembersOptions as d, type ListMembersResponse as e, type MembersQueryBuilder as f, type MuteMemberResponse as g, type UnmuteMemberResponse as h, type DeleteMyMemberOptions as i, type BulkDeleteMembersResponse as j, type BulkDeleteMembersByFilterOptions as k, type BulkDeleteMembersByFilterResponse as l, type BulkApproveMembersResponse as m, type BulkBlockMembersResponse as n, type UpdateMember as o, type DeleteMemberPhonesResponse as p, type DeleteMemberEmailsResponse as q, type DeleteMemberAddressesResponse as r, ActivityStatusStatus as s, Set as t, SortOrder as u, State as v, SiteCreatedContext as w, DeleteStatus as x, type Contact as y, type Address as z };
