import { HttpClient, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { U as UpdateMySlugResponse, a as UpdateMemberSlugResponse, J as JoinCommunityResponse, L as LeaveCommunityResponse, G as GetCurrentMemberOptions, b as GetMyMemberResponse, c as GetMemberOptions, M as Member, d as ListMembersOptions, e as ListMembersResponse, Q as QueryMembersOptions, f as MembersQueryBuilder, g as MuteMemberResponse, h as UnmuteMemberResponse, A as ApproveMemberResponse, B as BlockMemberResponse, D as DisconnectMemberResponse, i as DeleteMyMemberOptions, j as BulkDeleteMembersResponse, k as BulkDeleteMembersByFilterOptions, l as BulkDeleteMembersByFilterResponse, m as BulkApproveMembersResponse, n as BulkBlockMembersResponse, C as CreateMemberOptions, o as UpdateMember, p as DeleteMemberPhonesResponse, q as DeleteMemberEmailsResponse, r as DeleteMemberAddressesResponse } from './members-v1-member-members.universal-CzPn3y3P.js';
export { a$ as ActionEvent, au as ActiveSubscriptionMemberBlockForbiddenPayload, aB as ActiveSubscriptionMemberDeleteForbiddenPayload, s as ActivityStatusStatus, z as Address, E as AddressStreetOneOf, V as App, aG as ApplicationError, ao as ApproveMemberRequest, b2 as Asset, bq as BaseEventMetadata, aq as BlockMemberRequest, aI as BulkActionMetadata, aK as BulkApproveMembersRequest, aL as BulkBlockMembersRequest, aJ as BulkDeleteMembersByFilterRequest, aE as BulkDeleteMembersRequest, aH as BulkMemberResult, y as Contact, az as ContentDeletionRequested, ay as ContentReassignmentRequested, aM as CreateMemberRequest, aN as CreateMemberResponse, ac as CursorPaging, ae as CursorPagingMetadata, af as Cursors, H as CustomField, b6 as DeleteContext, aT as DeleteMemberAddressesRequest, aS as DeleteMemberEmailsRequest, aR as DeleteMemberPhonesRequest, aw as DeleteMemberRequest, ax as DeleteMemberResponse, aC as DeleteMyMemberRequest, aD as DeleteMyMemberResponse, x as DeleteStatus, av as DisconnectMemberRequest, aV as DomainEvent, aW as DomainEventBodyOneOf, aU as Empty, aX as EntityCreatedEvent, a_ as EntityDeletedEvent, aZ as EntityUpdatedEvent, br as EventMetadata, O as ExtendedFields, Z as File, a6 as GetMemberRequest, a7 as GetMemberResponse, a5 as GetMyMemberRequest, bo as IdentificationData, bp as IdentificationDataIdOneOf, K as Image, aQ as InvalidCustomFieldUrlPayload, R as InvalidateCache, T as InvalidateCacheGetByOneOf, aF as ItemMetadata, a1 as JoinCommunityRequest, a3 as LeaveCommunityRequest, a9 as ListMembersRequest, ap as MemberApproved, ar as MemberBlocked, bs as MemberCreatedEnvelope, bt as MemberDeletedEnvelope, bm as MemberIdChanged, a2 as MemberJoinedCommunity, a4 as MemberLeftCommunity, al as MemberMuted, bl as MemberOwnershipTransferred, as as MemberSelfBlockForbiddenPayload, a8 as MemberToMemberBlockedPayload, an as MemberUnmuted, bu as MemberUpdatedEnvelope, bv as MembersQueryResult, bn as MessageEnvelope, b0 as MetaSiteSpecialEvent, b1 as MetaSiteSpecialEventPayloadOneOf, ak as MuteMemberRequest, N as Namespace, bg as NamespaceChanged, at as OwnerMemberBlockForbiddenPayload, aA as OwnerOrContributorDeleteForbiddenPayload, X as Page, aa as Paging, ad as PagingMetadata, P as PrivacyStatusStatus, I as Profile, ah as Query, ag as QueryMembersRequest, aj as QueryMembersResponse, aY as RestoreInfo, ai as Search, bc as ServiceProvisioned, bd as ServiceRemoved, t as Set, b3 as SiteCreated, w as SiteCreatedContext, b5 as SiteDeleted, bf as SiteHardDeleted, ba as SiteMarkedAsTemplate, bb as SiteMarkedAsWixSite, b8 as SitePublished, bk as SitePurgedExternally, be as SiteRenamed, b4 as SiteTransferred, b7 as SiteUndeleted, b9 as SiteUnpublished, bj as SiteUrlChanged, $ as SlugAlreadyExistsPayload, u as SortOrder, ab as Sorting, v as State, S as Status, F as StreetAddress, bh as StudioAssigned, bi as StudioUnassigned, Y as URI, am as UnmuteMemberRequest, aO as UpdateMemberRequest, aP as UpdateMemberResponse, a0 as UpdateMemberSlugRequest, _ as UpdateMySlugRequest, W as WebhookIdentityType } from './members-v1-member-members.universal-CzPn3y3P.js';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';

declare function updateCurrentMemberSlug$1(httpClient: HttpClient): UpdateCurrentMemberSlugSignature;
interface UpdateCurrentMemberSlugSignature {
    /**
     * Updates the currently logged in member's slug.
     *
     * The `slug` is the end of a member's URL that refers to a specific logged-in member. For example, if a member's URL is `https://example.com/member/{my-member-slug}`, the slug is `my-member-slug`. The slug is case-sensitive and is generally derived from the member's `nickname`; otherwise, it's derived from the `loginEmail`.
     *
     * > **Note:**
     * > Only logged-in members can call this method without elevated permissions.
     * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.
     * @param - New slug.
     */
    (slug: string): Promise<UpdateMySlugResponse>;
}
declare function updateMemberSlug$1(httpClient: HttpClient): UpdateMemberSlugSignature;
interface UpdateMemberSlugSignature {
    /**
     * Updates a member's slug.
     * @param - Member ID.
     * @param - New slug.
     */
    (_id: string, slug: string): Promise<UpdateMemberSlugResponse>;
}
declare function joinCommunity$1(httpClient: HttpClient): JoinCommunitySignature;
interface JoinCommunitySignature {
    /**
     * Joins the current member to the site community and sets their profile to public.
     *
     * When a member's profile is public, they have access to the site's
     * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)
     * features, such as chat, forum, and followers,
     * and their profile is visible to other members and site visitors.
     *
     * > **Note:**
     * > Only logged-in members can call this method without elevated permissions.
     * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.
     * @returns Member profile.
     */
    (): Promise<JoinCommunityResponse>;
}
declare function leaveCommunity$1(httpClient: HttpClient): LeaveCommunitySignature;
interface LeaveCommunitySignature {
    /**
     * Removes the current member from the site community and sets their profile to private.
     *
     * When a member's profile is private,
     * they do not have access to the site's
     * [Members Area](https://support.wix.com/en/article/site-members-about-the-members-area)
     * features, such as chat, forum, and followers,
     * and their profile is hidden from other members and site visitors.
     *
     * > **Notes:**
     * > + If a member leaves the site's community, their content, such as forum posts and blog comments, remain publicly visible.
     *
     * > + Only logged-in members can call this method without elevated permissions.
     * > + To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.
     * @returns Member profile.
     */
    (): Promise<LeaveCommunityResponse>;
}
declare function getCurrentMember$1(httpClient: HttpClient): GetCurrentMemberSignature;
interface GetCurrentMemberSignature {
    /**
     * Retrieves the current member.
     *
     * >**Note:**
     * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).
     * @returns Member profile.
     */
    (options?: GetCurrentMemberOptions | undefined): Promise<GetMyMemberResponse>;
}
declare function getMember$1(httpClient: HttpClient): GetMemberSignature;
interface GetMemberSignature {
    /**
     * Retrieves a member by ID.
     *
     * >**Note:** The returned Member object contains only the fields that were explicitly added to the Member object. Custom Contact fields are **not** automatically added to the Member object. They must be [added to the Member object by the site owner](https://support.wix.com/en/article/site-members-customizing-your-member-profile-fields).
     *
     * @param - Member ID.
     * @param - Fieldset options.
     * @returns The requested member.
     */
    (_id: string, options?: GetMemberOptions | undefined): Promise<Member>;
}
declare function listMembers$1(httpClient: HttpClient): ListMembersSignature;
interface ListMembersSignature {
    /**
     * Lists site members, given the provided paging and fieldsets.
     * @param - Options for paging, sorting, and specifying fields to return.
     */
    (options?: ListMembersOptions | undefined): Promise<ListMembersResponse>;
}
declare function queryMembers$1(httpClient: HttpClient): QueryMembersSignature;
interface QueryMembersSignature {
    /**
     * Retrieves a list of up to 100 members, given the specified filters, fieldsets, sorting and paging, and returns a `MembersQueryBuilder` object.
     *
     * The returned object contains the query definition which is typically used to run the query using the `find()` method.
     *
     * You can refine the query by chaining `MembersQueryBuilder` methods onto the query. `MembersQueryBuilder` methods enable you to sort, filter, and control the results that `queryMembers()` returns. The methods that are chained to `queryMembers()` are applied in the order they are called.
     *
     * `queryMembers()` runs with the following `MembersQueryBuilder` defaults that you can override:
     * - `skip`: `0`
     * - `limit`: `50`
     *
     * Currently supported fields for sorting:
     * - `profile.nickname`
     * - `contact.firstName`
     * - `contact.lastName`
     * - `createdDate`
     * - `lastLoginDate`
     *
     * The following `MembersQueryBuilder` methods are supported for the `queryMembers()` method. For a full description of the Locations object, see the returned for the `items` property in `MembersQueryResult`.
     * @param - Query options.
     */
    (options?: QueryMembersOptions | undefined): MembersQueryBuilder;
}
declare function muteMember$1(httpClient: HttpClient): MuteMemberSignature;
interface MuteMemberSignature {
    /**
     * Mutes a member.
     *
     * Muted members can't engage with a community. For example, they can't leave comments, like posts or comments, or share content.
     *
     * You can mute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).
     * @param - ID of the member to mute.
     */
    (_id: string): Promise<MuteMemberResponse>;
}
declare function unmuteMember$1(httpClient: HttpClient): UnmuteMemberSignature;
interface UnmuteMemberSignature {
    /**
     * Unmutes a member.
     *
     * Unmuted members can engage with the community. For example, leave comments, like posts or comments, and share content.
     *
     * You can unmute members in [Wix Blog](https://dev.wix.com/docs/rest/business-solutions/blog/introduction) and [Wix Forum](https://dev.wix.com/docs/rest/business-solutions/forum/introduction).
     * @param - ID of the member to unmute.
     */
    (_id: string): Promise<UnmuteMemberResponse>;
}
declare function approveMember$1(httpClient: HttpClient): ApproveMemberSignature;
interface ApproveMemberSignature {
    /**
     * Changes member status to `"APPROVED"` and gives access to members-only pages.
     *
     * Call this API to:
     * - Approve a pending member.
     * - Unblock a blocked member.
     * @param - ID of the member to approve.
     */
    (_id: string): Promise<ApproveMemberResponse>;
}
declare function blockMember$1(httpClient: HttpClient): BlockMemberSignature;
interface BlockMemberSignature {
    /**
     * Blocks a member.
     *
     * A blocked member can't log in to members-only pages.
     *
     * To unblock a member, call Approve Member.
     * @param - ID of a member to block.
     */
    (_id: string): Promise<BlockMemberResponse>;
}
declare function disconnectMember$1(httpClient: HttpClient): DisconnectMemberSignature;
interface DisconnectMemberSignature {
    /**
     * Disconnects a member.
     *
     * A disconnected member can't log in to members-only pages, and the member isn't visible in the dashboard.
     *
     * >**Note:** This action is irreversible. To connect the same member again, you have to create a member with a new slug.
     * @param - ID of a member to disconnect.
     */
    (_id: string): Promise<DisconnectMemberResponse>;
}
declare function deleteMember$1(httpClient: HttpClient): DeleteMemberSignature;
interface DeleteMemberSignature {
    /**
     * Deletes a member by ID.
     *
     * All content created by this member is transferred to a site owner's account. For example, if a Wix user had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.
     * @param - ID of a member to delete.
     */
    (_id: string): Promise<void>;
}
declare function deleteMyMember$1(httpClient: HttpClient): DeleteMyMemberSignature;
interface DeleteMyMemberSignature {
    /**
     * Deletes the current member.
     *
     * After calling this method, the member is logged out of the site.
     *
     * All content created by this member is transferred to another account. For example, if a Wix user had blog posts, those posts are transferred to the account specified in `contentAssignedId`, which then becomes the owner of those posts.
     *
     * >**Note:**
     * >This method requires [visitor or member authentication](https://dev.wix.com/docs/build-apps/develop-your-app/access/about-identities).
     */
    (options?: DeleteMyMemberOptions | undefined): Promise<void>;
}
declare function bulkDeleteMembers$1(httpClient: HttpClient): BulkDeleteMembersSignature;
interface BulkDeleteMembersSignature {
    /**
     * Deletes multiple members by `memberId`.
     *
     * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.
     * @param - IDs of members to be deleted.
     */
    (memberIds: string[]): Promise<BulkDeleteMembersResponse>;
}
declare function bulkDeleteMembersByFilter$1(httpClient: HttpClient): BulkDeleteMembersByFilterSignature;
interface BulkDeleteMembersByFilterSignature {
    /**
     * Deletes multiple members by the specified filter.
     *
     * All content created by these members is transferred to a site owner's account. For example, if Wix users had blog posts, those posts are transferred to the site owner's account, which then becomes the owner of those posts.
     * @param - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.
     */
    (filter: any, options?: BulkDeleteMembersByFilterOptions | undefined): Promise<BulkDeleteMembersByFilterResponse>;
}
declare function bulkApproveMembers$1(httpClient: HttpClient): BulkApproveMembersSignature;
interface BulkApproveMembersSignature {
    /**
     * Changes status of multiple members to `"APPROVED"`, and gives access to members-only pages.
     *
     * Call this API to:
     * - Approve pending members.
     * - Unblock blocked members.
     * @param - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.
     */
    (filter: any): Promise<BulkApproveMembersResponse>;
}
declare function bulkBlockMembers$1(httpClient: HttpClient): BulkBlockMembersSignature;
interface BulkBlockMembersSignature {
    /**
     * Blocks multiple members by a specified filter.
     *
     * Blocked members can't log in to members-only pages.
     *
     * To unblock multiple members, call Bulk Approve Members.
     * @param - Query options. See API Query Language ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/api-query-language) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language)) for more details.
     */
    (filter: any): Promise<BulkBlockMembersResponse>;
}
declare function createMember$1(httpClient: HttpClient): CreateMemberSignature;
interface CreateMemberSignature {
    /**
     * Creates a site member.
     *
     * After creation, you can call
     * [Send Set Password Email ([SDK](https://dev.wix.com/docs/sdk/backend-modules/members/authentication/send-set-password-email) | [REST](https://dev.wix.com/docs/rest/crm/members-contacts/members/member-authentication/send-set-password-email))
     * to email the member with a link to set their password.
     * The member can log in to the site
     * when they set their password for the first time.
     *
     * > **Note:**
     * > When creating multiple members,
     * > set your requests at least 1 second apart to keep below rate limits.
     * @returns New member.
     */
    (options?: CreateMemberOptions | undefined): Promise<Member>;
}
declare function updateMember$1(httpClient: HttpClient): UpdateMemberSignature;
interface UpdateMemberSignature {
    /**
     * Updates a member's properties.
     *
     * Only the requested fields are updated.
     * To clear a field's value, set an empty value with an empty string `""`.
     *
     * > **Note:**
     * > Updating the `contact.addresses`, `contact.emails`, or `contact.phones` array overwrites the entire array, so any existing values you want to retain must be passed in the `updateMember()` call along with the new values to add.
     * > However, passing an empty array will have no effect, and these methods must be used to clear all data from the respective array:
     * >- To clear `contact.addresses`, use `deleteMemberAddresses()`.
     * >- To clear `contact.emails`, use `deleteMemberEmails()`.
     * >- To clear `contact.phones`, use `deleteMemberPhones()`.
     *
     * > **Note:**
     * > Only logged-in members can call this method without elevated permissions.
     * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.
     * @param - Member ID.
     * @param - Member to update.
     * @returns Updated member.
     */
    (_id: string, member: UpdateMember): Promise<Member>;
}
declare function deleteMemberPhones$1(httpClient: HttpClient): DeleteMemberPhonesSignature;
interface DeleteMemberPhonesSignature {
    /**
     * Clears a member's phone numbers.
     *
     * `deleteMemberPhones()` clears the `phones` array under the `contact` property.
     *
     * > **Note:**
     * > Only logged-in members can call this method without elevated permissions.
     * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.
     * @param - ID of the member whose phone numbers will be deleted.
     */
    (_id: string): Promise<DeleteMemberPhonesResponse>;
}
declare function deleteMemberEmails$1(httpClient: HttpClient): DeleteMemberEmailsSignature;
interface DeleteMemberEmailsSignature {
    /**
     * Clears a member's email addresses.
     *
     * `deleteMemberEmails()` clears the `emails` array under the `contact` property.
     *
     * > **Notes:**
     * > A member can still log in with their `loginEmail`,
     * > which is not cleared when this method is called.
     *
     * > Only logged-in members can call this method without elevated permissions.
     * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.
     * @param - ID of the member whose email addresses will be deleted.
     */
    (_id: string): Promise<DeleteMemberEmailsResponse>;
}
declare function deleteMemberAddresses$1(httpClient: HttpClient): DeleteMemberAddressesSignature;
interface DeleteMemberAddressesSignature {
    /**
     * Deletes a member's street addresses.
     *
     * `deleteMemberAddresses()` clears the `addresses` array under the `contact` property.
     *
     * > **Note:**
     * > Only logged-in members can call this method without elevated permissions.
     * > To call this method as a different identity, [elevated permissions](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/about-elevated-permissions) are required.
     * @param - ID of the member whose street addresses will be deleted.
     */
    (_id: string): Promise<DeleteMemberAddressesResponse>;
}

declare const updateCurrentMemberSlug: MaybeContext<BuildRESTFunction<typeof updateCurrentMemberSlug$1> & typeof updateCurrentMemberSlug$1>;
declare const updateMemberSlug: MaybeContext<BuildRESTFunction<typeof updateMemberSlug$1> & typeof updateMemberSlug$1>;
declare const joinCommunity: MaybeContext<BuildRESTFunction<typeof joinCommunity$1> & typeof joinCommunity$1>;
declare const leaveCommunity: MaybeContext<BuildRESTFunction<typeof leaveCommunity$1> & typeof leaveCommunity$1>;
declare const getCurrentMember: MaybeContext<BuildRESTFunction<typeof getCurrentMember$1> & typeof getCurrentMember$1>;
declare const getMember: MaybeContext<BuildRESTFunction<typeof getMember$1> & typeof getMember$1>;
declare const listMembers: MaybeContext<BuildRESTFunction<typeof listMembers$1> & typeof listMembers$1>;
declare const queryMembers: MaybeContext<BuildRESTFunction<typeof queryMembers$1> & typeof queryMembers$1>;
declare const muteMember: MaybeContext<BuildRESTFunction<typeof muteMember$1> & typeof muteMember$1>;
declare const unmuteMember: MaybeContext<BuildRESTFunction<typeof unmuteMember$1> & typeof unmuteMember$1>;
declare const approveMember: MaybeContext<BuildRESTFunction<typeof approveMember$1> & typeof approveMember$1>;
declare const blockMember: MaybeContext<BuildRESTFunction<typeof blockMember$1> & typeof blockMember$1>;
declare const disconnectMember: MaybeContext<BuildRESTFunction<typeof disconnectMember$1> & typeof disconnectMember$1>;
declare const deleteMember: MaybeContext<BuildRESTFunction<typeof deleteMember$1> & typeof deleteMember$1>;
declare const deleteMyMember: MaybeContext<BuildRESTFunction<typeof deleteMyMember$1> & typeof deleteMyMember$1>;
declare const bulkDeleteMembers: MaybeContext<BuildRESTFunction<typeof bulkDeleteMembers$1> & typeof bulkDeleteMembers$1>;
declare const bulkDeleteMembersByFilter: MaybeContext<BuildRESTFunction<typeof bulkDeleteMembersByFilter$1> & typeof bulkDeleteMembersByFilter$1>;
declare const bulkApproveMembers: MaybeContext<BuildRESTFunction<typeof bulkApproveMembers$1> & typeof bulkApproveMembers$1>;
declare const bulkBlockMembers: MaybeContext<BuildRESTFunction<typeof bulkBlockMembers$1> & typeof bulkBlockMembers$1>;
declare const createMember: MaybeContext<BuildRESTFunction<typeof createMember$1> & typeof createMember$1>;
declare const updateMember: MaybeContext<BuildRESTFunction<typeof updateMember$1> & typeof updateMember$1>;
declare const deleteMemberPhones: MaybeContext<BuildRESTFunction<typeof deleteMemberPhones$1> & typeof deleteMemberPhones$1>;
declare const deleteMemberEmails: MaybeContext<BuildRESTFunction<typeof deleteMemberEmails$1> & typeof deleteMemberEmails$1>;
declare const deleteMemberAddresses: MaybeContext<BuildRESTFunction<typeof deleteMemberAddresses$1> & typeof deleteMemberAddresses$1>;
/**
 * Triggered when a member is created.
 *
 * The site owner can configure the site to automatically approve members or require manual approval.
 *
 * A member who has been approved either automatically or manually has a `status` of `"APPROVED"`. A created member waiting for approval has a `status` of `"PENDING"`. A `"PENDING"` member can't log in to the site.
 */
declare const onMemberCreated: ReturnType<typeof createEventModule<typeof publicOnMemberCreated>>;
/**
 * Triggered when a member is deleted.
 */
declare const onMemberDeleted: ReturnType<typeof createEventModule<typeof publicOnMemberDeleted>>;
/** */
declare const onMemberUpdated: ReturnType<typeof createEventModule<typeof publicOnMemberUpdated>>;

export { ApproveMemberResponse, BlockMemberResponse, BulkApproveMembersResponse, BulkBlockMembersResponse, BulkDeleteMembersByFilterOptions, BulkDeleteMembersByFilterResponse, BulkDeleteMembersResponse, CreateMemberOptions, DeleteMemberAddressesResponse, DeleteMemberEmailsResponse, DeleteMemberPhonesResponse, DeleteMyMemberOptions, DisconnectMemberResponse, GetCurrentMemberOptions, GetMemberOptions, GetMyMemberResponse, JoinCommunityResponse, LeaveCommunityResponse, ListMembersOptions, ListMembersResponse, Member, MembersQueryBuilder, MuteMemberResponse, QueryMembersOptions, UnmuteMemberResponse, UpdateMember, UpdateMemberSlugResponse, UpdateMySlugResponse, approveMember, blockMember, bulkApproveMembers, bulkBlockMembers, bulkDeleteMembers, bulkDeleteMembersByFilter, createMember, deleteMember, deleteMemberAddresses, deleteMemberEmails, deleteMemberPhones, deleteMyMember, disconnectMember, getCurrentMember, getMember, joinCommunity, leaveCommunity, listMembers, muteMember, onMemberCreated, onMemberDeleted, onMemberUpdated, queryMembers, unmuteMember, updateCurrentMemberSlug, updateMember, updateMemberSlug };
