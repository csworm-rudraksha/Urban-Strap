import { NonNullablePaths } from '@wix/sdk-types';
/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated orderâ€™s line item subtotal.
 */
export interface Tip {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Subtotal of all line items from the eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object))
     * that's related to the tip. In the response of
     * Preview Tip, there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     * @maxSize 50
     */
    distributions?: TipDistribution[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0, maxScale:2 }
     */
    undistributedAmount?: string | null;
}
export interface TipDistribution {
    /**
     * ID of the tip distribution.
     * @readonly
     * @format GUID
     */
    _id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     * @format GUID
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     * Max: 10 `lineItemInfo` objects
     * @maxSize 10
     */
    lineItemInfo?: LineItemInfo[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * transaction ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/order-transactions/setup) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order-transactions/order-transactions-object))
     * has been created.
     */
    transaction?: Transaction;
    /**
     * ID of the eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object))
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     * @format GUID
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    _createdDate?: Date | null;
    /** Information about who created the tip distributions. */
    source?: Source;
}
export interface CommonIdentificationData extends CommonIdentificationDataIdOneOf {
    /**
     * ID of a site visitor who hasn't logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor who has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /**
     * ID of the contact in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     * See the Contacts API for additional details.
     * @format GUID
     */
    contactId?: string | null;
}
/** @oneof */
export interface CommonIdentificationDataIdOneOf {
    /**
     * ID of a site visitor who hasn't logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor who has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface Staff {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * Bookings staff member,
     * or the contact's
     * `info.name` if not. See the Bookings Staff Members API and the Contacts API for additional details.
     *
     * Max: 500 characters
     * @maxLength 500
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the staff member ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object)).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     * @format GUID
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * contact on the Wix site. See the Contacts API for additional details.
     *
     * Note that not all site collaborators qualify as
     * staff members ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object)).
     */
    identificationData?: CommonIdentificationData;
}
export interface LineItemInfo {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character <br/>
     * Max: 100 characters
     * @minLength 1
     * @maxLength 100
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for Stores ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores)).
     * + `service.name` for Bookings ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings)).
     *
     * Min: 1 character  <br/>
     * Max: 200 characters
     * @minLength 1
     * @maxLength 200
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1` <br/>
     * Max: `100000` (one hundred thousand)
     * @min 1
     * @max 100000
     */
    quantity?: number | null;
}
export interface CatalogReference {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.name` for Stores ([SDK](https://dev.wix.com/docs/sdk/backend-modules/stores/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores)).
     * + `service.name` for Bookings ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings)).
     * @format GUID
     */
    catalogItemId?: string | null;
    /**
     * ID of the app ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/apps-created-by-wix) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/apps-created-by-wix))
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     * @format GUID
     */
    appId?: string | null;
}
export interface Transaction {
    /**
     * ID of the transaction that's associated with the tip distribution.
     * @format GUID
     */
    _id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
export declare enum Source {
    /** There is no information about who created the tip distributions. */
    UNKNOWN_SOURCE = "UNKNOWN_SOURCE",
    /** The customer added the tip distributions via an external payment terminal. */
    POS = "POS",
    /** The customer added the tip distributions during an online eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)). */
    WEB = "WEB",
    /** The business added the tip distributions on behalf of the customer in the site's dashboard. */
    DASHBOARD = "DASHBOARD"
}
export interface PreviewTipRequest {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     * @minSize 1
     * @maxSize 50
     */
    lineItemInfo: LineItemInfo[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     * @format GUID
     */
    tipSettingsId?: string | null;
}
export interface TipChoice {
    /**
     * Value of the tip choice.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    value?: string | null;
    /** Type of the tip choice. */
    tipType?: TipType;
}
export declare enum TipType {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
export interface PreviewTipResponse {
    /** Tip. */
    tip?: Tip;
}
export interface GetTipByOrderIdRequest {
    /**
     * ID of the order to retrieve the tip for.
     * @format GUID
     */
    orderId: string | null;
}
export interface GetTipByOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
export interface GetTipByDraftOrderIdRequest {
    /**
     * ID of the draft order to retrieve the tip for.
     * @format GUID
     */
    draftOrderId: string | null;
}
export interface GetTipByDraftOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
export interface GetTipChoiceRequest {
    /**
     * ID of the purchase flow that's associated with the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId: string | null;
}
export interface GetTipChoiceResponse {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice;
}
export interface UpdateTipChoiceRequest {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice;
    /**
     * ID of the purchase flow that's associated with the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     *
     * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId: string | null;
}
export interface UpdateTipChoiceResponse {
    /**
     * Tip choice currently selected in the
     * eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction))
     * for the given purchase flow.
     */
    tipChoice?: TipChoice;
}
export interface SetTipOnOrderRequest extends SetTipOnOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
export interface SetTipOnOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
}
export interface SetTipOnOrderResponse {
    /** Set tip. */
    tip?: Tip;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo;
}
export interface OrderInfo extends OrderInfoIdentifierOneOf {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * ID of the order's additional fee that's associated with the tip.
     * @format GUID
     */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price;
}
/** @oneof */
export interface OrderInfoIdentifierOneOf {
    /**
     * Order ID.
     * @format GUID
     */
    orderId?: string | null;
}
export interface Price {
    /**
     * Amount of the additional fee that's associated with the tip.
     * @decimalValue options { gte:0, lte:1000000000000000, maxScale:2 }
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     * @maxLength 100
     */
    formattedAmount?: string;
}
export interface RemoveTipFromOrderRequest extends RemoveTipFromOrderRequestIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/** @oneof */
export interface RemoveTipFromOrderRequestIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
export interface RemoveTipFromOrderResponse {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo;
}
export interface CreateTipDistributionsRequest {
    /**
     * Tip distributions to create.
     *
     * Min: 1 distribution <br/>
     * Max: 50 distributions
     * @minSize 1
     * @maxSize 50
     */
    tipDistributions?: TipDistribution[];
    /**
     * ID of the tip for which to create distributions.
     * @format GUID
     */
    tipId?: string | null;
}
export interface CreateTipDistributionsResponse {
    /**
     * ID of the tip for which the distributions were created.
     * @format GUID
     * @readonly
     */
    tipId?: string | null;
    /** Created tip distributions. */
    tipDistributions?: TipDistribution[];
}
export interface DeleteTipDistributionsRequest extends DeleteTipDistributionsRequestDeleteByOneOf {
    /**
     * ID of the tip for which to delete all associated tip distributions.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * ID of the order for which to delete all associated tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
/** @oneof */
export interface DeleteTipDistributionsRequestDeleteByOneOf {
    /**
     * ID of the tip for which to delete all associated tip distributions.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * ID of the order for which to delete all associated tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
export interface DeleteTipDistributionsResponse {
}
export interface AddTipDistributionsToOrderRequest extends AddTipDistributionsToOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * Tip distributions to add to the order.
     * @minSize 1
     * @maxSize 50
     */
    tipDistributions: TipDistribution[];
}
/** @oneof */
export interface AddTipDistributionsToOrderRequestIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
export interface AddTipDistributionsToOrderResponse {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo;
}
export interface QueryTipDistributionsRequest {
    /** WQL expression. */
    query: CursorQuery;
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 4
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 50
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /**
     * Number of items to load.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
export interface QueryTipDistributionsResponse {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /**
     * Cursor pointing to next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface SumTipDistributionAmountsRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
export interface SumTipDistributionAmountsResponse {
    /**
     * Total amount of tip distributions matching the filter.
     * @format DECIMAL_VALUE
     * @decimalValue options { gte:0, maxScale:2 }
     */
    totalAmount?: string | null;
}
export interface ApplyTipDistributionsRequest {
    /**
     * ID of the tip for which all tip distributions are applied to the order.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * ID of the order for which to apply all tip distributions.
     * @format GUID
     */
    orderId?: string | null;
    /** Whether to query by order ID or tip ID. */
    queryBy?: QueryBy;
}
export declare enum QueryBy {
    UNKNOWN_QUERY_BY = "UNKNOWN_QUERY_BY",
    ORDER = "ORDER",
    TIP = "TIP"
}
export interface ApplyTipDistributionsResponse {
    /** Applied tip distributions. */
    tipDistributions?: TipDistribution[];
}
export interface PublishTipDistributionsCreatedEventRequest {
    /**
     * The tip distributions that will be published on the event.
     * @maxSize 100
     */
    tipDistributions?: TipDistribution[];
    /**
     * The tip ID of the distributions
     * @format GUID
     */
    tipId?: string | null;
    /**
     * The order ID that the tip is connected to
     * @format GUID
     */
    orderId?: string | null;
}
export interface PublishTipDistributionsCreatedEventResponse {
}
export interface TipDistributionsCreated {
    /**
     * ID of the tip to which the distribution belongs.
     * @format GUID
     */
    tipId?: string | null;
    /**
     * Created tip distributions.
     *
     * Min: 1 tip distribution
     * Max: 100 tip distributions
     * @maxSize 100
     */
    tipDistributions?: TipDistribution[];
    /**
     * The order ID that the tip is connected to.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * The undistributed tip amount.
     * @format DECIMAL_VALUE
     * @decimalValue options { gt:0, maxScale:2 }
     */
    undistributedAmount?: string | null;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
type TipNonNullablePaths = `distributions` | `distributions.${number}.staff.identificationData.anonymousVisitorId` | `distributions.${number}.staff.identificationData.memberId` | `distributions.${number}.staff.identificationData.wixUserId` | `distributions.${number}.staff.identificationData.appId` | `distributions.${number}.source`;
/**
 * Previews a tip for a list of line items.
 *
 *
 * If you provide the Wix Bookings app ID ([SDK](https://dev.wix.com/docs/sdk/articles/work-with-the-sdk/apps-created-by-wix) | [REST](https://dev.wix.com/docs/rest/articles/getting-started/apps-created-by-wix))
 * as `lineItemInfo.catalogReference.appId`, the response includes tip
 * distributions for each associated
 * Bookings staff member ([SDK](https://dev.wix.com/docs/sdk/backend-modules/bookings/staff-members/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object)).
 *
 * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
 * based on the site's default tip settings.
 * @param lineItemInfo - Information about the line items to preview the tip for.
 *
 * Min: 1 line item
 * Max: 50 line items
 * @public
 * @documentationMaturity preview
 * @requiredField lineItemInfo
 * @requiredField lineItemInfo.catalogReference.appId
 * @requiredField lineItemInfo.catalogReference.catalogItemId
 * @requiredField lineItemInfo.price
 * @requiredField options.tipChoice
 * @requiredField options.tipChoice.tipType
 * @requiredField options.tipChoice.value
 * @param options - Options to use when previewing a tip.
 * @permissionId WIX_TIPS.TIP_PREVIEW
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.PreviewTip
 */
export declare function previewTip(lineItemInfo: NonNullablePaths<LineItemInfo, `catalogReference.appId` | `catalogReference.catalogItemId` | `price`>[], options?: NonNullablePaths<PreviewTipOptions, `tipChoice` | `tipChoice.tipType` | `tipChoice.value`>): Promise<NonNullablePaths<PreviewTipResponse, {
    [P in TipNonNullablePaths]: `tip.${P}`;
}[TipNonNullablePaths]>>;
export interface PreviewTipOptions {
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     * @format GUID
     */
    tipSettingsId?: string | null;
}
/**
 * Retrieves the tip that's associated with an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 * @param orderId - ID of the order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField orderId
 * @permissionId WIX_TIPS.TIP_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.GetTipByOrderId
 */
export declare function getTipByOrderId(orderId: string): Promise<NonNullablePaths<GetTipByOrderIdResponse, {
    [P in TipNonNullablePaths]: `tip.${P}`;
}[TipNonNullablePaths]>>;
/**
 * Retrieves the tip that's associated with an eCommerce draft order.
 *
 *
 * <blockquote class="important">
 *
 * __Important:__
 * The eCommerce Draft Orders API is currently under development and not yet available to users.
 *
 * </blockquote>
 * @param draftOrderId - ID of the draft order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId WIX_TIPS.TIP_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.GetTipByDraftOrderId
 */
export declare function getTipByDraftOrderId(draftOrderId: string): Promise<NonNullablePaths<GetTipByDraftOrderIdResponse, {
    [P in TipNonNullablePaths]: `tip.${P}`;
}[TipNonNullablePaths]>>;
/**
 * Retrieves the tip choice that's currently selected by the customer for a specific eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)).
 * If the customer hasn't yet selected a tip choice, the response is empty.
 *
 * Please refer to the Sample Flows for more information.
 * @param purchaseFlowId - ID of the purchase flow that's associated with the
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
 * @public
 * @documentationMaturity preview
 * @requiredField purchaseFlowId
 * @permissionId WIX_TIPS.TIP_GET_CHOICE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.tips.tip.v1.TipsService.GetTipChoice
 */
export declare function getTipChoice(purchaseFlowId: string): Promise<NonNullablePaths<GetTipChoiceResponse, `tipChoice.tipType`>>;
/**
 * Updates the tip choice that's currently selected by the customer for a specific eCommerce checkout ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)).
 *
 * Please refer to the Sample Flows for more information.
 * @param tipChoice - Tip choice to select for the purchase flow. The call fails if you provide a
 * value for `tipChoice.tipType` that doesn't match the relevant tip settings
 * configuration. For example:
 * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
 * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
 * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.purchaseFlowId
 * @requiredField tipChoice
 * @param options - Options to use when updating a tip choice.
 * @permissionId WIX_TIPS.TIP_UPDATE_CHOICE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.tips.tip.v1.TipsService.UpdateTipChoice
 */
export declare function updateTipChoice(tipChoice: TipChoice, options: NonNullablePaths<UpdateTipChoiceOptions, `purchaseFlowId`>): Promise<NonNullablePaths<UpdateTipChoiceResponse, `tipChoice.tipType`>>;
export interface UpdateTipChoiceOptions {
    /**
     * ID of the purchase flow that's associated with the
     * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
     *
     *
     * The purchase flow ID is a persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @format GUID
     */
    purchaseFlowId: string | null;
}
/**
 * Creates or updates a tip on an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added. If a tip is already
 * present, the existing `additionalFee` is replaced.
 *
 * If you specify `tip.distributions.transaction`, that distribution
 * amount can't be changed in the future. Then, you also can't remove any of the
 * other distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + The total tip amount is zero or negative.
 * + The sum of all tip distribution amounts and `undistributedAmount` doesn't match the total tip amount.
 * + You omit `tip.distributions` with an existing `transaction`.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.identifier
 * @requiredField options.tip
 * @requiredField options.tip.distributions.transaction._id
 * @requiredField options.tip.distributions.transaction.date
 * @param options - Options to use when setting a tip on an order.
 * @permissionId WIX_TIPS.TIP_SET
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.SetTipOnOrder
 */
export declare function setTipOnOrder(options: NonNullablePaths<SetTipOnOrderOptions, `tip` | `tip.distributions.${number}.transaction._id` | `tip.distributions.${number}.transaction.date`>): Promise<NonNullablePaths<SetTipOnOrderResponse, {
    [P in TipNonNullablePaths]: `tip.${P}`;
}[TipNonNullablePaths] | `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`>>;
export interface SetTipOnOrderOptions extends SetTipOnOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
export interface SetTipOnOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to set the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/**
 * Removes a tip from an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 *
 * If no tip exists on the order, the call succeeds and the response contains an
 * empty `OrderInfo` object.
 *
 * The call fails if the customer has already been charged for at least one of
 * the associated tip distributions.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.identifier
 * @param options - Options to use when removing a tip from an order.
 * @permissionId WIX_TIPS.TIP_REMOVE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.RemoveTipFromOrder
 */
export declare function removeTipFromOrder(options: RemoveTipFromOrderOptions): Promise<NonNullablePaths<RemoveTipFromOrderResponse, `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`>>;
export interface RemoveTipFromOrderOptions extends RemoveTipFromOrderOptionsIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/** @oneof */
export interface RemoveTipFromOrderOptionsIdentifierOneOf {
    /**
     * ID of the order from which to remove the tip.
     * @format GUID
     */
    orderId?: string | null;
}
/**
 * Adds tip distributions to an
 * eCommerce order ([SDK](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/introduction) | [REST](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added and the total tip
 * amount is equal to the sum of all distribution amounts. If a tip is already
 * present, the existing `additionalFee` is replaced and the total tip amount is
 * increased by the sum of the new tip distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + Any of the tip distribution amounts is zero or negative.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.identifier
 * @requiredField options.tipDistributions
 * @requiredField options.tipDistributions.transaction._id
 * @requiredField options.tipDistributions.transaction.date
 * @param options - Options to use when adding tip distributions to an order.
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_ADD
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.AddTipDistributionsToOrder
 */
export declare function addTipDistributionsToOrder(options: NonNullablePaths<AddTipDistributionsToOrderOptions, `tipDistributions` | `tipDistributions.${number}.transaction._id` | `tipDistributions.${number}.transaction.date`>): Promise<NonNullablePaths<AddTipDistributionsToOrderResponse, `tipDistributions` | `tipDistributions.${number}.staff.identificationData.anonymousVisitorId` | `tipDistributions.${number}.staff.identificationData.memberId` | `tipDistributions.${number}.staff.identificationData.wixUserId` | `tipDistributions.${number}.staff.identificationData.appId` | `tipDistributions.${number}.source` | `orderInfo.additionalFeePrice.amount` | `orderInfo.additionalFeePrice.formattedAmount`>>;
export interface AddTipDistributionsToOrderOptions extends AddTipDistributionsToOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
    /**
     * Tip distributions to add to the order.
     * @minSize 1
     * @maxSize 50
     */
    tipDistributions: TipDistribution[];
}
/** @oneof */
export interface AddTipDistributionsToOrderOptionsIdentifierOneOf {
    /**
     * ID of the order for which to add tip distributions.
     * @format GUID
     */
    orderId?: string | null;
}
/**
 * Creates a query to retrieve a list of tip distributions.
 *
 * The `queryTipDistributions()` function builds a query to retrieve a list of tip distributions and returns a `TipDistributionsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-builder/find) function.
 *
 * You can refine the query by chaining `TipDistributionsQueryBuilder` functions onto the query. `TipDistributionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTipDistributions()` returns.
 *
 * `queryTipDistributions()` runs with the following `TipDistributionsQueryBuilder` default that you can override:
 *
 * + `limit` is `50`
 *
 * The functions that are chained to `queryTipDistributions()` are applied in the order they are called. For example, if you apply `ascending("transaction.transactionDate")` and then `ascending("staff.id")`, the results are sorted first by the `"transaction.transactionDate"`, and then, if there are multiple results with the same `"transaction.transactionDate"`, the items are sorted by `"staff.id"`.
 *
 * When setting a date filter remember to use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * The following `TipDistributionsQueryBuilder` functions are supported for the `queryTipDistributions()` function. For a full description of the tip distributions object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-result/items) property in `TipDistributionsQueryResult`.
 *
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.QueryTipDistributions
 */
export declare function queryTipDistributions(): TipDistributionsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface TipDistributionsQueryResult extends QueryCursorResult {
    items: TipDistribution[];
    query: TipDistributionsQueryBuilder;
    next: () => Promise<TipDistributionsQueryResult>;
    prev: () => Promise<TipDistributionsQueryResult>;
}
export interface TipDistributionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id', value: string) => TipDistributionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id', value: any[]) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id', value: any) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id', value: boolean) => TipDistributionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id'>) => TipDistributionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id'>) => TipDistributionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => TipDistributionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => TipDistributionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<TipDistributionsQueryResult>;
}
/**
 * Sums tip distribution amounts, given the provided filtering.
 * @param filter - Filter object in the following format:
 * `"filter" : {
 * "fieldName1": "value1",
 * "fieldName2":{"$operator":"value2"}
 * }`
 * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.SumTipDistributionAmounts
 */
export declare function sumTipDistributionAmounts(filter: Record<string, any>): Promise<SumTipDistributionAmountsResponse>;
export {};
