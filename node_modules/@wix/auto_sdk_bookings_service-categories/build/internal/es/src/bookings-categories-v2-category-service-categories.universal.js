import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixBookingsCategoriesV2Category from './bookings-categories-v2-category-service-categories.http.js';
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var Position;
(function (Position) {
    Position["UNKNOWN_POSITION"] = "UNKNOWN_POSITION";
    /** Last position in the list */
    Position["LAST"] = "LAST";
    /** First position in the list */
    Position["FIRST"] = "FIRST";
    /** After another category */
    Position["AFTER_CATEGORY"] = "AFTER_CATEGORY";
})(Position || (Position = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a Category.
 *
 *
 * The request body must include category name.
 * @param category - Category to be created.
 * @public
 * @requiredField category
 * @requiredField category.name
 * @permissionId BOOKINGS.CATEGORY_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns The created Category.
 * @fqn wix.bookings.categories.v2.CategoriesService.CreateCategory
 */
export async function createCategory(category) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ category: category });
    const reqOpts = ambassadorWixBookingsCategoriesV2Category.createCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.category;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { category: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['category']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a Category.
 * @param categoryId - ID of the Category to retrieve.
 * @public
 * @requiredField categoryId
 * @permissionId BOOKINGS.CATEGORY_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested Category.
 * @fqn wix.bookings.categories.v2.CategoriesService.GetCategory
 */
export async function getCategory(categoryId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        categoryId: categoryId,
    });
    const reqOpts = ambassadorWixBookingsCategoriesV2Category.getCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.category;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { categoryId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['categoryId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a Category.
 *
 *
 * Each time the Category is updated,
 * `revision` increments by 1.
 * The current `revision` must be passed when updating the Category.
 * This ensures you're working with the latest Category
 * and prevents unintended overwrites.
 * @param _id - Category ID.
 * @public
 * @requiredField _id
 * @requiredField category
 * @requiredField category.revision
 * @permissionId BOOKINGS.CATEGORY_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated Category.
 * @fqn wix.bookings.categories.v2.CategoriesService.UpdateCategory
 */
export async function updateCategory(_id, category) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        category: { ...category, id: _id },
    });
    const reqOpts = ambassadorWixBookingsCategoriesV2Category.updateCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.category;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { category: '$[1]' },
            explicitPathsToArguments: { 'category.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'category']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a Category.
 *
 *
 * Deleting a Category permanently removes them from the Category List.
 * @param categoryId - Id of the Category to delete.
 * @public
 * @requiredField categoryId
 * @permissionId BOOKINGS.CATEGORY_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.categories.v2.CategoriesService.DeleteCategory
 */
export async function deleteCategory(categoryId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        categoryId: categoryId,
    });
    const reqOpts = ambassadorWixBookingsCategoriesV2Category.deleteCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { categoryId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['categoryId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of Categories, given the provided [paging, filtering, and sorting][1].
 *
 * Up to 1,000 Categories can be returned per request.
 *
 * To learn how to query Categories, see [API Query Language][2].
 *
 * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
 * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
 * @public
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.CATEGORY_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.categories.v2.CategoriesService.QueryCategories
 */
export function queryCategories() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixBookingsCategoriesV2Category.queryCategories(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.categories,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Counts categories according to given criteria.
 * Use [WQL
 * filter](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section)
 * to define the criteria.
 * @public
 * @permissionId BOOKINGS.CATEGORY_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.categories.v2.CategoriesService.CountCategories
 */
export async function countCategories(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        filter: options?.filter,
    });
    const reqOpts = ambassadorWixBookingsCategoriesV2Category.countCategories(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0].filter' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Moves a category to a different position in the list
 * @param categoryId - Id of the category to move
 * @public
 * @requiredField categoryId
 * @permissionId BOOKINGS.CATEGORY_MOVE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.categories.v2.CategoriesService.MoveCategory
 */
export async function moveCategory(categoryId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        categoryId: categoryId,
        position: options?.position,
        afterCategoryId: options?.afterCategoryId,
    });
    const reqOpts = ambassadorWixBookingsCategoriesV2Category.moveCategory(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                categoryId: '$[0]',
                position: '$[1].position',
                afterCategoryId: '$[1].afterCategoryId',
            },
            singleArgumentUnchanged: false,
        }, ['categoryId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=bookings-categories-v2-category-service-categories.universal.js.map