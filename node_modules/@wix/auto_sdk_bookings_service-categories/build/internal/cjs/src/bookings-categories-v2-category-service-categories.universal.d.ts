/**
 * Categories are used to group multiple services together.
 * A service must be associated with a category in order to be exposed in the Wix Bookings UI.
 * Read more about Categories
 * in this [article](https://support.wix.com/en/article/about-service-categories-in-wix-bookings).
 */
export interface Category {
    /**
     * Category ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the Category is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the Category.
     *
     * Ignored when creating a Category.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the Category was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the Category was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Category name
     * Max: 100 characters
     * @minLength 1
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Sort order of the category.
     * The sort order determines the relative position of a category in the categories list.
     * There could be gaps in the sort order of 2 adjacent categories.
     * @readonly
     */
    sortOrder?: number | null;
    /** Data Extensions */
    extendedFields?: ExtendedFields;
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface CreateCategoryRequest {
    /** Category to be created. */
    category: Category;
}
export interface CreateCategoryResponse {
    /** The created Category. */
    category?: Category;
}
export interface GetCategoryRequest {
    /**
     * ID of the Category to retrieve.
     * @format GUID
     */
    categoryId: string;
}
export interface GetCategoryResponse {
    /** The requested Category. */
    category?: Category;
}
export interface UpdateCategoryRequest {
    /** Category to be updated, may be partial. */
    category: Category;
}
export interface UpdateCategoryResponse {
    /** Updated Category. */
    category?: Category;
}
export interface DeleteCategoryRequest {
    /**
     * Id of the Category to delete.
     * @format GUID
     */
    categoryId: string;
}
export interface DeleteCategoryResponse {
}
export interface QueryCategoriesRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     * @maxSize 5
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /**
     * Name of the field to sort by.
     * @maxLength 512
     */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /**
     * Maximum number of items to return in the results.
     * @max 100
     */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     * @maxLength 16000
     */
    cursor?: string | null;
}
export interface QueryCategoriesResponse {
    /** List of Categories. */
    categories?: Category[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /**
     * Cursor string pointing to the next page in the list of results.
     * @maxLength 16000
     */
    next?: string | null;
    /**
     * Cursor pointing to the previous page in the list of results.
     * @maxLength 16000
     */
    prev?: string | null;
}
export interface CountCategoriesRequest {
    /** Filter to apply on categories to count */
    filter?: Record<string, any> | null;
}
export interface CountCategoriesResponse {
    /** The number of categories matching the given filter. */
    count?: number;
}
export interface MoveCategoryRequest {
    /**
     * Id of the category to move
     * @format GUID
     */
    categoryId: string;
    /** The new position to move the category to */
    position?: Position;
    /**
     * If `position` is set to `AFTER_CATEGORY`, `after_category_id` must be provided, otherwise it must be empty
     * If `after_category_id` is provided with a position other than `AFTER_CATEGORY`, a validation error is returned
     * @format GUID
     */
    afterCategoryId?: string | null;
}
export declare enum Position {
    UNKNOWN_POSITION = "UNKNOWN_POSITION",
    /** Last position in the list */
    LAST = "LAST",
    /** First position in the list */
    FIRST = "FIRST",
    /** After another category */
    AFTER_CATEGORY = "AFTER_CATEGORY"
}
export interface MoveCategoryResponse {
    /** The category that was moved */
    category?: Category;
}
export interface ImportCategoriesRequest {
    /**
     * List of Categories to import
     * @minSize 1
     * @maxSize 100
     */
    categories?: Category[];
}
export interface ImportCategoriesResponse {
}
export interface PublishCategoriesUpdatedRequest {
}
export interface PublishCategoriesUpdatedResponse {
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /**
     * ID of a site visitor that has not logged in to the site.
     * @format GUID
     */
    anonymousVisitorId?: string;
    /**
     * ID of a site visitor that has logged in to the site.
     * @format GUID
     */
    memberId?: string;
    /**
     * ID of a Wix user (site owner, contributor, etc.).
     * @format GUID
     */
    wixUserId?: string;
    /**
     * ID of an app.
     * @format GUID
     */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface CountCategoriesResponseNonNullableFields {
    count: number;
}
export interface BaseEventMetadata {
    /**
     * App instance ID.
     * @format GUID
     */
    instanceId?: string | null;
    /**
     * Event type.
     * @maxLength 150
     */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface CategoryCreatedEnvelope {
    entity: Category;
    metadata: EventMetadata;
}
/** @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.CATEGORY_READ
 * @webhook
 * @eventType wix.bookings.categories.v2.category_created
 * @slug created
 */
export declare function onCategoryCreated(handler: (event: CategoryCreatedEnvelope) => void | Promise<void>): void;
export interface CategoryDeletedEnvelope {
    entity: Category;
    metadata: EventMetadata;
}
/** @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.CATEGORY_READ
 * @webhook
 * @eventType wix.bookings.categories.v2.category_deleted
 * @slug deleted
 */
export declare function onCategoryDeleted(handler: (event: CategoryDeletedEnvelope) => void | Promise<void>): void;
export interface CategoryUpdatedEnvelope {
    entity: Category;
    metadata: EventMetadata;
}
/** @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.CATEGORY_READ
 * @webhook
 * @eventType wix.bookings.categories.v2.category_updated
 * @slug updated
 */
export declare function onCategoryUpdated(handler: (event: CategoryUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Creates a Category.
 *
 *
 * The request body must include category name.
 * @param category - Category to be created.
 * @public
 * @requiredField category
 * @requiredField category.name
 * @permissionId BOOKINGS.CATEGORY_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns The created Category.
 * @fqn wix.bookings.categories.v2.CategoriesService.CreateCategory
 */
export declare function createCategory(category: Category): Promise<Category>;
/**
 * Retrieves a Category.
 * @param categoryId - ID of the Category to retrieve.
 * @public
 * @requiredField categoryId
 * @permissionId BOOKINGS.CATEGORY_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested Category.
 * @fqn wix.bookings.categories.v2.CategoriesService.GetCategory
 */
export declare function getCategory(categoryId: string): Promise<Category>;
/**
 * Updates a Category.
 *
 *
 * Each time the Category is updated,
 * `revision` increments by 1.
 * The current `revision` must be passed when updating the Category.
 * This ensures you're working with the latest Category
 * and prevents unintended overwrites.
 * @param _id - Category ID.
 * @public
 * @requiredField _id
 * @requiredField category
 * @requiredField category.revision
 * @permissionId BOOKINGS.CATEGORY_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated Category.
 * @fqn wix.bookings.categories.v2.CategoriesService.UpdateCategory
 */
export declare function updateCategory(_id: string | null, category: UpdateCategory): Promise<Category>;
export interface UpdateCategory {
    /**
     * Category ID.
     * @format GUID
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the Category is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the Category.
     *
     * Ignored when creating a Category.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the Category was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the Category was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Category name
     * Max: 100 characters
     * @minLength 1
     * @maxLength 100
     */
    name?: string | null;
    /**
     * Sort order of the category.
     * The sort order determines the relative position of a category in the categories list.
     * There could be gaps in the sort order of 2 adjacent categories.
     * @readonly
     */
    sortOrder?: number | null;
    /** Data Extensions */
    extendedFields?: ExtendedFields;
}
/**
 * Deletes a Category.
 *
 *
 * Deleting a Category permanently removes them from the Category List.
 * @param categoryId - Id of the Category to delete.
 * @public
 * @requiredField categoryId
 * @permissionId BOOKINGS.CATEGORY_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.categories.v2.CategoriesService.DeleteCategory
 */
export declare function deleteCategory(categoryId: string): Promise<void>;
/**
 * Retrieves a list of Categories, given the provided [paging, filtering, and sorting][1].
 *
 * Up to 1,000 Categories can be returned per request.
 *
 * To learn how to query Categories, see [API Query Language][2].
 *
 * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
 * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
 * @public
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId BOOKINGS.CATEGORY_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.categories.v2.CategoriesService.QueryCategories
 */
export declare function queryCategories(): CategoriesQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface CategoriesQueryResult extends QueryCursorResult {
    items: Category[];
    query: CategoriesQueryBuilder;
    next: () => Promise<CategoriesQueryResult>;
    prev: () => Promise<CategoriesQueryResult>;
}
export interface CategoriesQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    eq: (propertyName: '_id' | 'name' | 'sortOrder', value: any) => CategoriesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ne: (propertyName: '_id' | 'name' | 'sortOrder', value: any) => CategoriesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    ge: (propertyName: 'sortOrder', value: any) => CategoriesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    gt: (propertyName: 'sortOrder', value: any) => CategoriesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    le: (propertyName: 'sortOrder', value: any) => CategoriesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     */
    lt: (propertyName: 'sortOrder', value: any) => CategoriesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     */
    startsWith: (propertyName: '_id' | 'name', value: string) => CategoriesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     */
    hasSome: (propertyName: '_id' | 'name' | 'sortOrder', value: any[]) => CategoriesQueryBuilder;
    in: (propertyName: '_id' | 'name' | 'sortOrder', value: any) => CategoriesQueryBuilder;
    exists: (propertyName: '_id' | 'name' | 'sortOrder', value: boolean) => CategoriesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    ascending: (...propertyNames: Array<'_id' | 'name' | 'sortOrder'>) => CategoriesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments. */
    descending: (...propertyNames: Array<'_id' | 'name' | 'sortOrder'>) => CategoriesQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object. */
    limit: (limit: number) => CategoriesQueryBuilder;
    /** @param cursor - A pointer to specific record */
    skipTo: (cursor: string) => CategoriesQueryBuilder;
    find: () => Promise<CategoriesQueryResult>;
}
/**
 * Counts categories according to given criteria.
 * Use [WQL
 * filter](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section)
 * to define the criteria.
 * @public
 * @permissionId BOOKINGS.CATEGORY_READ
 * @permissionScope Read Bookings - Public Data
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-PUBLIC
 * @permissionScope Manage Bookings Services and Settings
 * @permissionScopeId SCOPE.BOOKINGS.CONFIGURATION
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Read Bookings - Including Participants
 * @permissionScopeId SCOPE.DC-BOOKINGS.READ-BOOKINGS-SENSITIVE
 * @permissionScope Read Bookings - all read permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.READ-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.bookings.categories.v2.CategoriesService.CountCategories
 */
export declare function countCategories(options?: CountCategoriesOptions): Promise<CountCategoriesResponse & CountCategoriesResponseNonNullableFields>;
export interface CountCategoriesOptions {
    /** Filter to apply on categories to count */
    filter?: Record<string, any> | null;
}
/**
 * Moves a category to a different position in the list
 * @param categoryId - Id of the category to move
 * @public
 * @requiredField categoryId
 * @permissionId BOOKINGS.CATEGORY_MOVE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.bookings.categories.v2.CategoriesService.MoveCategory
 */
export declare function moveCategory(categoryId: string, options?: MoveCategoryOptions): Promise<MoveCategoryResponse>;
export interface MoveCategoryOptions {
    /** The new position to move the category to */
    position?: Position;
    /**
     * If `position` is set to `AFTER_CATEGORY`, `after_category_id` must be provided, otherwise it must be empty
     * If `after_category_id` is provided with a position other than `AFTER_CATEGORY`, a validation error is returned
     * @format GUID
     */
    afterCategoryId?: string | null;
}
export {};
